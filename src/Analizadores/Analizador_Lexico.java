// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: A_Lexico.jflex

/* JFlex example: partial Java language lexer specification */
package Analizadores;
import java_cup.runtime.*;
import java.util.ArrayList;
/**
    * This class is a simple example lexer.
    */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int hexaState = 4;
  public static final int hexaStateC = 6;
  public static final int hexaStateError = 8;
  public static final int hexaStateCError = 10;
  public static final int numberState = 12;
  public static final int NaturalNumbers = 14;
  public static final int Chars = 16;
  public static final int stateNosibol = 18;
  public static final int filtro = 20;
  public static final int otraMas = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  6,  6, 
     7,  7,  8,  8,  9,  9,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\2\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\11\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\27"+
    "\1\6\1\31\1\32\1\33\1\34\1\6\1\0\6\35"+
    "\24\36\1\37\1\0\1\40\1\6\1\41\1\0\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\36\1\53\1\54\1\55\1\56\1\57\1\60\1\36"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\37\1\72\1\40\1\73\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\2\2\1\3\1\4\2\3\1\5\2\3"+
    "\1\6\2\3\1\7\2\3\22\10\1\3\1\11\2\12"+
    "\1\13\1\14\15\11\1\15\1\16\1\17\1\11\1\20"+
    "\1\11\15\15\1\21\1\22\15\21\1\23\2\24\1\25"+
    "\15\23\16\26\2\27\1\30\1\31\1\32\2\33\1\34"+
    "\16\32\1\35\1\36\6\37\15\36\1\37\1\40\1\0"+
    "\1\41\1\42\1\0\1\2\2\43\1\44\1\10\1\45"+
    "\47\10\2\11\1\45\26\11\2\0\1\45\27\0\1\42"+
    "\4\0\2\43\16\10\1\45\2\10\1\45\23\10\1\46"+
    "\1\10\6\11\1\45\16\11\6\0\1\45\20\0\1\2"+
    "\1\0\1\42\4\43\3\10\1\45\1\47\6\10\1\50"+
    "\1\51\17\10\1\47\6\10\1\45\25\11\1\45\25\0"+
    "\1\45\2\0\1\42\2\43\2\10\1\45\26\10\17\11"+
    "\20\0\1\43\2\0\1\43\1\10\2\45\7\10\1\45"+
    "\2\10\4\11\1\45\1\11\4\0\1\45\3\0\1\43"+
    "\5\10\4\11\6\0\2\10\1\11\1\0\2\10\1\11"+
    "\1\0\2\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[568];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0258\0\u0294\0\u02d0\0\u0258\0\u0258"+
    "\0\u030c\0\u0258\0\u0348\0\u0384\0\u02d0\0\u03c0\0\u03fc\0\u0438"+
    "\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618"+
    "\0\u0654\0\u0690\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8"+
    "\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u0258\0\u099c"+
    "\0\u0258\0\u0258\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04"+
    "\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0258"+
    "\0\u0258\0\u0258\0\u0ce4\0\u0258\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4"+
    "\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4"+
    "\0\u0ff0\0\u102c\0\u0258\0\u0258\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10"+
    "\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0"+
    "\0\u102c\0\u0258\0\u0258\0\u1068\0\u0258\0\u0d5c\0\u0d98\0\u0dd4"+
    "\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4"+
    "\0\u0ff0\0\u102c\0\u0258\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c"+
    "\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c"+
    "\0\u0258\0\u10a4\0\u0258\0\u0258\0\u0258\0\u0258\0\u10e0\0\u0258"+
    "\0\u111c\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4"+
    "\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u0258\0\u0258"+
    "\0\u1158\0\u0258\0\u1194\0\u11d0\0\u120c\0\u1248\0\u0d5c\0\u0d98"+
    "\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78"+
    "\0\u0fb4\0\u0ff0\0\u102c\0\u1284\0\u0258\0\u0348\0\u12c0\0\u12fc"+
    "\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u04ec\0\u14a0"+
    "\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680"+
    "\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860"+
    "\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40"+
    "\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20"+
    "\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00"+
    "\0\u0960\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4"+
    "\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184"+
    "\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364"+
    "\0\u23a0\0\u0258\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508"+
    "\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8"+
    "\0\u2724\0\u2760\0\u279c\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8"+
    "\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8"+
    "\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88"+
    "\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0\0\u2e2c\0\u2e68"+
    "\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048"+
    "\0\u3084\0\u30c0\0\u30fc\0\u3138\0\u3174\0\u31b0\0\u31ec\0\u3228"+
    "\0\u3264\0\u32a0\0\u32dc\0\u3318\0\u3354\0\u04ec\0\u3390\0\u33cc"+
    "\0\u3408\0\u3444\0\u3480\0\u34bc\0\u34f8\0\u3534\0\u3570\0\u35ac"+
    "\0\u35e8\0\u3624\0\u3660\0\u369c\0\u36d8\0\u3714\0\u3750\0\u378c"+
    "\0\u37c8\0\u3804\0\u3840\0\u387c\0\u38b8\0\u38f4\0\u3930\0\u396c"+
    "\0\u39a8\0\u39e4\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10\0\u3b4c"+
    "\0\u3b88\0\u3bc4\0\u3c00\0\u3c3c\0\u3c78\0\u3cb4\0\u3cf0\0\u3d2c"+
    "\0\u3d68\0\u3da4\0\u3de0\0\u297c\0\u3e1c\0\u3e58\0\u2a30\0\u3e94"+
    "\0\u3ed0\0\u3f0c\0\u3f48\0\u3f84\0\u3fc0\0\u3ffc\0\u4038\0\u4074"+
    "\0\u40b0\0\u40ec\0\u4128\0\u4164\0\u41a0\0\u0258\0\u0258\0\u41dc"+
    "\0\u4218\0\u4254\0\u4290\0\u42cc\0\u4308\0\u4344\0\u4380\0\u43bc"+
    "\0\u43f8\0\u4434\0\u4470\0\u44ac\0\u44e8\0\u4524\0\u04ec\0\u4560"+
    "\0\u459c\0\u45d8\0\u4614\0\u4650\0\u468c\0\u46c8\0\u4704\0\u4740"+
    "\0\u477c\0\u47b8\0\u47f4\0\u4830\0\u486c\0\u48a8\0\u48e4\0\u4920"+
    "\0\u495c\0\u4998\0\u49d4\0\u4a10\0\u4a4c\0\u4a88\0\u4ac4\0\u4b00"+
    "\0\u4b3c\0\u4b78\0\u4bb4\0\u4bf0\0\u4c2c\0\u4c68\0\u4ca4\0\u4ce0"+
    "\0\u4d1c\0\u4d58\0\u4d94\0\u4dd0\0\u4e0c\0\u4e48\0\u4e84\0\u4ec0"+
    "\0\u4efc\0\u4f38\0\u4f74\0\u4fb0\0\u4fec\0\u5028\0\u5064\0\u50a0"+
    "\0\u50dc\0\u5118\0\u5154\0\u5190\0\u51cc\0\u5208\0\u5244\0\u5280"+
    "\0\u52bc\0\u52f8\0\u5334\0\u5370\0\u53ac\0\u53e8\0\u5424\0\u5460"+
    "\0\u549c\0\u54d8\0\u5514\0\u5550\0\u558c\0\u55c8\0\u5604\0\u5640"+
    "\0\u567c\0\u56b8\0\u56f4\0\u5730\0\u576c\0\u57a8\0\u57e4\0\u5820"+
    "\0\u585c\0\u5898\0\u58d4\0\u5910\0\u594c\0\u5988\0\u59c4\0\u5a00"+
    "\0\u5a3c\0\u5a78\0\u5ab4\0\u5af0\0\u5b2c\0\u5b68\0\u5ba4\0\u5be0"+
    "\0\u5c1c\0\u5c58\0\u5c94\0\u5cd0\0\u5d0c\0\u5d48\0\u5d84\0\u5dc0"+
    "\0\u5dfc\0\u5e38\0\u5e74\0\u5eb0\0\u5eec\0\u5f28\0\u5f64\0\u5fa0"+
    "\0\u5fdc\0\u6018\0\u6054\0\u6090\0\u60cc\0\u6108\0\u6144\0\u6180"+
    "\0\u61bc\0\u61f8\0\u6234\0\u6270\0\u62ac\0\u3228\0\u62e8\0\u6324"+
    "\0\u6360\0\u639c\0\u63d8\0\u6414\0\u378c\0\u6450\0\u648c\0\u64c8"+
    "\0\u6504\0\u6540\0\u3c78\0\u657c\0\u65b8\0\u65f4\0\u6630\0\u666c"+
    "\0\u66a8\0\u66e4\0\u6720\0\u675c\0\u6798\0\u67d4\0\u6810\0\u684c"+
    "\0\u6888\0\u68c4\0\u6900\0\u693c\0\u6978\0\u69b4\0\u69f0\0\u6a2c"+
    "\0\u6a68\0\u6aa4\0\u6ae0\0\u6b1c\0\u6b58\0\u6b94\0\u6bd0\0\u6c0c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[568];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\2\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\20\1\23\1\24\1\25\1\16\1\26\1\27\11\30"+
    "\1\20\1\31\1\16\1\32\2\33\1\20\1\23\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\33\1\42"+
    "\1\43\2\33\1\44\2\33\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\33\1\54\1\33\1\55\1\23"+
    "\2\56\1\57\1\60\1\56\1\61\2\56\1\62\33\56"+
    "\1\63\1\64\1\65\1\66\2\56\1\67\2\56\1\70"+
    "\2\56\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\5\56\5\100\1\101\2\100\1\102\7\100\11\103\1\104"+
    "\3\100\1\105\6\100\1\106\1\107\1\110\1\111\2\100"+
    "\1\112\2\100\1\113\2\100\1\114\1\115\1\116\1\117"+
    "\1\120\1\121\1\122\5\100\5\123\1\124\2\123\1\101"+
    "\7\123\11\103\1\104\3\123\1\105\6\123\1\125\1\126"+
    "\1\127\1\130\2\123\1\131\2\123\1\132\2\123\1\133"+
    "\1\134\1\135\1\136\1\137\1\140\1\141\5\123\1\142"+
    "\2\143\1\144\1\142\1\145\23\142\1\145\12\142\1\146"+
    "\1\147\1\150\1\151\2\142\1\152\2\142\1\153\2\142"+
    "\1\154\1\155\1\156\1\157\1\160\1\161\1\162\15\142"+
    "\1\145\20\142\1\145\12\142\1\146\1\147\1\150\1\151"+
    "\2\142\1\152\2\142\1\153\2\142\1\154\1\155\1\156"+
    "\1\157\1\160\1\161\1\162\5\142\44\163\1\164\1\165"+
    "\1\166\1\167\2\163\1\170\2\163\1\171\2\163\1\172"+
    "\1\173\1\174\1\175\1\176\1\177\1\200\5\163\2\56"+
    "\1\201\1\202\1\56\1\203\2\56\1\204\33\56\1\63"+
    "\1\64\1\65\1\66\2\56\1\67\2\56\1\70\2\56"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\5\56"+
    "\1\205\2\206\1\207\5\205\2\210\4\205\1\211\11\205"+
    "\1\210\5\205\2\210\3\205\1\212\1\213\1\214\1\215"+
    "\2\205\1\216\2\205\1\217\2\205\1\220\1\221\1\222"+
    "\1\223\1\224\1\225\1\226\5\205\1\227\3\230\1\231"+
    "\1\227\1\232\1\233\1\227\2\232\1\234\2\231\1\232"+
    "\1\231\11\230\1\232\1\235\1\231\1\236\2\230\2\232"+
    "\1\227\2\230\1\237\1\240\1\241\1\242\2\230\1\243"+
    "\2\230\1\244\2\230\1\245\1\246\1\247\1\250\1\251"+
    "\1\252\1\253\3\230\1\254\1\255\76\0\1\14\124\0"+
    "\1\20\47\0\1\20\76\0\1\256\22\0\2\257\1\0"+
    "\1\256\31\257\1\0\1\256\13\0\1\20\17\0\1\20"+
    "\60\0\11\260\56\0\1\261\3\0\1\262\13\0\1\20"+
    "\56\0\1\260\1\0\11\30\4\0\2\263\2\0\5\263"+
    "\1\264\23\263\34\0\2\20\73\0\2\20\43\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\11\33\1\0"+
    "\3\265\2\33\2\265\31\33\2\265\4\0\1\265\1\0"+
    "\2\265\3\0\3\265\1\0\1\265\11\33\1\0\3\265"+
    "\2\33\2\265\4\33\1\266\14\33\1\267\7\33\2\265"+
    "\4\0\1\265\1\0\2\265\3\0\3\265\1\0\1\265"+
    "\11\33\1\0\3\265\2\33\2\265\1\33\1\270\14\33"+
    "\1\271\1\33\1\272\6\33\1\273\1\33\2\265\4\0"+
    "\1\265\1\0\2\265\3\0\3\265\1\0\1\265\11\33"+
    "\1\0\3\265\2\33\2\265\1\33\1\274\14\33\1\275"+
    "\12\33\2\265\4\0\1\265\1\0\2\265\3\0\3\265"+
    "\1\0\1\265\11\33\1\0\3\265\2\33\2\265\1\33"+
    "\1\276\3\33\1\277\10\33\1\267\12\33\2\265\4\0"+
    "\1\265\1\0\2\265\3\0\3\265\1\0\1\265\11\33"+
    "\1\0\3\265\2\33\2\265\13\33\1\300\1\33\1\301"+
    "\4\33\1\302\6\33\2\265\4\0\1\265\1\0\2\265"+
    "\3\0\3\265\1\0\1\265\11\33\1\0\3\265\2\33"+
    "\2\265\1\33\1\303\7\33\1\304\4\33\1\305\1\33"+
    "\1\306\2\33\1\307\5\33\2\265\4\0\1\265\1\0"+
    "\2\265\3\0\3\265\1\0\1\265\11\33\1\0\3\265"+
    "\2\33\2\265\5\33\1\310\10\33\1\311\12\33\2\265"+
    "\4\0\1\265\1\0\2\265\3\0\3\265\1\0\1\265"+
    "\11\33\1\0\3\265\2\33\2\265\6\33\1\267\5\33"+
    "\1\312\1\313\13\33\2\265\4\0\1\265\1\0\2\265"+
    "\3\0\3\265\1\0\1\265\11\33\1\0\3\265\2\33"+
    "\2\265\1\33\1\314\7\33\1\315\4\33\1\316\12\33"+
    "\2\265\4\0\1\265\1\0\2\265\3\0\3\265\1\0"+
    "\1\265\11\33\1\0\3\265\2\33\2\265\1\33\1\317"+
    "\16\33\1\320\2\33\1\321\5\33\2\265\4\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\11\33\1\0"+
    "\3\265\2\33\2\265\5\33\1\322\23\33\2\265\4\0"+
    "\1\265\1\0\2\265\3\0\3\265\1\0\1\265\11\33"+
    "\1\0\3\265\2\33\2\265\5\33\1\323\10\33\1\324"+
    "\3\33\1\325\5\33\1\326\2\265\4\0\1\265\1\0"+
    "\2\265\3\0\3\265\1\0\1\265\11\33\1\0\3\265"+
    "\2\33\2\265\10\33\1\327\7\33\1\330\10\33\2\265"+
    "\4\0\1\265\1\0\2\265\3\0\3\265\1\0\1\265"+
    "\11\33\1\0\3\265\2\33\2\265\6\33\1\331\2\33"+
    "\1\332\17\33\2\265\4\0\1\265\1\0\2\265\3\0"+
    "\3\265\1\0\1\265\11\33\1\0\3\265\2\33\2\265"+
    "\1\33\1\305\7\33\1\333\17\33\2\265\4\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\11\33\1\0"+
    "\3\265\2\33\2\265\5\33\1\334\2\33\1\335\20\33"+
    "\2\265\4\0\1\265\1\0\2\265\3\0\3\265\1\0"+
    "\1\265\11\33\1\0\3\265\2\33\2\265\5\33\1\336"+
    "\23\33\2\265\72\0\1\20\1\0\2\56\2\0\1\56"+
    "\1\0\2\56\1\0\63\56\2\0\1\57\71\0\2\56"+
    "\2\0\1\56\1\0\2\56\1\0\46\56\1\337\16\56"+
    "\2\0\1\56\1\0\2\56\1\0\35\56\1\340\10\56"+
    "\1\341\16\56\2\0\1\56\1\0\2\56\1\0\43\56"+
    "\1\342\1\56\1\343\17\56\2\0\1\56\1\0\2\56"+
    "\1\0\31\56\1\344\14\56\1\345\1\56\1\346\2\56"+
    "\1\347\11\56\2\0\1\56\1\0\2\56\1\0\36\56"+
    "\1\341\5\56\1\350\1\351\17\56\2\0\1\56\1\0"+
    "\2\56\1\0\31\56\1\352\14\56\1\353\16\56\2\0"+
    "\1\56\1\0\2\56\1\0\31\56\1\354\16\56\1\355"+
    "\2\56\1\356\11\56\2\0\1\56\1\0\2\56\1\0"+
    "\35\56\1\357\27\56\2\0\1\56\1\0\2\56\1\0"+
    "\46\56\1\360\3\56\1\361\12\56\2\0\1\56\1\0"+
    "\2\56\1\0\40\56\1\362\7\56\1\363\14\56\2\0"+
    "\1\56\1\0\2\56\1\0\36\56\1\364\2\56\1\365"+
    "\23\56\2\0\1\56\1\0\2\56\1\0\31\56\1\345"+
    "\7\56\1\366\23\56\2\0\1\56\1\0\2\56\1\0"+
    "\40\56\1\367\22\56\20\0\11\103\100\0\1\105\115\0"+
    "\1\370\62\0\1\371\10\0\1\372\70\0\1\373\1\0"+
    "\1\374\57\0\1\375\14\0\1\376\1\0\1\377\2\0"+
    "\1\u0100\56\0\1\372\5\0\1\u0101\1\u0102\57\0\1\u0103"+
    "\14\0\1\u0104\56\0\1\u0105\16\0\1\u0106\2\0\1\u0107"+
    "\55\0\1\u0108\104\0\1\u0109\3\0\1\u010a\61\0\1\u010b"+
    "\7\0\1\u010c\61\0\1\u010d\2\0\1\u010e\63\0\1\376"+
    "\7\0\1\u010f\72\0\1\u0110\24\0\1\143\73\0\1\201"+
    "\73\0\1\206\110\0\1\210\107\0\1\232\47\0\1\232"+
    "\77\0\1\232\17\0\1\232\72\0\2\232\73\0\2\232"+
    "\131\0\1\232\21\0\11\257\4\0\2\257\2\0\31\257"+
    "\20\0\1\u0111\1\0\11\u0112\4\0\2\263\2\0\5\263"+
    "\1\264\23\263\2\0\13\u0113\1\u0114\60\u0113\2\262\1\14"+
    "\1\15\70\262\20\0\11\263\4\0\2\263\2\0\31\263"+
    "\17\0\1\u0115\1\u0116\1\0\11\u0117\4\0\2\263\2\0"+
    "\5\263\1\u0118\23\263\6\0\1\265\1\0\2\265\3\0"+
    "\3\265\1\0\1\265\12\0\3\265\2\0\2\265\31\0"+
    "\2\265\4\0\1\265\1\0\2\265\3\0\3\265\1\0"+
    "\1\265\11\33\1\0\3\265\2\33\2\265\4\33\1\u0119"+
    "\24\33\2\265\4\0\1\265\1\0\2\265\3\0\3\265"+
    "\1\0\1\265\11\33\1\0\3\265\2\33\2\265\13\33"+
    "\1\u011a\15\33\2\265\4\0\1\265\1\0\2\265\3\0"+
    "\3\265\1\0\1\265\11\33\1\0\3\265\2\33\2\265"+
    "\16\33\1\u011b\12\33\2\265\4\0\1\265\1\0\2\265"+
    "\3\0\3\265\1\0\1\265\11\33\1\0\3\265\2\33"+
    "\2\265\5\33\1\u011c\23\33\2\265\4\0\1\265\1\0"+
    "\2\265\3\0\3\265\1\0\1\265\11\33\1\0\3\265"+
    "\2\33\2\265\22\33\1\u011d\6\33\2\265\4\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\11\33\1\0"+
    "\3\265\2\33\2\265\13\33\1\u011e\15\33\2\265\4\0"+
    "\1\265\1\0\2\265\3\0\3\265\1\0\1\265\11\33"+
    "\1\0\3\265\2\33\2\265\15\33\1\u011f\13\33\2\265"+
    "\4\0\1\265\1\0\2\265\3\0\3\265\1\0\1\265"+
    "\11\33\1\0\3\265\2\33\2\265\27\33\1\u0120\1\33"+
    "\2\265\4\0\1\265\1\0\2\265\3\0\3\265\1\0"+
    "\1\265\11\33\1\0\3\265\2\33\2\265\13\33\1\u0121"+
    "\15\33\2\265\4\0\1\265\1\0\2\265\3\0\3\265"+
    "\1\0\1\265\11\33\1\0\3\265\2\33\2\265\21\33"+
    "\1\u0122\7\33\2\265\4\0\1\265\1\0\2\265\3\0"+
    "\3\265\1\0\1\265\11\33\1\0\3\265\2\33\2\265"+
    "\23\33\1\u0123\5\33\2\265\4\0\1\265\1\0\2\265"+
    "\3\0\3\265\1\0\1\265\11\33\1\0\3\265\2\33"+
    "\2\265\10\33\1\u0124\20\33\2\265\4\0\1\265\1\0"+
    "\2\265\3\0\3\265\1\0\1\265\11\33\1\0\3\265"+
    "\2\33\2\265\13\33\1\300\15\33\2\265\4\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\11\33\1\0"+
    "\3\265\2\33\2\265\15\33\1\u0125\13\33\2\265\4\0"+
    "\1\265\1\0\2\265\3\0\3\265\1\0\1\265\11\33"+
    "\1\0\3\265\2\33\2\265\20\33\1\267\10\33\2\265"+
    "\4\0\1\265\1\0\2\265\3\0\3\265\1\0\1\265"+
    "\11\33\1\0\3\265\2\33\2\265\16\33\1\u0123\12\33"+
    "\2\265\4\0\1\265\1\0\2\265\3\0\3\265\1\0"+
    "\1\265\11\33\1\0\3\265\2\33\2\265\15\33\1\u0126"+
    "\13\33\2\265\4\0\1\265\1\0\2\265\3\0\3\265"+
    "\1\0\1\265\11\33\1\0\3\265\2\33\2\265\26\33"+
    "\1\u0127\2\33\2\265\4\0\1\265\1\0\2\265\3\0"+
    "\3\265\1\0\1\265\11\33\1\0\3\265\2\33\2\265"+
    "\23\33\1\u0128\5\33\2\265\4\0\1\265\1\0\2\265"+
    "\3\0\3\265\1\0\1\265\11\33\1\0\3\265\2\33"+
    "\2\265\17\33\1\u0129\11\33\2\265\4\0\1\265\1\0"+
    "\2\265\3\0\3\265\1\0\1\265\11\33\1\0\3\265"+
    "\2\33\2\265\22\33\1\u012a\6\33\2\265\4\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\11\33\1\0"+
    "\3\265\2\33\2\265\17\33\1\u012b\11\33\2\265\4\0"+
    "\1\265\1\0\2\265\3\0\3\265\1\0\1\265\11\33"+
    "\1\0\3\265\2\33\2\265\15\33\1\u012c\13\33\2\265"+
    "\4\0\1\265\1\0\2\265\3\0\3\265\1\0\1\265"+
    "\11\33\1\0\3\265\2\33\2\265\4\33\1\u012d\24\33"+
    "\2\265\4\0\1\265\1\0\2\265\3\0\3\265\1\0"+
    "\1\265\11\33\1\0\3\265\2\33\2\265\27\33\1\u012e"+
    "\1\33\2\265\4\0\1\265\1\0\2\265\3\0\3\265"+
    "\1\0\1\265\11\33\1\0\3\265\2\33\2\265\1\33"+
    "\1\u012f\7\33\1\u0130\17\33\2\265\4\0\1\265\1\0"+
    "\2\265\3\0\3\265\1\0\1\265\11\33\1\0\3\265"+
    "\2\33\2\265\2\33\1\u0131\26\33\2\265\4\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\11\33\1\0"+
    "\3\265\2\33\2\265\22\33\1\u0132\6\33\2\265\4\0"+
    "\1\265\1\0\2\265\3\0\3\265\1\0\1\265\11\33"+
    "\1\0\3\265\2\33\2\265\3\33\1\u0133\11\33\1\u0134"+
    "\13\33\2\265\4\0\1\265\1\0\2\265\3\0\3\265"+
    "\1\0\1\265\11\33\1\0\3\265\2\33\2\265\13\33"+
    "\1\u0135\15\33\2\265\4\0\1\265\1\0\2\265\3\0"+
    "\3\265\1\0\1\265\11\33\1\0\3\265\2\33\2\265"+
    "\20\33\1\u0136\10\33\2\265\4\0\1\265\1\0\2\265"+
    "\3\0\3\265\1\0\1\265\11\33\1\0\3\265\2\33"+
    "\2\265\1\33\1\u0137\27\33\2\265\4\0\1\265\1\0"+
    "\2\265\3\0\3\265\1\0\1\265\11\33\1\0\3\265"+
    "\2\33\2\265\11\33\1\u0138\17\33\2\265\4\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\11\33\1\0"+
    "\3\265\2\33\2\265\1\33\1\u0139\21\33\1\u0122\5\33"+
    "\2\265\4\0\1\265\1\0\2\265\3\0\3\265\1\0"+
    "\1\265\11\33\1\0\3\265\2\33\2\265\11\33\1\u013a"+
    "\17\33\2\265\4\0\1\265\1\0\2\265\3\0\3\265"+
    "\1\0\1\265\11\33\1\0\3\265\2\33\2\265\15\33"+
    "\1\u013b\13\33\2\265\4\0\1\265\1\0\2\265\3\0"+
    "\3\265\1\0\1\265\11\33\1\0\3\265\2\33\2\265"+
    "\5\33\1\u013c\23\33\2\265\4\0\1\265\1\0\2\265"+
    "\3\0\3\265\1\0\1\265\11\33\1\0\3\265\2\33"+
    "\2\265\5\33\1\u013d\3\33\1\u013e\17\33\2\265\4\0"+
    "\1\265\1\0\2\265\3\0\3\265\1\0\1\265\11\33"+
    "\1\0\3\265\2\33\2\265\11\33\1\u013f\17\33\2\265"+
    "\4\0\1\265\1\0\2\265\3\0\3\265\1\0\1\265"+
    "\11\33\1\0\3\265\2\33\2\265\1\33\1\u0128\27\33"+
    "\2\265\2\56\2\0\1\56\1\0\2\56\1\0\45\56"+
    "\1\u0140\17\56\2\0\1\56\1\0\2\56\1\0\43\56"+
    "\1\u0141\21\56\2\0\1\56\1\0\2\56\1\0\51\56"+
    "\1\u0142\13\56\2\0\1\56\1\0\2\56\1\0\53\56"+
    "\1\u0143\11\56\2\0\1\56\1\0\2\56\1\0\43\56"+
    "\1\342\21\56\2\0\1\56\1\0\2\56\1\0\50\56"+
    "\1\341\14\56\2\0\1\56\1\0\2\56\1\0\46\56"+
    "\1\u0143\16\56\2\0\1\56\1\0\2\56\1\0\45\56"+
    "\1\u0144\17\56\2\0\1\56\1\0\2\56\1\0\47\56"+
    "\1\u0145\15\56\2\0\1\56\1\0\2\56\1\0\52\56"+
    "\1\u0146\12\56\2\0\1\56\1\0\2\56\1\0\47\56"+
    "\1\u0147\15\56\2\0\1\56\1\0\2\56\1\0\34\56"+
    "\1\u0148\30\56\2\0\1\56\1\0\2\56\1\0\57\56"+
    "\1\u0149\5\56\2\0\1\56\1\0\2\56\1\0\31\56"+
    "\1\u014a\7\56\1\u014b\23\56\2\0\1\56\1\0\2\56"+
    "\1\0\32\56\1\u014c\32\56\2\0\1\56\1\0\2\56"+
    "\1\0\52\56\1\u014d\12\56\2\0\1\56\1\0\2\56"+
    "\1\0\43\56\1\u014e\21\56\2\0\1\56\1\0\2\56"+
    "\1\0\50\56\1\u014f\14\56\2\0\1\56\1\0\2\56"+
    "\1\0\41\56\1\u0150\23\56\2\0\1\56\1\0\2\56"+
    "\1\0\53\56\1\u0142\11\56\2\0\1\56\1\0\2\56"+
    "\1\0\41\56\1\u0151\23\56\2\0\1\56\1\0\2\56"+
    "\1\0\45\56\1\u0152\17\56\2\0\1\56\1\0\2\56"+
    "\1\0\35\56\1\u0153\27\56\2\0\1\56\1\0\2\56"+
    "\1\0\41\56\1\u0154\21\56\56\0\1\u0155\71\0\1\u0156"+
    "\101\0\1\u0157\75\0\1\u0158\63\0\1\373\100\0\1\372"+
    "\71\0\1\u0158\72\0\1\u0159\75\0\1\u015a\76\0\1\u015b"+
    "\70\0\1\u015c\60\0\1\u015d\116\0\1\u015e\45\0\1\u015f"+
    "\7\0\1\u0160\64\0\1\u0161\113\0\1\u0162\64\0\1\u0163"+
    "\100\0\1\u0164\64\0\1\u0165\105\0\1\u0157\61\0\1\u0166"+
    "\77\0\1\u0167\63\0\1\u0168\77\0\1\u0169\41\0\11\u016a"+
    "\61\0\1\u016a\1\0\11\u0112\4\0\2\263\2\0\5\263"+
    "\1\264\23\263\2\0\13\u0113\1\u016b\73\u0113\1\u016b\3\u0113"+
    "\1\u016c\54\u0113\15\0\1\u016d\1\u0116\1\0\11\u016e\63\0"+
    "\11\u016f\61\0\1\u0170\1\0\11\u0171\4\0\2\263\2\0"+
    "\31\263\17\0\1\u016d\1\u0116\1\0\11\u0172\4\0\2\263"+
    "\2\0\5\263\1\u0118\23\263\6\0\1\265\1\0\2\265"+
    "\3\0\3\265\1\0\1\265\11\33\1\0\3\265\2\33"+
    "\2\265\20\33\1\u0173\10\33\2\265\4\0\1\265\1\0"+
    "\2\265\3\0\3\265\1\0\1\265\11\33\1\0\3\265"+
    "\2\33\2\265\1\33\1\u0174\27\33\2\265\4\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\11\33\1\0"+
    "\3\265\2\33\2\265\13\33\1\267\15\33\2\265\4\0"+
    "\1\265\1\0\2\265\3\0\3\265\1\0\1\265\11\33"+
    "\1\0\3\265\2\33\2\265\1\33\1\u0175\27\33\2\265"+
    "\4\0\1\265\1\0\2\265\3\0\3\265\1\0\1\265"+
    "\11\33\1\0\3\265\2\33\2\265\5\33\1\u0176\23\33"+
    "\2\265\4\0\1\265\1\0\2\265\3\0\3\265\1\0"+
    "\1\265\11\33\1\0\3\265\2\33\2\265\13\33\1\u0177"+
    "\15\33\2\265\4\0\1\265\1\0\2\265\3\0\3\265"+
    "\1\0\1\265\11\33\1\0\3\265\2\33\2\265\21\33"+
    "\1\u0178\1\u0179\6\33\2\265\4\0\1\265\1\0\2\265"+
    "\3\0\3\265\1\0\1\265\11\33\1\0\3\265\2\33"+
    "\2\265\21\33\1\u013e\7\33\2\265\4\0\1\265\1\0"+
    "\2\265\3\0\3\265\1\0\1\265\11\33\1\0\3\265"+
    "\2\33\2\265\5\33\1\u017a\23\33\2\265\4\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\11\33\1\0"+
    "\3\265\2\33\2\265\5\33\1\267\23\33\2\265\4\0"+
    "\1\265\1\0\2\265\3\0\3\265\1\0\1\265\11\33"+
    "\1\0\3\265\2\33\2\265\14\33\1\267\14\33\2\265"+
    "\4\0\1\265\1\0\2\265\3\0\3\265\1\0\1\265"+
    "\11\33\1\0\3\265\2\33\2\265\5\33\1\u017b\23\33"+
    "\2\265\4\0\1\265\1\0\2\265\3\0\3\265\1\0"+
    "\1\265\11\33\1\0\3\265\2\33\2\265\15\33\1\u017c"+
    "\13\33\2\265\4\0\1\265\1\0\2\265\3\0\3\265"+
    "\1\0\1\265\11\33\1\0\3\265\2\33\2\265\3\33"+
    "\1\u017d\25\33\2\265\4\0\1\265\1\u017e\2\265\1\u017f"+
    "\2\0\3\265\1\0\1\265\11\33\1\0\3\265\2\33"+
    "\2\265\31\33\2\265\4\0\1\265\1\0\2\265\3\0"+
    "\3\265\1\0\1\265\11\33\1\0\3\265\2\33\2\265"+
    "\20\33\1\u0120\10\33\2\265\4\0\1\265\1\0\2\265"+
    "\3\0\3\265\1\0\1\265\11\33\1\0\3\265\2\33"+
    "\2\265\16\33\1\u0180\12\33\2\265\4\0\1\265\1\0"+
    "\2\265\3\0\3\265\1\0\1\265\1\33\1\u0181\1\u0182"+
    "\1\u0183\2\33\1\u0184\1\33\1\267\1\0\3\265\2\33"+
    "\2\265\5\33\1\u0185\23\33\2\265\4\0\1\265\1\0"+
    "\2\265\3\0\3\265\1\0\1\265\11\33\1\0\3\265"+
    "\2\33\2\265\17\33\1\u0186\11\33\2\265\4\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\11\33\1\0"+
    "\3\265\2\33\2\265\23\33\1\u0187\5\33\2\265\4\0"+
    "\1\265\1\0\2\265\3\0\3\265\1\0\1\265\11\33"+
    "\1\0\3\265\2\33\2\265\11\33\1\u0188\17\33\2\265"+
    "\4\0\1\265\1\0\2\265\3\0\3\265\1\0\1\265"+
    "\11\33\1\0\3\265\2\33\2\265\1\33\1\u0189\27\33"+
    "\2\265\4\0\1\265\1\0\2\265\3\0\3\265\1\0"+
    "\1\265\11\33\1\0\3\265\2\33\2\265\7\33\1\u018a"+
    "\21\33\2\265\4\0\1\265\1\0\2\265\3\0\3\265"+
    "\1\0\1\265\11\33\1\0\3\265\2\33\2\265\24\33"+
    "\1\u018b\4\33\2\265\4\0\1\265\1\0\2\265\3\0"+
    "\3\265\1\0\1\265\11\33\1\0\3\265\2\33\2\265"+
    "\13\33\1\u018c\15\33\2\265\4\0\1\265\1\0\2\265"+
    "\3\0\3\265\1\0\1\265\11\33\1\0\3\265\2\33"+
    "\2\265\23\33\1\u018d\5\33\2\265\4\0\1\265\1\0"+
    "\2\265\3\0\3\265\1\0\1\265\11\33\1\0\3\265"+
    "\2\33\2\265\16\33\1\u018e\12\33\2\265\4\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\11\33\1\0"+
    "\3\265\2\33\2\265\4\33\1\u018f\24\33\2\265\4\0"+
    "\1\265\1\0\2\265\3\0\3\265\1\0\1\265\11\33"+
    "\1\0\3\265\2\33\2\265\11\33\1\u0190\17\33\2\265"+
    "\4\0\1\265\1\0\2\265\3\0\3\265\1\0\1\265"+
    "\11\33\1\0\3\265\2\33\2\265\11\33\1\u0191\11\33"+
    "\1\u0192\5\33\2\265\4\0\1\265\1\0\2\265\3\0"+
    "\3\265\1\0\1\265\11\33\1\0\3\265\2\33\2\265"+
    "\2\33\1\u0193\26\33\2\265\4\0\1\265\1\0\2\265"+
    "\3\0\3\265\1\0\1\265\11\33\1\0\3\265\2\33"+
    "\2\265\21\33\1\267\7\33\2\265\4\0\1\265\1\0"+
    "\2\265\3\0\3\265\1\0\1\265\11\33\1\0\3\265"+
    "\2\33\2\265\15\33\1\u0194\13\33\2\265\4\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\11\33\1\0"+
    "\3\265\2\33\2\265\26\33\1\u0195\2\33\2\265\4\0"+
    "\1\265\1\0\2\265\3\0\3\265\1\0\1\265\11\33"+
    "\1\0\3\265\2\33\2\265\22\33\1\u0196\6\33\2\265"+
    "\4\0\1\265\1\0\2\265\3\0\3\265\1\0\1\265"+
    "\11\33\1\0\3\265\2\33\2\265\25\33\1\267\3\33"+
    "\2\265\4\0\1\265\1\0\2\265\3\0\3\265\1\0"+
    "\1\265\11\33\1\0\3\265\2\33\2\265\12\33\1\u0120"+
    "\16\33\2\265\4\0\1\265\1\0\2\265\3\0\3\265"+
    "\1\0\1\265\11\33\1\0\3\265\2\33\2\265\13\33"+
    "\1\u0122\15\33\2\265\2\56\2\0\1\56\1\0\2\56"+
    "\1\0\51\56\1\u0197\1\u0198\12\56\2\0\1\56\1\0"+
    "\2\56\1\0\35\56\1\u0199\27\56\2\0\1\56\1\0"+
    "\2\56\1\0\35\56\1\341\27\56\2\0\1\56\1\0"+
    "\2\56\1\0\44\56\1\341\20\56\2\0\1\56\1\0"+
    "\2\56\1\0\33\56\1\u019a\31\56\2\0\1\56\1\0"+
    "\2\56\1\0\46\56\1\u019b\16\56\2\0\1\56\1\0"+
    "\2\56\1\0\10\56\1\u019c\1\u019d\1\u019e\2\56\1\u019f"+
    "\1\56\1\341\15\56\1\u01a0\27\56\2\0\1\56\1\0"+
    "\2\56\1\0\47\56\1\u01a1\15\56\2\0\1\56\1\0"+
    "\2\56\1\0\41\56\1\u01a2\23\56\2\0\1\56\1\0"+
    "\2\56\1\0\31\56\1\u01a3\33\56\2\0\1\56\1\0"+
    "\2\56\1\0\37\56\1\u01a4\25\56\2\0\1\56\1\0"+
    "\2\56\1\0\54\56\1\u01a5\10\56\2\0\1\56\1\0"+
    "\2\56\1\0\43\56\1\u01a6\21\56\2\0\1\56\1\0"+
    "\2\56\1\0\53\56\1\u01a7\11\56\2\0\1\56\1\0"+
    "\2\56\1\0\41\56\1\u01a8\23\56\2\0\1\56\1\0"+
    "\2\56\1\0\41\56\1\u01a9\11\56\1\u01aa\11\56\2\0"+
    "\1\56\1\0\2\56\1\0\51\56\1\341\13\56\2\0"+
    "\1\56\1\0\2\56\1\0\56\56\1\u01ab\6\56\2\0"+
    "\1\56\1\0\2\56\1\0\52\56\1\u01ac\12\56\2\0"+
    "\1\56\1\0\2\56\1\0\55\56\1\341\7\56\2\0"+
    "\1\56\1\0\2\56\1\0\43\56\1\u0142\17\56\62\0"+
    "\1\u01ad\1\u01ae\56\0\1\u01af\73\0\1\372\102\0\1\372"+
    "\62\0\1\u01b0\106\0\1\u01b1\35\0\1\u01b2\1\u01b3\1\u01b4"+
    "\2\0\1\u01b5\1\0\1\372\15\0\1\u01b6\105\0\1\u01b7"+
    "\65\0\1\u01b8\63\0\1\u01b9\101\0\1\u01ba\110\0\1\u01bb"+
    "\62\0\1\u01bc\103\0\1\u01bd\61\0\1\u01be\73\0\1\u01bf"+
    "\11\0\1\u01c0\71\0\1\372\100\0\1\u01c1\67\0\1\u01c2"+
    "\76\0\1\372\61\0\1\u0157\35\0\1\u0111\1\0\11\u01c3"+
    "\4\0\2\263\2\0\5\263\1\264\23\263\2\0\13\u0113"+
    "\1\u016b\3\u0113\1\14\54\u0113\15\0\1\u016d\1\u0116\1\0"+
    "\11\u01c4\61\0\1\u0170\1\0\11\u01c5\4\0\2\263\2\0"+
    "\31\263\22\0\11\u01c6\61\0\1\u01c6\1\0\11\u0171\4\0"+
    "\2\263\2\0\5\263\1\u01c7\23\263\20\0\1\u016f\1\0"+
    "\11\u0172\4\0\2\263\2\0\31\263\6\0\1\265\1\0"+
    "\2\265\3\0\3\265\1\0\1\265\11\33\1\0\3\265"+
    "\2\33\2\265\5\33\1\u01c8\23\33\2\265\4\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\11\33\1\0"+
    "\3\265\2\33\2\265\15\33\1\u01c9\13\33\2\265\4\0"+
    "\1\265\1\0\2\265\3\0\3\265\1\0\1\265\11\33"+
    "\1\0\3\265\2\33\2\265\12\33\1\267\16\33\2\265"+
    "\4\0\1\265\1\0\2\265\3\0\3\265\1\0\1\265"+
    "\11\33\1\0\3\265\2\33\2\265\21\33\1\u01ca\7\33"+
    "\2\265\4\0\1\265\1\0\2\265\3\0\3\265\1\0"+
    "\1\265\11\33\1\0\3\265\2\33\2\265\3\33\1\u01cb"+
    "\25\33\2\265\4\0\1\265\1\0\2\265\3\0\3\265"+
    "\1\0\1\265\11\33\1\0\3\265\2\33\2\265\22\33"+
    "\1\u01cc\6\33\2\265\4\0\1\265\1\0\2\265\3\0"+
    "\3\265\1\0\1\265\11\33\1\0\3\265\2\33\2\265"+
    "\11\33\1\u01cd\6\33\1\u01ce\10\33\2\265\4\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\11\33\1\0"+
    "\3\265\2\33\2\265\7\33\1\u01cf\12\33\1\u0122\6\33"+
    "\2\265\4\0\1\265\1\0\2\265\3\0\3\265\1\0"+
    "\1\265\11\33\1\0\3\265\2\33\2\265\20\33\1\u013e"+
    "\10\33\2\265\4\0\1\265\1\0\2\265\3\0\3\265"+
    "\1\0\1\265\11\33\1\0\3\265\2\33\2\265\5\33"+
    "\1\u01d0\23\33\2\265\4\0\1\265\1\0\2\265\3\0"+
    "\3\265\1\0\1\265\11\33\1\0\3\265\2\33\2\265"+
    "\22\33\1\u01d1\6\33\2\265\4\0\1\265\1\0\2\265"+
    "\3\0\3\265\1\0\1\265\11\33\1\0\3\265\2\33"+
    "\2\265\20\33\1\u01d2\10\33\2\265\4\0\1\265\1\0"+
    "\2\265\3\0\3\265\1\0\1\265\2\33\1\u01d3\3\33"+
    "\1\267\2\33\1\0\3\265\2\33\2\265\31\33\2\265"+
    "\4\0\1\265\1\0\2\265\3\0\3\265\1\0\1\265"+
    "\5\33\1\u01d4\3\33\1\0\3\265\2\33\2\265\31\33"+
    "\2\265\4\0\1\265\1\0\2\265\3\0\3\265\1\0"+
    "\1\265\2\33\1\267\6\33\1\0\3\265\2\33\2\265"+
    "\31\33\2\265\4\0\1\265\1\0\2\265\3\0\3\265"+
    "\1\0\1\265\4\33\1\267\4\33\1\0\3\265\2\33"+
    "\2\265\31\33\2\265\4\0\1\265\1\0\2\265\3\0"+
    "\3\265\1\0\1\265\11\33\1\0\3\265\2\33\2\265"+
    "\20\33\1\u01d5\10\33\2\265\4\0\1\265\1\0\2\265"+
    "\3\0\3\265\1\0\1\265\11\33\1\0\3\265\2\33"+
    "\2\265\11\33\1\u0191\17\33\2\265\4\0\1\265\1\0"+
    "\2\265\3\0\3\265\1\0\1\265\11\33\1\0\3\265"+
    "\2\33\2\265\22\33\1\u01d6\6\33\2\265\4\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\11\33\1\0"+
    "\3\265\2\33\2\265\6\33\1\u01d7\22\33\2\265\4\0"+
    "\1\265\1\0\2\265\3\0\3\265\1\0\1\265\11\33"+
    "\1\0\3\265\2\33\2\265\2\33\1\u013f\26\33\2\265"+
    "\4\0\1\265\1\0\2\265\3\0\3\265\1\0\1\265"+
    "\11\33\1\0\3\265\2\33\2\265\14\33\1\u01d8\14\33"+
    "\2\265\4\0\1\265\1\0\2\265\3\0\3\265\1\0"+
    "\1\265\11\33\1\0\3\265\2\33\2\265\1\33\1\u01d9"+
    "\27\33\2\265\4\0\1\265\1\0\2\265\3\0\3\265"+
    "\1\0\1\265\11\33\1\0\3\265\2\33\2\265\11\33"+
    "\1\u01da\17\33\2\265\4\0\1\265\1\0\2\265\3\0"+
    "\3\265\1\0\1\265\11\33\1\0\3\265\2\33\2\265"+
    "\20\33\1\u01db\10\33\2\265\4\0\1\265\1\0\2\265"+
    "\3\0\3\265\1\0\1\265\11\33\1\0\3\265\2\33"+
    "\2\265\15\33\1\u01dc\13\33\2\265\4\0\1\265\1\0"+
    "\2\265\3\0\3\265\1\0\1\265\11\33\1\0\3\265"+
    "\2\33\2\265\4\33\1\u01dd\24\33\2\265\4\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\11\33\1\0"+
    "\3\265\2\33\2\265\15\33\1\u01de\13\33\2\265\4\0"+
    "\1\265\1\0\2\265\3\0\3\265\1\0\1\265\11\33"+
    "\1\0\3\265\2\33\2\265\3\33\1\u01d2\25\33\2\265"+
    "\4\0\1\265\1\0\2\265\3\0\3\265\1\0\1\265"+
    "\11\33\1\0\3\265\2\33\2\265\16\33\1\u013e\12\33"+
    "\2\265\4\0\1\265\1\0\2\265\3\0\3\265\1\0"+
    "\1\265\11\33\1\0\3\265\2\33\2\265\21\33\1\u01df"+
    "\7\33\2\265\4\0\1\265\1\0\2\265\3\0\3\265"+
    "\1\0\1\265\11\33\1\0\3\265\2\33\2\265\5\33"+
    "\1\u01e0\23\33\2\265\4\0\1\265\1\0\2\265\3\0"+
    "\3\265\1\0\1\265\1\33\1\u0181\1\u0182\1\u0183\2\33"+
    "\1\u0184\1\33\1\267\1\0\3\265\2\33\2\265\31\33"+
    "\2\265\2\56\2\0\1\56\1\0\2\56\1\0\52\56"+
    "\1\u01e1\12\56\2\0\1\56\1\0\2\56\1\0\41\56"+
    "\1\u01e2\6\56\1\u01e3\14\56\2\0\1\56\1\0\2\56"+
    "\1\0\52\56\1\u0142\12\56\2\0\1\56\1\0\2\56"+
    "\1\0\52\56\1\u01e4\12\56\2\0\1\56\1\0\2\56"+
    "\1\0\50\56\1\u01e5\14\56\2\0\1\56\1\0\2\56"+
    "\1\0\11\56\1\u01e6\3\56\1\341\47\56\2\0\1\56"+
    "\1\0\2\56\1\0\14\56\1\u01e7\50\56\2\0\1\56"+
    "\1\0\2\56\1\0\11\56\1\341\53\56\2\0\1\56"+
    "\1\0\2\56\1\0\13\56\1\341\51\56\2\0\1\56"+
    "\1\0\2\56\1\0\50\56\1\u01e8\14\56\2\0\1\56"+
    "\1\0\2\56\1\0\41\56\1\u01a9\23\56\2\0\1\56"+
    "\1\0\2\56\1\0\36\56\1\u01e9\26\56\2\0\1\56"+
    "\1\0\2\56\1\0\32\56\1\u0154\32\56\2\0\1\56"+
    "\1\0\2\56\1\0\44\56\1\u01ea\20\56\2\0\1\56"+
    "\1\0\2\56\1\0\31\56\1\u0199\33\56\2\0\1\56"+
    "\1\0\2\56\1\0\41\56\1\u01eb\23\56\2\0\1\56"+
    "\1\0\2\56\1\0\50\56\1\u01ec\14\56\2\0\1\56"+
    "\1\0\2\56\1\0\34\56\1\u01ed\30\56\2\0\1\56"+
    "\1\0\2\56\1\0\45\56\1\u01ee\17\56\2\0\1\56"+
    "\1\0\2\56\1\0\33\56\1\u01e5\31\56\2\0\1\56"+
    "\1\0\2\56\1\0\35\56\1\u01ef\27\56\2\0\1\56"+
    "\1\0\2\56\1\0\10\56\1\u019c\1\u019d\1\u019e\2\56"+
    "\1\u019f\1\56\1\341\43\56\63\0\1\u01f0\62\0\1\u01f1"+
    "\6\0\1\u01f2\75\0\1\u0157\73\0\1\u01f3\71\0\1\u01f4"+
    "\34\0\1\u01f5\3\0\1\372\72\0\1\u01f6\70\0\1\372"+
    "\75\0\1\372\130\0\1\u01f7\64\0\1\u01bf\70\0\1\u01f8"+
    "\67\0\1\u0169\105\0\1\u01f9\60\0\1\u01af\103\0\1\u01fa"+
    "\102\0\1\u01fb\57\0\1\u01fc\104\0\1\u01fd\61\0\1\u01f4"+
    "\75\0\1\u01fe\46\0\1\u01b2\1\u01b3\1\u01b4\2\0\1\u01b5"+
    "\1\0\1\372\61\0\1\u016a\1\0\11\u01c3\4\0\2\263"+
    "\2\0\5\263\1\264\23\263\20\0\1\u016f\1\0\11\u01c4"+
    "\61\0\1\u01c6\1\0\11\u01c5\4\0\2\263\2\0\5\263"+
    "\1\u01c7\23\263\20\0\1\u01ff\1\0\11\u0200\15\0\1\u0201"+
    "\42\0\1\u0202\2\0\11\u0203\4\0\2\263\2\0\31\263"+
    "\6\0\1\265\1\0\2\265\3\0\3\265\1\0\1\265"+
    "\11\33\1\0\3\265\2\33\2\265\21\33\1\u0138\7\33"+
    "\2\265\4\0\1\265\1\0\2\265\3\0\3\265\1\0"+
    "\1\265\11\33\1\0\3\265\2\33\2\265\3\33\1\u0204"+
    "\25\33\2\265\4\0\1\265\1\0\2\265\3\0\3\265"+
    "\1\0\1\265\1\33\2\u0205\1\u0206\5\267\1\0\3\265"+
    "\2\33\2\265\31\33\2\265\4\0\1\265\1\0\2\265"+
    "\3\0\3\265\1\0\1\265\11\33\1\0\3\265\2\33"+
    "\2\265\16\33\1\u0207\12\33\2\265\4\0\1\265\1\0"+
    "\2\265\3\0\3\265\1\0\1\265\11\33\1\0\3\265"+
    "\2\33\2\265\20\33\1\u0208\10\33\2\265\4\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\11\33\1\0"+
    "\3\265\2\33\2\265\15\33\1\u0209\13\33\2\265\4\0"+
    "\1\265\1\0\2\265\3\0\3\265\1\0\1\265\11\33"+
    "\1\0\3\265\2\33\2\265\1\33\1\u0192\27\33\2\265"+
    "\4\0\1\265\1\0\2\265\3\0\3\265\1\0\1\265"+
    "\11\33\1\0\3\265\2\33\2\265\1\33\1\u020a\27\33"+
    "\2\265\4\0\1\265\1\0\2\265\3\0\3\265\1\0"+
    "\1\265\11\33\1\0\3\265\2\33\2\265\27\33\1\u013e"+
    "\1\33\2\265\4\0\1\265\1\0\2\265\3\0\3\265"+
    "\1\0\1\265\11\33\1\0\3\265\2\33\2\265\11\33"+
    "\1\u020b\17\33\2\265\4\0\1\265\1\0\2\265\3\0"+
    "\3\265\1\0\1\265\11\33\1\0\3\265\2\33\2\265"+
    "\22\33\1\267\6\33\2\265\4\0\1\265\1\0\2\265"+
    "\3\0\3\265\1\0\1\265\10\33\1\267\1\0\3\265"+
    "\2\33\2\265\31\33\2\265\4\0\1\265\1\0\2\265"+
    "\3\0\3\265\1\0\1\265\6\33\1\267\2\33\1\0"+
    "\3\265\2\33\2\265\31\33\2\265\4\0\1\265\1\0"+
    "\2\265\3\0\3\265\1\0\1\265\11\33\1\0\3\265"+
    "\2\33\2\265\15\33\1\u020c\13\33\2\265\4\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\11\33\1\0"+
    "\3\265\2\33\2\265\5\33\1\u0120\23\33\2\265\4\0"+
    "\1\265\1\0\2\265\3\0\3\265\1\0\1\265\11\33"+
    "\1\0\3\265\2\33\2\265\11\33\1\u020d\17\33\2\265"+
    "\4\0\1\265\1\0\2\265\3\0\3\265\1\0\1\265"+
    "\11\33\1\0\3\265\2\33\2\265\1\33\1\267\27\33"+
    "\2\265\4\0\1\265\1\0\2\265\3\0\3\265\1\0"+
    "\1\265\11\33\1\0\3\265\2\33\2\265\22\33\1\u0122"+
    "\6\33\2\265\4\0\1\265\1\0\2\265\3\0\3\265"+
    "\1\0\1\265\11\33\1\0\3\265\2\33\2\265\3\33"+
    "\1\267\25\33\2\265\4\0\1\265\1\0\2\265\3\0"+
    "\3\265\1\0\1\265\11\33\1\0\3\265\2\33\2\265"+
    "\15\33\1\u020e\13\33\2\265\4\0\1\265\1\0\2\265"+
    "\3\0\3\265\1\0\1\265\11\33\1\0\3\265\2\33"+
    "\2\265\4\33\1\u0120\24\33\2\265\4\0\1\265\1\0"+
    "\2\265\3\0\3\265\1\0\1\265\11\33\1\0\3\265"+
    "\2\33\2\265\11\33\1\u020f\17\33\2\265\4\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\11\33\1\0"+
    "\3\265\2\33\2\265\7\33\1\267\21\33\2\265\4\0"+
    "\1\265\1\0\2\265\3\0\3\265\1\0\1\265\11\33"+
    "\1\0\3\265\2\33\2\265\6\33\1\u0210\22\33\2\265"+
    "\4\0\1\265\1\0\2\265\3\0\3\265\1\0\1\265"+
    "\11\33\1\0\3\265\2\33\2\265\4\33\1\267\24\33"+
    "\2\265\2\56\2\0\1\56\1\0\2\56\1\0\50\56"+
    "\1\u0211\14\56\2\0\1\56\1\0\2\56\1\0\45\56"+
    "\1\363\17\56\2\0\1\56\1\0\2\56\1\0\31\56"+
    "\1\u01aa\33\56\2\0\1\56\1\0\2\56\1\0\41\56"+
    "\1\u0212\23\56\2\0\1\56\1\0\2\56\1\0\52\56"+
    "\1\341\12\56\2\0\1\56\1\0\2\56\1\0\17\56"+
    "\1\341\45\56\2\0\1\56\1\0\2\56\1\0\15\56"+
    "\1\341\47\56\2\0\1\56\1\0\2\56\1\0\45\56"+
    "\1\u0213\17\56\2\0\1\56\1\0\2\56\1\0\41\56"+
    "\1\u0214\23\56\2\0\1\56\1\0\2\56\1\0\31\56"+
    "\1\341\33\56\2\0\1\56\1\0\2\56\1\0\33\56"+
    "\1\341\31\56\2\0\1\56\1\0\2\56\1\0\45\56"+
    "\1\u0215\17\56\2\0\1\56\1\0\2\56\1\0\41\56"+
    "\1\u0216\23\56\2\0\1\56\1\0\2\56\1\0\37\56"+
    "\1\341\25\56\2\0\1\56\1\0\2\56\1\0\34\56"+
    "\1\341\26\56\61\0\1\u0217\70\0\1\u010c\57\0\1\u01c0"+
    "\103\0\1\u0218\104\0\1\372\40\0\1\372\71\0\1\372"+
    "\123\0\1\u0219\67\0\1\u021a\63\0\1\372\75\0\1\372"+
    "\105\0\1\u021b\67\0\1\u021c\71\0\1\372\70\0\1\372"+
    "\46\0\11\u021d\61\0\1\u021d\1\0\11\u0200\15\0\1\u0201"+
    "\42\0\1\u0202\2\0\11\u021e\63\0\11\u021e\61\0\1\u01ff"+
    "\1\0\11\u021f\4\0\2\263\2\0\31\263\6\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\11\33\1\0"+
    "\3\265\2\33\2\265\5\33\1\u018f\23\33\2\265\4\0"+
    "\1\265\1\0\2\265\3\0\3\265\1\0\1\265\11\267"+
    "\1\0\3\265\2\33\2\265\31\33\2\265\4\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\3\267\6\33"+
    "\1\0\3\265\2\33\2\265\31\33\2\265\4\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\11\33\1\0"+
    "\3\265\2\33\2\265\4\33\1\u0204\24\33\2\265\4\0"+
    "\1\265\1\0\2\265\3\0\3\265\1\0\1\265\11\33"+
    "\1\0\3\265\2\33\2\265\23\33\1\u0220\5\33\2\265"+
    "\4\0\1\265\1\0\2\265\3\0\3\265\1\0\1\265"+
    "\11\33\1\0\3\265\2\33\2\265\23\33\1\u0122\5\33"+
    "\2\265\4\0\1\265\1\0\2\265\3\0\3\265\1\0"+
    "\1\265\11\33\1\0\3\265\2\33\2\265\22\33\1\u0221"+
    "\6\33\2\265\4\0\1\265\1\0\2\265\3\0\3\265"+
    "\1\0\1\265\11\33\1\0\3\265\2\33\2\265\16\33"+
    "\1\u0222\12\33\2\265\4\0\1\265\1\0\2\265\3\0"+
    "\3\265\1\0\1\265\11\33\1\0\3\265\2\33\2\265"+
    "\1\33\1\u011b\27\33\2\265\4\0\1\265\1\0\2\265"+
    "\3\0\3\265\1\0\1\265\11\33\1\0\3\265\2\33"+
    "\2\265\5\33\1\305\23\33\2\265\4\0\1\265\1\0"+
    "\2\265\3\0\3\265\1\0\1\265\11\33\1\0\3\265"+
    "\2\33\2\265\22\33\1\u0223\6\33\2\265\4\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\11\33\1\0"+
    "\3\265\2\33\2\265\5\33\1\u0224\23\33\2\265\2\56"+
    "\2\0\1\56\1\0\2\56\1\0\53\56\1\u0225\11\56"+
    "\2\0\1\56\1\0\2\56\1\0\46\56\1\u0226\16\56"+
    "\2\0\1\56\1\0\2\56\1\0\31\56\1\u0227\33\56"+
    "\2\0\1\56\1\0\2\56\1\0\35\56\1\345\27\56"+
    "\2\0\1\56\1\0\2\56\1\0\52\56\1\u0228\10\56"+
    "\64\0\1\u0229\66\0\1\u022a\56\0\1\u022b\77\0\1\376"+
    "\110\0\1\u022c\26\0\1\u01ff\1\0\11\u022d\15\0\1\u0201"+
    "\43\0\1\u01ff\1\0\11\u022e\4\0\2\263\2\0\31\263"+
    "\20\0\1\u021d\1\0\11\u021f\4\0\2\263\2\0\5\263"+
    "\1\u01c7\23\263\6\0\1\265\1\0\2\265\3\0\3\265"+
    "\1\0\1\265\11\33\1\0\3\265\2\33\2\265\3\33"+
    "\1\u022f\25\33\2\265\4\0\1\265\1\0\2\265\3\0"+
    "\3\265\1\0\1\265\11\33\1\0\3\265\2\33\2\265"+
    "\5\33\1\u0230\23\33\2\265\4\0\1\265\1\0\2\265"+
    "\3\0\3\265\1\0\1\265\11\33\1\0\3\265\2\33"+
    "\2\265\15\33\1\267\13\33\2\265\4\0\1\265\1\0"+
    "\2\265\3\0\3\265\1\0\1\265\11\33\1\0\3\265"+
    "\2\33\2\265\27\33\1\267\1\33\2\265\4\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\11\33\1\0"+
    "\3\265\2\33\2\265\20\33\1\u018f\10\33\2\265\2\56"+
    "\2\0\1\56\1\0\2\56\1\0\33\56\1\u0231\31\56"+
    "\2\0\1\56\1\0\2\56\1\0\45\56\1\341\17\56"+
    "\2\0\1\56\1\0\2\56\1\0\43\56\1\341\21\56"+
    "\2\0\1\56\1\0\2\56\1\0\57\56\1\341\3\56"+
    "\44\0\1\u0232\105\0\1\372\71\0\1\372\107\0\1\372"+
    "\21\0\1\u021d\1\0\11\u022d\15\0\1\u0201\43\0\1\u021d"+
    "\1\0\11\u022e\4\0\2\263\2\0\5\263\1\u01c7\23\263"+
    "\6\0\1\265\1\0\2\265\3\0\3\265\1\0\1\265"+
    "\11\33\1\0\3\265\2\33\2\265\22\33\1\u0233\6\33"+
    "\2\265\4\0\1\265\1\0\2\265\3\0\3\265\1\0"+
    "\1\265\11\33\1\0\3\265\2\33\2\265\3\33\1\u0234"+
    "\25\33\2\265\2\56\2\0\1\56\1\0\2\56\1\0"+
    "\52\56\1\u0235\10\56\63\0\1\u0236\14\0\1\265\1\0"+
    "\2\265\3\0\3\265\1\0\1\265\11\33\1\0\3\265"+
    "\2\33\2\265\16\33\1\305\12\33\2\265\4\0\1\265"+
    "\1\0\2\265\3\0\3\265\1\0\1\265\11\33\1\0"+
    "\3\265\2\33\2\265\1\33\1\u0237\27\33\2\265\2\56"+
    "\2\0\1\56\1\0\2\56\1\0\46\56\1\345\14\56"+
    "\57\0\1\376\20\0\1\265\1\0\2\265\3\0\3\265"+
    "\1\0\1\265\11\33\1\0\3\265\2\33\2\265\13\33"+
    "\1\u0238\15\33\2\265\4\0\1\265\1\0\2\265\3\0"+
    "\3\265\1\0\1\265\11\33\1\0\3\265\2\33\2\265"+
    "\13\33\1\u018f\15\33\2\265";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27720];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\2\11\2\1\2\11\1\1\1\11\34\1\1\11"+
    "\1\1\2\11\15\1\3\11\1\1\1\11\16\1\2\11"+
    "\15\1\2\11\1\1\1\11\15\1\1\11\15\1\1\11"+
    "\1\1\4\11\1\1\1\11\16\1\2\11\1\1\1\11"+
    "\22\1\1\11\1\0\2\1\1\0\106\1\2\0\1\11"+
    "\27\0\1\1\4\0\76\1\6\0\1\1\20\0\1\1"+
    "\1\0\20\1\2\11\55\1\25\0\1\1\2\0\53\1"+
    "\20\0\1\1\2\0\24\1\4\0\1\1\3\0\12\1"+
    "\6\0\3\1\1\0\3\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[568];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();
  StringBuffer stringN = new StringBuffer();
  public static int banderaN = 0;
  public static int bandera = 0;
  public static int bandera2 = 0;
  public static int bandera3 = 0;
  public static ArrayList<Token> tokens = new ArrayList<>();  
  public static ArrayList<Token> errores = new ArrayList<>();  

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Symb.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { stringN.setLength(0);
     stringN.append(yytext());
     yybegin(stateNosibol);
            }
            // fall through
          case 42: break;
          case 2:
            { /* ignore */ ;banderaN =0;
            }
            // fall through
          case 43: break;
          case 3:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
            }
            // fall through
          case 44: break;
          case 4:
            { string.setLength(0); yybegin(STRING); bandera = yycolumn;
            }
            // fall through
          case 45: break;
          case 5:
            { string.setLength(0); yybegin(Chars); bandera = yycolumn;
            }
            // fall through
          case 46: break;
          case 6:
            { return symbol(Symb.mas, yytext());
            }
            // fall through
          case 47: break;
          case 7:
            { return symbol(Symb.numero, yytext());
            }
            // fall through
          case 48: break;
          case 8:
            { stringN.setLength(0);
string.setLength(0);
string.append(yytext());
stringN.append(yytext());
yybegin(filtro);
            }
            // fall through
          case 49: break;
          case 9:
            { string.append( yytext() );
            }
            // fall through
          case 50: break;
          case 10:
            { errores.add(new Token(string.toString(), yyline, bandera, "Error stringASAD"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 51: break;
          case 11:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal string"));
            }
            // fall through
          case 52: break;
          case 12:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error string"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 53: break;
          case 13:
            { string.append(yytext());
    yybegin(hexaStateError);
            }
            // fall through
          case 54: break;
          case 14:
            { yybegin(YYINITIAL);
    string.append( yytext() ); 
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal hexadecimal/Palabra Reservada"));
            }
            // fall through
          case 55: break;
          case 15:
            { string.append(yytext());
    errores.add(new Token(string.toString(), yyline, yycolumn, "Error: comillas de cierre incorrectas"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 56: break;
          case 16:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); 
    errores.add(new Token("Comillas", yyline, yycolumn, "Error: hexadecimal sin cierre"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 57: break;
          case 17:
            { string.append(yytext());
    yybegin(hexaStateCError);
            }
            // fall through
          case 58: break;
          case 18:
            { string.append( yytext() ); 
    errores.add(new Token(string.toString(), yyline, yycolumn, "Error: comillas de cierre incorrectas"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 59: break;
          case 19:
            { string.append(yytext());
            }
            // fall through
          case 60: break;
          case 20:
            { yybegin(YYINITIAL); errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
            }
            // fall through
          case 61: break;
          case 21:
            { yybegin(YYINITIAL);
    string.append(yytext());
    errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
            }
            // fall through
          case 62: break;
          case 22:
            { System.out.println(yyline);
  System.out.println(yycolumn); 
  // throw new Error("Illegal character <"+ yytext()+">");
            }
            // fall through
          case 63: break;
          case 23:
            { string.append( yytext() );
    errores.add(new Token(string.toString(), yyline, bandera, "Error char"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 64: break;
          case 24:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error char"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 65: break;
          case 25:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal char"));
            }
            // fall through
          case 66: break;
          case 26:
            { stringN.append(yytext());yybegin(stateNosibol);
            }
            // fall through
          case 67: break;
          case 27:
            { errores.add(new Token(stringN.toString(), yyline, yycolumn, "Error: identificador"));
        yybegin(YYINITIAL);
            }
            // fall through
          case 68: break;
          case 28:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));     
        errores.add(new Token(stringN.toString(), yyline, yycolumn, "Error: identificador"));
        yybegin(YYINITIAL);
            }
            // fall through
          case 69: break;
          case 29:
            { stringN.append(yytext());
    yybegin(stateNosibol);
            }
            // fall through
          case 70: break;
          case 30:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Identificador"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 71: break;
          case 31:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Identificador"));
    tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 72: break;
          case 32:
            { string.append(yytext()) ;
              errores.add(new Token(string.toString(), yyline, yycolumn, "Error Identificador"));
              yybegin(YYINITIAL);
            }
            // fall through
          case 73: break;
          case 33:
            { string.setLength(0);
  string.append(yytext());
  errores.add(new Token(string.toString(), yyline, yycolumn, "Error Decimal"));//WHY ERROR
  yybegin(YYINITIAL);
            }
            // fall through
          case 74: break;
          case 34:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Literal: Numero"));
            }
            // fall through
          case 75: break;
          case 35:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: Numero"));
            }
            // fall through
          case 76: break;
          case 36:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error Identificador"));
            }
            // fall through
          case 77: break;
          case 37:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));
            }
            // fall through
          case 78: break;
          case 38:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Units"));
            }
            // fall through
          case 79: break;
          case 39:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Transac"));
            }
            // fall through
          case 80: break;
          case 40:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaState);
            }
            // fall through
          case 81: break;
          case 41:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaStateC);
            }
            // fall through
          case 82: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
