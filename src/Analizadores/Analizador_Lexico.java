// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: A_Lexico.jflex

/* JFlex example: partial Java language lexer specification */
package Analizadores;
import java_cup.runtime.*;
import java.util.ArrayList;
/**
    * This class is a simple example lexer.
    */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int hexaState = 4;
  public static final int hexaStateC = 6;
  public static final int hexaStateError = 8;
  public static final int hexaStateCError = 10;
  public static final int numberState = 12;
  public static final int NaturalNumbers = 14;
  public static final int Chars = 16;
  public static final int Identificadorcillo = 18;
  public static final int stateNosibol = 20;
  public static final int filtro = 22;
  public static final int otraMas = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u1f00"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00\1\u4f00"+
    "\1\u5000\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00\4\u0100\1\u5400"+
    "\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600\1\u5700\2\u1f00"+
    "\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00\45\u1f00\1\u0100"+
    "\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00\1\u6000\1\u1f00"+
    "\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500\5\u1f00\1\u6600"+
    "\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\2\u1f00\1\u6b00\1\u1f00"+
    "\1\u6c00\21\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00\1\u6f00\25\u0100"+
    "\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200\u0b05\u1f00\1\u7300"+
    "\1\u7400\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\1\1\5\1\6\1\3\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\32\1\10\1\34\1\35\1\36\1\37\1\10"+
    "\1\3\4\40\1\41\1\40\24\42\1\13\1\3\1\43"+
    "\1\10\1\7\1\3\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\42\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\42\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\13\1\74\1\43"+
    "\1\75\41\0\2\3\4\7\4\3\1\7\2\3\1\0"+
    "\7\3\1\7\4\3\1\7\5\3\27\7\1\3\37\7"+
    "\1\3\u01ca\7\4\3\14\7\16\3\5\7\7\3\1\7"+
    "\1\3\1\7\21\3\160\0\5\7\1\3\2\7\2\3"+
    "\4\7\1\3\1\7\6\3\1\7\1\3\3\7\1\3"+
    "\1\7\1\3\24\7\1\3\123\7\1\3\213\7\1\3"+
    "\5\0\2\3\246\7\1\3\46\7\2\3\1\7\6\3"+
    "\51\7\6\3\1\7\1\3\55\0\1\3\1\0\1\3"+
    "\2\0\1\3\2\0\1\3\1\0\10\3\33\7\4\3"+
    "\4\7\15\3\6\0\5\3\1\7\4\3\13\0\1\3"+
    "\1\0\3\3\53\7\37\0\4\3\2\7\1\0\143\7"+
    "\1\3\1\7\10\0\1\3\6\0\2\7\2\0\1\3"+
    "\4\0\2\7\12\0\3\7\2\3\1\7\17\3\1\0"+
    "\1\7\1\0\36\7\33\0\2\3\131\7\13\0\1\7"+
    "\16\3\12\0\41\7\11\0\2\7\4\3\1\7\2\3"+
    "\1\0\30\7\4\0\1\7\11\0\1\7\3\0\1\7"+
    "\5\0\22\3\31\7\3\0\4\3\13\7\65\3\25\7"+
    "\1\3\10\7\25\3\61\0\66\7\3\0\1\7\22\0"+
    "\1\7\7\0\12\7\2\0\2\3\12\0\1\3\20\7"+
    "\3\0\1\3\10\7\2\3\2\7\2\3\26\7\1\3"+
    "\7\7\1\3\1\7\3\3\4\7\2\3\1\0\1\7"+
    "\7\0\2\3\2\0\2\3\3\0\1\7\10\3\1\0"+
    "\4\3\2\7\1\3\3\7\2\0\2\3\12\0\4\7"+
    "\7\3\2\7\1\3\1\0\2\3\3\0\1\3\6\7"+
    "\4\3\2\7\2\3\26\7\1\3\7\7\1\3\2\7"+
    "\1\3\2\7\1\3\2\7\2\3\1\0\1\3\5\0"+
    "\4\3\2\0\2\3\3\0\3\3\1\0\7\3\4\7"+
    "\1\3\1\7\7\3\14\0\3\7\1\0\13\3\3\0"+
    "\1\3\11\7\1\3\3\7\1\3\26\7\1\3\7\7"+
    "\1\3\2\7\1\3\5\7\2\3\1\0\1\7\10\0"+
    "\1\3\3\0\1\3\3\0\2\3\1\7\17\3\2\7"+
    "\2\0\2\3\12\0\1\3\1\7\7\3\1\7\6\0"+
    "\1\3\3\0\1\3\10\7\2\3\2\7\2\3\26\7"+
    "\1\3\7\7\1\3\2\7\1\3\5\7\2\3\1\0"+
    "\1\7\7\0\2\3\2\0\2\3\3\0\10\3\2\0"+
    "\4\3\2\7\1\3\3\7\2\0\2\3\12\0\1\3"+
    "\1\7\20\3\1\0\1\7\1\3\6\7\3\3\3\7"+
    "\1\3\4\7\3\3\2\7\1\3\1\7\1\3\2\7"+
    "\3\3\2\7\3\3\3\7\3\3\14\7\4\3\5\0"+
    "\3\3\3\0\1\3\4\0\2\3\1\7\6\3\1\0"+
    "\16\3\12\0\11\3\1\7\6\3\5\0\10\7\1\3"+
    "\3\7\1\3\27\7\1\3\20\7\3\3\1\7\7\0"+
    "\1\3\3\0\1\3\4\0\7\3\2\0\1\3\3\7"+
    "\5\3\2\7\2\0\2\3\12\0\20\3\1\7\3\0"+
    "\1\3\10\7\1\3\3\7\1\3\27\7\1\3\12\7"+
    "\1\3\5\7\2\3\1\0\1\7\7\0\1\3\3\0"+
    "\1\3\4\0\7\3\2\0\7\3\1\7\1\3\2\7"+
    "\2\0\2\3\12\0\1\3\2\7\15\3\4\0\1\3"+
    "\10\7\1\3\3\7\1\3\51\7\2\0\1\7\7\0"+
    "\1\3\3\0\1\3\4\0\1\7\5\3\3\7\1\0"+
    "\7\3\3\7\2\0\2\3\12\0\12\3\6\7\2\3"+
    "\2\0\1\3\22\7\3\3\30\7\1\3\11\7\1\3"+
    "\1\7\2\3\7\7\3\3\1\0\4\3\6\0\1\3"+
    "\1\0\1\3\10\0\6\3\12\0\2\3\2\0\15\3"+
    "\60\7\1\0\2\7\7\0\4\3\10\7\10\0\1\3"+
    "\12\0\47\3\2\7\1\3\1\7\1\3\5\7\1\3"+
    "\30\7\1\3\1\7\1\3\12\7\1\0\2\7\11\0"+
    "\1\7\2\3\5\7\1\3\1\7\1\3\6\0\2\3"+
    "\12\0\2\3\4\7\40\3\1\7\27\3\2\0\6\3"+
    "\12\0\13\3\1\0\1\3\1\0\1\3\1\0\4\3"+
    "\2\0\10\7\1\3\44\7\4\3\24\0\1\3\2\0"+
    "\5\7\13\0\1\3\44\0\11\3\1\0\71\3\53\7"+
    "\24\0\1\7\12\0\6\3\6\7\4\0\4\7\3\0"+
    "\1\7\3\0\2\7\7\0\3\7\4\0\15\7\14\0"+
    "\1\7\17\0\2\3\46\7\1\3\1\7\5\3\1\7"+
    "\2\3\53\7\1\3\115\7\1\3\4\7\2\3\7\7"+
    "\1\3\1\7\1\3\4\7\2\3\51\7\1\3\4\7"+
    "\2\3\41\7\1\3\4\7\2\3\7\7\1\3\1\7"+
    "\1\3\4\7\2\3\17\7\1\3\71\7\1\3\4\7"+
    "\2\3\103\7\2\3\3\0\40\3\20\7\20\3\126\7"+
    "\2\3\6\7\3\3\u016c\7\2\3\21\7\1\3\32\7"+
    "\5\3\113\7\3\3\13\7\7\3\15\7\1\3\4\7"+
    "\3\0\13\3\22\7\3\0\13\3\22\7\2\0\14\3"+
    "\15\7\1\3\3\7\1\3\2\0\14\3\64\7\40\0"+
    "\3\3\1\7\3\3\2\7\1\0\2\3\12\0\41\3"+
    "\4\0\1\3\12\0\6\3\131\7\7\3\5\7\2\0"+
    "\42\7\1\0\1\7\5\3\106\7\12\3\37\7\1\3"+
    "\14\0\4\3\14\0\12\3\12\0\36\7\2\3\5\7"+
    "\13\3\54\7\4\3\32\7\6\3\12\0\46\3\27\7"+
    "\5\0\4\3\65\7\12\0\1\3\35\0\2\3\13\0"+
    "\6\3\12\0\15\3\1\7\10\3\16\0\102\3\5\0"+
    "\57\7\21\0\7\7\4\3\12\0\21\3\11\0\14\3"+
    "\3\0\36\7\15\0\2\7\12\0\54\7\16\0\14\3"+
    "\44\7\24\0\10\3\12\0\3\3\3\7\12\0\44\7"+
    "\2\3\11\7\7\3\53\7\2\3\3\7\20\3\3\0"+
    "\1\3\25\0\4\7\1\0\6\7\1\0\2\7\3\0"+
    "\1\7\5\3\300\7\72\0\1\3\5\0\26\7\2\3"+
    "\6\7\2\3\46\7\2\3\6\7\2\3\10\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\37\7\2\3"+
    "\65\7\1\3\7\7\1\3\1\7\3\3\3\7\1\3"+
    "\7\7\3\3\4\7\2\3\6\7\4\3\15\7\5\3"+
    "\3\7\1\3\7\7\16\3\5\0\32\3\5\0\20\3"+
    "\2\7\23\3\1\7\13\3\5\0\1\3\12\0\1\3"+
    "\1\7\15\3\1\7\20\3\15\7\3\3\40\7\20\3"+
    "\15\0\4\3\1\0\3\3\14\0\21\3\1\7\4\3"+
    "\1\7\2\3\12\7\1\3\1\7\3\3\5\7\6\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\4\7\1\3"+
    "\13\7\2\3\4\7\5\3\5\7\4\3\1\7\21\3"+
    "\51\7\u0177\3\57\7\1\3\57\7\1\3\205\7\6\3"+
    "\4\7\3\0\2\7\14\3\46\7\1\3\1\7\5\3"+
    "\1\7\2\3\70\7\7\3\1\7\17\3\1\0\27\7"+
    "\11\3\7\7\1\3\7\7\1\3\7\7\1\3\7\7"+
    "\1\3\7\7\1\3\7\7\1\3\7\7\1\3\7\7"+
    "\1\3\40\0\57\3\1\7\325\3\3\7\31\3\11\7"+
    "\6\0\1\3\5\7\2\3\5\7\4\3\126\7\2\3"+
    "\2\0\2\3\3\7\1\3\132\7\1\3\4\7\5\3"+
    "\53\7\1\3\136\7\21\3\33\7\65\3\306\7\112\3"+
    "\360\7\20\3\215\7\103\3\56\7\2\3\15\7\3\3"+
    "\20\7\12\0\2\7\24\3\57\7\1\0\4\3\12\0"+
    "\1\3\37\7\2\0\120\7\2\0\45\3\11\7\2\3"+
    "\147\7\2\3\65\7\2\3\5\7\60\3\13\7\1\0"+
    "\3\7\1\0\4\7\1\0\27\7\5\0\20\3\1\7"+
    "\7\3\64\7\14\3\2\0\62\7\22\0\12\3\12\0"+
    "\6\3\22\0\6\7\3\3\1\7\1\3\2\7\13\0"+
    "\34\7\10\0\2\3\27\7\15\0\14\3\35\7\3\3"+
    "\4\0\57\7\16\0\16\3\1\7\12\0\6\3\5\7"+
    "\1\0\12\7\12\0\5\7\1\3\51\7\16\0\11\3"+
    "\3\7\1\0\10\7\2\0\2\3\12\0\6\3\27\7"+
    "\3\3\1\7\3\0\62\7\1\0\1\7\3\0\2\7"+
    "\2\0\5\7\2\0\1\7\1\0\1\7\30\3\3\7"+
    "\2\3\13\7\5\0\2\3\3\7\2\0\12\3\6\7"+
    "\2\3\6\7\2\3\6\7\11\3\7\7\1\3\7\7"+
    "\1\3\53\7\1\3\14\7\10\3\163\7\10\0\1\3"+
    "\2\0\2\3\12\0\6\3\244\7\14\3\27\7\4\3"+
    "\61\7\4\3\156\7\2\3\152\7\46\3\7\7\14\3"+
    "\5\7\5\3\1\7\1\0\12\7\1\3\15\7\1\3"+
    "\5\7\1\3\1\7\1\3\2\7\1\3\2\7\1\3"+
    "\154\7\41\3\153\7\22\3\100\7\2\3\66\7\50\3"+
    "\15\7\3\3\20\0\20\3\20\0\3\3\2\7\30\3"+
    "\3\7\31\3\1\7\6\3\5\7\1\3\207\7\2\3"+
    "\1\0\4\3\1\7\13\3\12\0\7\3\32\7\4\3"+
    "\1\7\1\3\32\7\13\3\131\7\3\3\6\7\2\3"+
    "\6\7\2\3\6\7\2\3\3\7\3\3\2\7\3\3"+
    "\2\7\22\3\3\0\4\3\14\7\1\3\32\7\1\3"+
    "\23\7\1\3\2\7\1\3\17\7\2\3\16\7\42\3"+
    "\173\7\105\3\65\7\210\3\1\0\202\3\35\7\3\3"+
    "\61\7\17\3\1\0\37\3\40\7\15\3\36\7\5\3"+
    "\46\7\5\0\5\3\36\7\2\3\44\7\4\3\10\7"+
    "\1\3\5\7\52\3\236\7\2\3\12\0\6\3\44\7"+
    "\4\3\44\7\4\3\50\7\10\3\64\7\234\3\67\7"+
    "\11\3\26\7\12\3\10\7\230\3\6\7\2\3\1\7"+
    "\1\3\54\7\1\3\2\7\3\3\1\7\2\3\27\7"+
    "\12\3\27\7\11\3\37\7\101\3\23\7\1\3\2\7"+
    "\12\3\26\7\12\3\32\7\106\3\70\7\6\3\2\7"+
    "\100\3\1\7\3\0\1\3\2\0\5\3\4\0\4\7"+
    "\1\3\3\7\1\3\35\7\2\3\3\0\4\3\1\0"+
    "\40\3\35\7\3\3\35\7\43\3\10\7\1\3\34\7"+
    "\2\0\31\3\66\7\12\3\26\7\12\3\23\7\15\3"+
    "\22\7\156\3\111\7\67\3\63\7\15\3\63\7\15\3"+
    "\44\7\4\0\10\3\12\0\306\3\35\7\12\3\1\7"+
    "\10\3\26\7\13\0\217\3\27\7\11\3\3\0\65\7"+
    "\17\0\37\3\12\0\17\3\4\0\55\7\13\0\2\3"+
    "\1\0\17\3\1\0\2\3\31\7\7\3\12\0\6\3"+
    "\3\0\44\7\16\0\1\3\12\0\4\3\1\7\2\0"+
    "\11\3\43\7\1\0\2\3\1\7\11\3\3\0\60\7"+
    "\16\0\4\7\4\3\4\0\3\3\12\0\1\7\1\3"+
    "\1\7\43\3\22\7\1\3\31\7\14\0\6\3\1\0"+
    "\101\3\7\7\1\3\1\7\1\3\4\7\1\3\17\7"+
    "\1\3\12\7\7\3\57\7\14\0\5\3\12\0\6\3"+
    "\4\0\1\3\10\7\2\3\2\7\2\3\26\7\1\3"+
    "\7\7\1\3\2\7\1\3\5\7\1\3\2\0\1\7"+
    "\7\0\2\3\2\0\2\3\3\0\2\3\1\7\6\3"+
    "\1\0\5\3\5\7\2\0\2\3\7\0\3\3\5\0"+
    "\213\3\65\7\22\0\4\7\5\3\12\0\4\3\1\0"+
    "\1\7\40\3\60\7\24\0\2\7\1\3\1\7\10\3"+
    "\12\0\246\3\57\7\7\0\2\3\11\0\27\3\4\7"+
    "\2\0\42\3\60\7\21\0\3\3\1\7\13\3\12\0"+
    "\46\3\53\7\15\0\1\7\7\3\12\0\66\3\33\7"+
    "\2\3\17\0\4\3\12\0\306\3\54\7\17\0\145\3"+
    "\100\7\12\0\25\3\1\7\240\3\10\7\2\3\47\7"+
    "\7\0\2\3\7\0\1\7\1\3\1\7\1\0\33\3"+
    "\1\7\12\0\50\7\7\0\1\7\4\0\10\3\1\0"+
    "\10\3\1\7\13\0\56\7\20\0\3\3\1\7\42\3"+
    "\71\7\7\3\11\7\1\3\45\7\10\0\1\3\10\0"+
    "\1\7\17\3\12\0\30\3\36\7\2\3\26\0\1\3"+
    "\16\0\111\3\7\7\1\3\2\7\1\3\46\7\6\0"+
    "\3\3\1\0\1\3\2\0\1\3\7\0\1\7\1\0"+
    "\10\3\12\0\6\3\6\7\1\3\2\7\1\3\40\7"+
    "\5\0\1\3\2\0\1\3\5\0\1\7\7\3\12\0"+
    "\u0136\3\23\7\4\0\346\3\4\7\37\3\232\7\146\3"+
    "\157\7\21\3\304\7\274\3\57\7\1\3\11\0\307\3"+
    "\107\7\271\3\71\7\7\3\37\7\1\3\12\0\146\3"+
    "\36\7\2\3\5\0\13\3\60\7\7\0\11\3\4\7"+
    "\14\3\12\0\11\3\25\7\5\3\23\7\260\3\100\7"+
    "\200\3\113\7\4\3\1\0\1\7\67\0\7\3\4\0"+
    "\15\7\100\3\2\7\1\3\1\7\34\3\370\7\10\3"+
    "\363\7\15\3\37\7\61\3\3\7\21\3\4\7\10\3"+
    "\u018c\7\4\3\153\7\5\3\15\7\3\3\11\7\7\3"+
    "\12\7\3\3\2\0\1\3\4\0\301\3\5\0\3\3"+
    "\26\0\2\3\7\0\36\3\4\0\224\3\3\0\273\3"+
    "\125\7\1\3\107\7\1\3\2\7\2\3\1\7\2\3"+
    "\2\7\2\3\4\7\1\3\14\7\1\3\1\7\1\3"+
    "\7\7\1\3\101\7\1\3\4\7\2\3\10\7\1\3"+
    "\7\7\1\3\34\7\1\3\4\7\1\3\5\7\1\3"+
    "\1\7\3\3\7\7\1\3\u0154\7\2\3\31\7\1\3"+
    "\31\7\1\3\37\7\1\3\31\7\1\3\37\7\1\3"+
    "\31\7\1\3\37\7\1\3\31\7\1\3\37\7\1\3"+
    "\31\7\1\3\10\7\2\3\151\0\4\3\62\0\10\3"+
    "\1\0\16\3\1\0\26\3\5\0\1\3\17\0\120\3"+
    "\7\0\1\3\21\0\2\3\7\0\1\3\2\0\1\3"+
    "\5\0\325\3\55\7\3\3\7\0\7\7\2\3\12\0"+
    "\4\3\1\7\u0171\3\54\7\16\0\5\3\306\7\13\3"+
    "\7\0\51\3\104\7\7\0\1\7\4\3\12\0\u0156\3"+
    "\1\7\117\3\4\7\1\3\33\7\1\3\2\7\1\3"+
    "\1\7\2\3\1\7\1\3\12\7\1\3\4\7\1\3"+
    "\1\7\1\3\1\7\6\3\1\7\4\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\3\7\1\3\2\7\1\3"+
    "\1\7\2\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\2\7\1\3\1\7\2\3"+
    "\4\7\1\3\7\7\1\3\4\7\1\3\4\7\1\3"+
    "\1\7\1\3\12\7\1\3\21\7\5\3\3\7\1\3"+
    "\5\7\1\3\21\7\104\3\327\7\51\3\65\7\13\3"+
    "\336\7\2\3\u0182\7\16\3\u0131\7\37\3\36\7\343\3"+
    "\1\0\36\3\140\0\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29952];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\1\1\2\2\1\3\1\4\1\5\2\3\1\6"+
    "\6\3\2\7\2\3\21\5\1\3\1\10\2\11\1\12"+
    "\1\13\15\10\1\14\2\15\1\16\1\17\1\10\1\20"+
    "\1\10\5\21\11\14\12\22\1\23\2\24\1\25\15\23"+
    "\2\26\3\27\1\30\1\27\1\23\1\31\2\27\3\32"+
    "\1\33\12\32\1\27\1\34\2\35\4\36\1\37\2\36"+
    "\15\34\1\36\2\40\1\41\1\42\2\43\1\44\2\45"+
    "\1\46\16\44\1\47\1\50\6\51\15\50\1\51\1\52"+
    "\1\53\1\54\1\55\16\56\1\57\11\0\2\60\1\0"+
    "\1\2\1\0\1\60\1\5\1\61\47\5\2\10\1\61"+
    "\26\10\2\0\1\61\26\0\2\56\1\61\26\56\1\60"+
    "\2\0\16\5\1\61\2\5\1\61\23\5\1\62\1\5"+
    "\6\10\1\61\16\10\6\0\1\61\16\0\6\56\1\61"+
    "\16\56\1\0\1\2\3\5\1\61\1\63\6\5\1\64"+
    "\1\65\17\5\1\63\6\5\1\61\25\10\1\61\25\0"+
    "\1\61\25\56\1\61\2\5\1\61\26\5\17\10\17\0"+
    "\17\56\1\5\2\61\7\5\1\61\2\5\4\10\1\61"+
    "\1\10\4\0\1\61\1\0\4\56\1\61\1\56\5\5"+
    "\4\10\4\0\4\56\2\5\1\10\1\0\1\56\2\5"+
    "\1\10\1\0\1\56\2\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[702];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0326\0\u0364"+
    "\0\u03a2\0\u0326\0\u03e0\0\u0326\0\u041e\0\u0326\0\u045c\0\u049a"+
    "\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a"+
    "\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a"+
    "\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a"+
    "\0\u0aa8\0\u0ae6\0\u0b24\0\u0326\0\u0b62\0\u0326\0\u0326\0\u0ba0"+
    "\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90"+
    "\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0326\0\u0326\0\u0ec6\0\u0326"+
    "\0\u0326\0\u0f04\0\u0326\0\u0f42\0\u0326\0\u0f80\0\u0fbe\0\u0ffc"+
    "\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec"+
    "\0\u122a\0\u1268\0\u0326\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170"+
    "\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u0326\0\u0326\0\u12a6\0\u0326"+
    "\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132"+
    "\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u0326\0\u12e4\0\u1322"+
    "\0\u0326\0\u1360\0\u0326\0\u139e\0\u13dc\0\u0326\0\u141a\0\u1458"+
    "\0\u0326\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4"+
    "\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u1496\0\u0326"+
    "\0\u0326\0\u14d4\0\u1512\0\u0326\0\u1550\0\u158e\0\u1512\0\u15cc"+
    "\0\u160a\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4"+
    "\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u1648\0\u0326"+
    "\0\u1686\0\u0326\0\u0326\0\u0326\0\u16c4\0\u0326\0\u0326\0\u1702"+
    "\0\u0326\0\u1740\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6"+
    "\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u0326"+
    "\0\u0326\0\u177e\0\u0326\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u0f80"+
    "\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170"+
    "\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u18b4\0\u0326\0\u0326\0\u0326"+
    "\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4"+
    "\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94"+
    "\0\u045c\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u0554\0\u05d0\0\u1dca"+
    "\0\u1e08\0\u1e46\0\u1d4e\0\u1e84\0\u1ec2\0\u1f00\0\u05d0\0\u1f3e"+
    "\0\u03e0\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0"+
    "\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0"+
    "\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0"+
    "\0\u250e\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682\0\u26c0"+
    "\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u28b0"+
    "\0\u28ee\0\u292c\0\u0b24\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62"+
    "\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u2c52"+
    "\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\u2e42"+
    "\0\u2e80\0\u2ebe\0\u2efc\0\u0326\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4"+
    "\0\u3032\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u31a6\0\u31e4"+
    "\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a\0\u3358\0\u3396\0\u33d4"+
    "\0\u3412\0\u3450\0\u348e\0\u34cc\0\u1930\0\u350a\0\u3548\0\u3586"+
    "\0\u35c4\0\u3602\0\u3640\0\u367e\0\u36bc\0\u36fa\0\u3738\0\u3776"+
    "\0\u37b4\0\u37f2\0\u3830\0\u386e\0\u38ac\0\u38ea\0\u3928\0\u3966"+
    "\0\u39a4\0\u39e2\0\u3a20\0\u3a5e\0\u3a9c\0\u3ada\0\u3b18\0\u3b56"+
    "\0\u3b94\0\u3bd2\0\u3c10\0\u3c4e\0\u3c8c\0\u3cca\0\u3d08\0\u3d46"+
    "\0\u3d84\0\u3dc2\0\u3e00\0\u3e3e\0\u3e7c\0\u3eba\0\u3ef8\0\u3f36"+
    "\0\u3f74\0\u3fb2\0\u3ff0\0\u402e\0\u406c\0\u40aa\0\u40e8\0\u4126"+
    "\0\u4164\0\u41a2\0\u41e0\0\u421e\0\u425c\0\u429a\0\u42d8\0\u4316"+
    "\0\u4354\0\u4392\0\u43d0\0\u03e0\0\u440e\0\u444c\0\u448a\0\u44c8"+
    "\0\u4506\0\u4544\0\u4582\0\u45c0\0\u45fe\0\u463c\0\u467a\0\u46b8"+
    "\0\u46f6\0\u4734\0\u4772\0\u47b0\0\u47ee\0\u482c\0\u486a\0\u48a8"+
    "\0\u48e6\0\u4924\0\u4962\0\u49a0\0\u49de\0\u4a1c\0\u4a5a\0\u4a98"+
    "\0\u4ad6\0\u4b14\0\u4b52\0\u4b90\0\u4bce\0\u4c0c\0\u4c4a\0\u4c88"+
    "\0\u4cc6\0\u4d04\0\u4d42\0\u4d80\0\u4dbe\0\u4dfc\0\u4e3a\0\u4e78"+
    "\0\u4eb6\0\u4ef4\0\u4f32\0\u4f70\0\u4fae\0\u4fec\0\u502a\0\u5068"+
    "\0\u50a6\0\u50e4\0\u5122\0\u5160\0\u519e\0\u51dc\0\u521a\0\u5258"+
    "\0\u5296\0\u52d4\0\u5312\0\u5350\0\u538e\0\u3a9c\0\u53cc\0\u540a"+
    "\0\u5448\0\u5486\0\u54c4\0\u5502\0\u5540\0\u557e\0\u55bc\0\u55fa"+
    "\0\u5638\0\u0326\0\u0326\0\u5676\0\u56b4\0\u56f2\0\u5730\0\u576e"+
    "\0\u57ac\0\u57ea\0\u5828\0\u5866\0\u58a4\0\u58e2\0\u5920\0\u595e"+
    "\0\u599c\0\u59da\0\u03e0\0\u5a18\0\u5a56\0\u5a94\0\u5ad2\0\u5b10"+
    "\0\u5b4e\0\u5b8c\0\u5bca\0\u5c08\0\u5c46\0\u5c84\0\u5cc2\0\u5d00"+
    "\0\u5d3e\0\u5d7c\0\u5dba\0\u5df8\0\u5e36\0\u5e74\0\u5eb2\0\u5ef0"+
    "\0\u5f2e\0\u5f6c\0\u5faa\0\u5fe8\0\u6026\0\u6064\0\u60a2\0\u60e0"+
    "\0\u611e\0\u615c\0\u619a\0\u61d8\0\u6216\0\u6254\0\u6292\0\u62d0"+
    "\0\u630e\0\u634c\0\u638a\0\u63c8\0\u6406\0\u6444\0\u6482\0\u64c0"+
    "\0\u64fe\0\u653c\0\u657a\0\u65b8\0\u65f6\0\u6634\0\u6672\0\u66b0"+
    "\0\u66ee\0\u672c\0\u676a\0\u67a8\0\u67e6\0\u6824\0\u6862\0\u68a0"+
    "\0\u68de\0\u691c\0\u695a\0\u6998\0\u69d6\0\u6a14\0\u6a52\0\u6a90"+
    "\0\u6ace\0\u6b0c\0\u6b4a\0\u6b88\0\u6bc6\0\u6c04\0\u6c42\0\u6c80"+
    "\0\u6cbe\0\u6cfc\0\u6d3a\0\u6d78\0\u6db6\0\u6df4\0\u6e32\0\u6e70"+
    "\0\u6eae\0\u6eec\0\u6f2a\0\u6f68\0\u6fa6\0\u6fe4\0\u7022\0\u7060"+
    "\0\u709e\0\u70dc\0\u711a\0\u7158\0\u7196\0\u71d4\0\u7212\0\u7250"+
    "\0\u728e\0\u72cc\0\u730a\0\u7348\0\u7386\0\u73c4\0\u7402\0\u7440"+
    "\0\u747e\0\u74bc\0\u74fa\0\u7538\0\u7576\0\u75b4\0\u75f2\0\u7630"+
    "\0\u766e\0\u76ac\0\u76ea\0\u7728\0\u7766\0\u77a4\0\u77e2\0\u7820"+
    "\0\u785e\0\u789c\0\u78da\0\u7918\0\u7956\0\u7994\0\u79d2\0\u7a10"+
    "\0\u7a4e\0\u7a8c\0\u7aca\0\u7b08\0\u7b46\0\u7b84\0\u7bc2\0\u7c00"+
    "\0\u7c3e\0\u7c7c\0\u7cba\0\u7cf8\0\u7d36\0\u7d74\0\u7db2\0\u7df0"+
    "\0\u7e2e\0\u7e6c\0\u7eaa\0\u7ee8\0\u429a\0\u7f26\0\u7f64\0\u7fa2"+
    "\0\u7fe0\0\u801e\0\u805c\0\u482c\0\u809a\0\u80d8\0\u8116\0\u8154"+
    "\0\u8192\0\u4d42\0\u81d0\0\u820e\0\u824c\0\u828a\0\u82c8\0\u5258"+
    "\0\u8306\0\u8344\0\u8382\0\u83c0\0\u83fe\0\u843c\0\u847a\0\u84b8"+
    "\0\u84f6\0\u8534\0\u8572\0\u85b0\0\u85ee\0\u862c\0\u866a\0\u86a8"+
    "\0\u86e6\0\u8724\0\u8762\0\u87a0\0\u87de\0\u881c\0\u885a\0\u8898"+
    "\0\u88d6\0\u8914\0\u8952\0\u8990\0\u89ce\0\u8a0c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[702];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\2\17\1\16\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\24\1\27\1\30\1\31\1\24\1\32"+
    "\1\33\1\34\1\35\10\36\1\24\1\37\1\21\1\40"+
    "\3\23\1\27\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\23\1\47\1\50\2\23\1\51\2\23\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\23\1\61\1\23"+
    "\1\62\1\27\2\63\1\64\1\63\1\65\1\63\1\66"+
    "\3\63\1\67\33\63\1\70\1\71\1\72\1\73\2\63"+
    "\1\74\2\63\1\75\2\63\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\5\63\1\105\2\106\1\105\1\107"+
    "\1\105\1\110\3\105\1\111\10\105\11\112\1\113\3\105"+
    "\2\114\2\105\2\115\1\116\1\117\1\120\1\121\2\105"+
    "\1\122\2\105\1\123\2\105\1\124\1\125\1\126\1\127"+
    "\1\130\1\131\1\132\5\105\1\133\2\106\1\133\1\107"+
    "\1\133\1\111\3\133\1\110\10\133\11\112\1\113\3\133"+
    "\2\114\2\133\2\115\1\116\1\117\1\120\1\121\2\133"+
    "\1\134\2\133\1\135\2\133\1\136\1\137\1\140\1\141"+
    "\1\142\1\143\1\144\5\133\1\145\2\146\1\145\1\147"+
    "\1\145\1\150\25\145\1\150\11\145\1\151\1\152\1\153"+
    "\1\154\2\145\1\155\2\145\1\156\2\145\1\157\1\160"+
    "\1\161\1\162\1\163\1\164\1\165\6\145\2\146\1\145"+
    "\1\147\5\145\1\150\21\145\1\150\11\145\1\151\1\152"+
    "\1\153\1\154\2\145\1\155\2\145\1\156\2\145\1\157"+
    "\1\160\1\161\1\162\1\163\1\164\1\165\5\145\1\115"+
    "\2\166\1\115\1\167\1\170\2\115\1\171\1\172\1\115"+
    "\1\171\1\173\1\174\1\170\1\166\1\170\1\145\1\170"+
    "\11\175\1\176\1\177\1\170\1\200\1\201\1\115\1\201"+
    "\1\171\2\201\1\202\1\203\1\204\1\205\2\201\1\206"+
    "\2\201\1\207\2\201\1\210\1\211\1\212\1\213\1\214"+
    "\1\215\1\216\3\201\1\217\1\171\1\220\2\221\1\220"+
    "\1\222\1\223\2\220\1\224\1\225\1\220\2\224\1\226"+
    "\1\223\1\224\1\227\1\220\1\223\11\175\1\224\1\230"+
    "\1\223\1\231\3\220\1\224\2\220\1\232\1\233\1\234"+
    "\1\235\2\220\1\236\2\220\1\237\2\220\1\240\1\241"+
    "\1\242\1\243\1\244\1\245\1\246\3\220\1\247\1\224"+
    "\2\63\1\250\1\63\1\251\1\63\1\252\3\63\1\253"+
    "\33\63\1\70\1\71\1\72\1\73\2\63\1\74\2\63"+
    "\1\75\2\63\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\5\63\1\145\2\254\1\145\1\255\6\145\2\254"+
    "\17\145\1\254\6\145\1\254\2\145\1\151\1\152\1\153"+
    "\1\154\2\145\1\155\2\145\1\156\2\145\1\157\1\160"+
    "\1\161\1\162\1\163\1\164\1\165\5\145\1\256\2\257"+
    "\1\256\1\260\6\256\2\261\5\256\1\262\11\256\1\261"+
    "\6\256\1\261\2\256\1\263\1\264\1\265\1\266\2\256"+
    "\1\267\2\256\1\270\2\256\1\271\1\272\1\273\1\274"+
    "\1\275\1\276\1\277\5\256\1\300\2\301\1\300\1\301"+
    "\1\302\2\300\1\303\1\304\1\300\2\303\1\305\1\302"+
    "\1\303\1\302\1\303\1\302\11\301\1\303\1\306\1\302"+
    "\1\307\3\301\1\303\2\301\1\310\1\311\1\312\1\313"+
    "\2\301\1\314\2\301\1\315\2\301\1\316\1\317\1\320"+
    "\1\321\1\322\1\323\1\324\3\301\1\325\1\326\5\115"+
    "\1\327\2\115\2\327\1\115\5\327\1\330\1\115\1\327"+
    "\11\331\4\327\3\332\1\327\2\332\1\333\1\334\1\335"+
    "\1\336\2\332\1\337\2\332\1\340\2\332\1\341\1\342"+
    "\1\343\1\344\1\345\1\346\1\347\3\332\2\327\100\0"+
    "\1\17\131\0\1\24\37\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\30\23\13\0\1\24\73\0"+
    "\1\350\4\0\1\351\23\0\3\350\1\351\30\350\1\0"+
    "\1\351\15\0\1\24\20\0\1\24\55\0\1\352\1\0"+
    "\1\353\2\0\1\354\12\0\1\24\57\0\1\355\1\356"+
    "\1\0\1\357\10\360\2\0\1\24\57\0\1\361\1\362"+
    "\1\0\11\363\57\0\1\364\4\0\1\365\13\0\1\24"+
    "\60\0\1\366\1\0\11\367\63\0\1\366\1\0\11\36"+
    "\77\0\2\24\75\0\2\24\36\0\1\23\6\0\1\23"+
    "\13\0\11\23\4\0\3\23\1\0\3\23\1\370\14\23"+
    "\1\371\7\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\1\372\14\23\1\373\1\23\1\374"+
    "\6\23\1\375\1\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\1\376\14\23\1\377\12\23"+
    "\2\0\1\23\6\0\1\23\13\0\11\23\4\0\3\23"+
    "\1\0\1\u0100\3\23\1\u0101\10\23\1\371\12\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\12\23\1\u0102\1\23\1\u0103\4\23\1\u0104\6\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\1\u0105\7\23\1\u0106\4\23\1\u0107\1\23\1\u0108\2\23"+
    "\1\u0109\5\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\4\23\1\u010a\10\23\1\u010b\12\23"+
    "\2\0\1\23\6\0\1\23\13\0\11\23\4\0\3\23"+
    "\1\0\5\23\1\371\5\23\1\u010c\1\u010d\13\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\1\u010e\7\23\1\u010f\4\23\1\u0110\12\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\1\u0111"+
    "\16\23\1\u0112\2\23\1\u0113\5\23\2\0\1\23\6\0"+
    "\1\23\13\0\11\23\4\0\3\23\1\0\4\23\1\u0114"+
    "\23\23\2\0\1\23\6\0\1\23\13\0\11\23\4\0"+
    "\3\23\1\0\4\23\1\u0115\10\23\1\u0116\3\23\1\u0117"+
    "\5\23\1\u0118\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\7\23\1\u0119\7\23\1\u011a\10\23"+
    "\2\0\1\23\6\0\1\23\13\0\11\23\4\0\3\23"+
    "\1\0\5\23\1\u011b\2\23\1\u011c\17\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\1\u0107"+
    "\7\23\1\u011d\17\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\4\23\1\u011e\2\23\1\u011f"+
    "\20\23\2\0\1\23\6\0\1\23\13\0\11\23\4\0"+
    "\3\23\1\0\4\23\1\u0120\23\23\76\0\1\24\1\0"+
    "\2\63\1\0\1\63\1\0\1\63\1\0\3\63\1\0"+
    "\63\63\2\0\1\64\73\0\2\63\1\0\1\63\1\0"+
    "\1\63\1\0\3\63\1\0\46\63\1\u0121\16\63\1\0"+
    "\1\63\1\0\1\63\1\0\3\63\1\0\35\63\1\u0122"+
    "\10\63\1\u0123\16\63\1\0\1\63\1\0\1\63\1\0"+
    "\3\63\1\0\43\63\1\u0124\1\63\1\u0125\17\63\1\0"+
    "\1\63\1\0\1\63\1\0\3\63\1\0\31\63\1\u0126"+
    "\14\63\1\u0127\1\63\1\u0128\2\63\1\u0129\11\63\1\0"+
    "\1\63\1\0\1\63\1\0\3\63\1\0\36\63\1\u0123"+
    "\5\63\1\u012a\1\u012b\17\63\1\0\1\63\1\0\1\63"+
    "\1\0\3\63\1\0\31\63\1\u012c\14\63\1\u012d\16\63"+
    "\1\0\1\63\1\0\1\63\1\0\3\63\1\0\31\63"+
    "\1\u012e\16\63\1\u012f\2\63\1\u0130\11\63\1\0\1\63"+
    "\1\0\1\63\1\0\3\63\1\0\35\63\1\u0131\27\63"+
    "\1\0\1\63\1\0\1\63\1\0\3\63\1\0\46\63"+
    "\1\u0132\3\63\1\u0133\12\63\1\0\1\63\1\0\1\63"+
    "\1\0\3\63\1\0\40\63\1\u0134\7\63\1\u0135\14\63"+
    "\1\0\1\63\1\0\1\63\1\0\3\63\1\0\36\63"+
    "\1\u0136\2\63\1\u0137\23\63\1\0\1\63\1\0\1\63"+
    "\1\0\3\63\1\0\31\63\1\u0127\7\63\1\u0138\23\63"+
    "\1\0\1\63\1\0\1\63\1\0\3\63\1\0\40\63"+
    "\1\u0139\22\63\2\0\1\106\116\0\11\112\102\0\2\114"+
    "\115\0\1\u013a\64\0\1\u013b\10\0\1\u013c\72\0\1\u013d"+
    "\1\0\1\u013e\61\0\1\u013f\14\0\1\u0140\1\0\1\u0141"+
    "\2\0\1\u0142\60\0\1\u013c\5\0\1\u0143\1\u0144\61\0"+
    "\1\u0145\14\0\1\u0146\60\0\1\u0147\16\0\1\u0148\2\0"+
    "\1\u0149\57\0\1\u014a\106\0\1\u014b\3\0\1\u014c\63\0"+
    "\1\u014d\7\0\1\u014e\63\0\1\u014f\2\0\1\u0150\65\0"+
    "\1\u0140\7\0\1\u0151\74\0\1\u0152\24\0\1\146\75\0"+
    "\1\166\131\0\1\171\50\0\1\171\101\0\1\171\20\0"+
    "\1\171\62\0\11\175\77\0\2\171\75\0\2\171\132\0"+
    "\1\171\3\0\1\221\131\0\1\224\50\0\1\224\101\0"+
    "\1\224\20\0\1\224\74\0\2\224\75\0\2\224\132\0"+
    "\1\224\3\0\1\250\75\0\1\254\75\0\1\257\115\0"+
    "\1\261\111\0\1\303\50\0\1\303\101\0\1\303\20\0"+
    "\1\303\74\0\2\303\75\0\2\303\132\0\1\303\24\0"+
    "\11\331\65\0\11\332\4\0\3\332\1\0\30\332\25\0"+
    "\11\332\4\0\3\332\1\0\15\332\1\u0153\12\332\25\0"+
    "\11\332\4\0\3\332\1\0\4\332\1\u0154\10\332\1\u0155"+
    "\12\332\25\0\11\332\4\0\3\332\1\0\12\332\1\u0156"+
    "\1\332\1\u0157\13\332\25\0\11\332\4\0\3\332\1\0"+
    "\1\u0158\14\332\1\u0159\1\332\1\u015a\2\332\1\u015b\5\332"+
    "\25\0\11\332\4\0\3\332\1\0\5\332\1\u0155\5\332"+
    "\1\u015c\1\u015d\13\332\25\0\11\332\4\0\3\332\1\0"+
    "\1\u015e\14\332\1\u015f\12\332\25\0\11\332\4\0\3\332"+
    "\1\0\1\u0160\16\332\1\u0161\2\332\1\u0162\5\332\25\0"+
    "\11\332\4\0\3\332\1\0\4\332\1\u0163\23\332\25\0"+
    "\11\332\4\0\3\332\1\0\15\332\1\u0164\3\332\1\u0165"+
    "\6\332\25\0\11\332\4\0\3\332\1\0\7\332\1\u0166"+
    "\7\332\1\u0167\10\332\25\0\11\332\4\0\3\332\1\0"+
    "\5\332\1\u0168\2\332\1\u0169\17\332\25\0\11\332\4\0"+
    "\3\332\1\0\1\u0159\7\332\1\u016a\17\332\25\0\11\332"+
    "\4\0\3\332\1\0\7\332\1\u016b\20\332\2\0\1\350"+
    "\6\0\1\350\13\0\11\350\4\0\3\350\1\0\30\350"+
    "\20\0\1\352\1\0\1\353\2\0\1\354\72\0\1\353"+
    "\2\0\1\354\75\0\11\363\62\0\1\355\1\356\1\0"+
    "\1\357\10\360\63\0\1\366\1\0\11\360\62\0\1\361"+
    "\2\0\11\363\62\0\1\u016c\1\362\1\0\11\363\42\0"+
    "\15\u016d\1\u016e\60\u016d\2\365\1\17\1\365\1\20\71\365"+
    "\21\0\1\362\54\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\3\23\1\u016f\24\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\12\23"+
    "\1\u0170\15\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\15\23\1\u0171\12\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\4\23"+
    "\1\u0172\23\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\21\23\1\u0173\6\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\12\23"+
    "\1\u0174\15\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\14\23\1\u0175\13\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\26\23"+
    "\1\u0176\1\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\12\23\1\u0177\15\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\20\23"+
    "\1\u0178\7\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\22\23\1\u0179\5\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\7\23"+
    "\1\u017a\20\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\12\23\1\u0102\15\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\14\23"+
    "\1\u017b\13\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\17\23\1\371\10\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\15\23"+
    "\1\u0179\12\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\14\23\1\u017c\13\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\25\23"+
    "\1\u017d\2\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\22\23\1\u017e\5\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\16\23"+
    "\1\u017f\11\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\21\23\1\u0180\6\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\16\23"+
    "\1\u0181\11\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\14\23\1\u0182\13\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\3\23"+
    "\1\u0183\24\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\26\23\1\u0184\1\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\1\u0185"+
    "\7\23\1\u0186\17\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\1\23\1\u0187\26\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\21\23\1\u0188\6\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\2\23\1\u0189\11\23\1\u018a"+
    "\13\23\2\0\1\23\6\0\1\23\13\0\11\23\4\0"+
    "\3\23\1\0\12\23\1\u018b\15\23\2\0\1\23\6\0"+
    "\1\23\13\0\11\23\4\0\3\23\1\0\17\23\1\u018c"+
    "\10\23\2\0\1\23\6\0\1\23\13\0\11\23\4\0"+
    "\3\23\1\0\1\u018d\27\23\2\0\1\23\6\0\1\23"+
    "\13\0\11\23\4\0\3\23\1\0\10\23\1\u018e\17\23"+
    "\2\0\1\23\6\0\1\23\13\0\11\23\4\0\3\23"+
    "\1\0\1\u018f\21\23\1\u0178\5\23\2\0\1\23\6\0"+
    "\1\23\13\0\11\23\4\0\3\23\1\0\10\23\1\u0190"+
    "\17\23\2\0\1\23\6\0\1\23\13\0\11\23\4\0"+
    "\3\23\1\0\14\23\1\u0191\13\23\2\0\1\23\6\0"+
    "\1\23\13\0\11\23\4\0\3\23\1\0\4\23\1\u0192"+
    "\23\23\2\0\1\23\6\0\1\23\13\0\11\23\4\0"+
    "\3\23\1\0\4\23\1\u0193\3\23\1\u0194\17\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\10\23\1\u0195\17\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\1\u017e\27\23\2\0\2\63"+
    "\1\0\1\63\1\0\1\63\1\0\3\63\1\0\45\63"+
    "\1\u0196\17\63\1\0\1\63\1\0\1\63\1\0\3\63"+
    "\1\0\43\63\1\u0197\21\63\1\0\1\63\1\0\1\63"+
    "\1\0\3\63\1\0\51\63\1\u0198\13\63\1\0\1\63"+
    "\1\0\1\63\1\0\3\63\1\0\53\63\1\u0199\11\63"+
    "\1\0\1\63\1\0\1\63\1\0\3\63\1\0\43\63"+
    "\1\u0124\21\63\1\0\1\63\1\0\1\63\1\0\3\63"+
    "\1\0\50\63\1\u0123\14\63\1\0\1\63\1\0\1\63"+
    "\1\0\3\63\1\0\46\63\1\u0199\16\63\1\0\1\63"+
    "\1\0\1\63\1\0\3\63\1\0\45\63\1\u019a\17\63"+
    "\1\0\1\63\1\0\1\63\1\0\3\63\1\0\47\63"+
    "\1\u019b\15\63\1\0\1\63\1\0\1\63\1\0\3\63"+
    "\1\0\52\63\1\u019c\12\63\1\0\1\63\1\0\1\63"+
    "\1\0\3\63\1\0\47\63\1\u019d\15\63\1\0\1\63"+
    "\1\0\1\63\1\0\3\63\1\0\34\63\1\u019e\30\63"+
    "\1\0\1\63\1\0\1\63\1\0\3\63\1\0\57\63"+
    "\1\u019f\5\63\1\0\1\63\1\0\1\63\1\0\3\63"+
    "\1\0\31\63\1\u01a0\7\63\1\u01a1\23\63\1\0\1\63"+
    "\1\0\1\63\1\0\3\63\1\0\32\63\1\u01a2\32\63"+
    "\1\0\1\63\1\0\1\63\1\0\3\63\1\0\52\63"+
    "\1\u01a3\12\63\1\0\1\63\1\0\1\63\1\0\3\63"+
    "\1\0\43\63\1\u01a4\21\63\1\0\1\63\1\0\1\63"+
    "\1\0\3\63\1\0\50\63\1\u01a5\14\63\1\0\1\63"+
    "\1\0\1\63\1\0\3\63\1\0\41\63\1\u01a6\23\63"+
    "\1\0\1\63\1\0\1\63\1\0\3\63\1\0\53\63"+
    "\1\u0198\11\63\1\0\1\63\1\0\1\63\1\0\3\63"+
    "\1\0\41\63\1\u01a7\23\63\1\0\1\63\1\0\1\63"+
    "\1\0\3\63\1\0\45\63\1\u01a8\17\63\1\0\1\63"+
    "\1\0\1\63\1\0\3\63\1\0\35\63\1\u01a9\27\63"+
    "\1\0\1\63\1\0\1\63\1\0\3\63\1\0\41\63"+
    "\1\u01aa\21\63\60\0\1\u01ab\73\0\1\u01ac\103\0\1\u01ad"+
    "\77\0\1\u01ae\65\0\1\u013d\102\0\1\u013c\73\0\1\u01ae"+
    "\74\0\1\u01af\77\0\1\u01b0\100\0\1\u01b1\72\0\1\u01b2"+
    "\62\0\1\u01b3\120\0\1\u01b4\47\0\1\u01b5\7\0\1\u01b6"+
    "\66\0\1\u01b7\115\0\1\u01b8\66\0\1\u01b9\102\0\1\u01ba"+
    "\66\0\1\u01bb\107\0\1\u01ad\63\0\1\u01bc\101\0\1\u01bd"+
    "\65\0\1\u01be\101\0\1\u01bf\44\0\11\332\4\0\3\332"+
    "\1\0\14\332\1\u01c0\13\332\25\0\11\332\4\0\3\332"+
    "\1\0\12\332\1\u01c1\15\332\25\0\11\332\4\0\3\332"+
    "\1\0\20\332\1\u01c2\7\332\25\0\11\332\4\0\3\332"+
    "\1\0\22\332\1\u01c3\5\332\25\0\11\332\4\0\3\332"+
    "\1\0\12\332\1\u0156\15\332\25\0\11\332\4\0\3\332"+
    "\1\0\17\332\1\u0155\10\332\25\0\11\332\4\0\3\332"+
    "\1\0\15\332\1\u01c3\12\332\25\0\11\332\4\0\3\332"+
    "\1\0\14\332\1\u01c4\13\332\25\0\11\332\4\0\3\332"+
    "\1\0\16\332\1\u01c5\11\332\25\0\11\332\4\0\3\332"+
    "\1\0\21\332\1\u01c6\6\332\25\0\11\332\4\0\3\332"+
    "\1\0\16\332\1\u01c7\11\332\25\0\11\332\4\0\3\332"+
    "\1\0\3\332\1\u01c8\24\332\25\0\11\332\4\0\3\332"+
    "\1\0\26\332\1\u01c9\1\332\25\0\11\332\4\0\3\332"+
    "\1\0\1\u01ca\7\332\1\u01cb\17\332\25\0\11\332\4\0"+
    "\3\332\1\0\1\332\1\u01cc\26\332\25\0\11\332\4\0"+
    "\3\332\1\0\21\332\1\u01cd\6\332\25\0\11\332\4\0"+
    "\3\332\1\0\12\332\1\u01ce\15\332\25\0\11\332\4\0"+
    "\3\332\1\0\17\332\1\u01cf\10\332\25\0\11\332\4\0"+
    "\3\332\1\0\10\332\1\u01d0\17\332\25\0\11\332\4\0"+
    "\3\332\1\0\22\332\1\u01c2\5\332\25\0\11\332\4\0"+
    "\3\332\1\0\10\332\1\u01d1\17\332\25\0\11\332\4\0"+
    "\3\332\1\0\14\332\1\u01d2\13\332\25\0\11\332\4\0"+
    "\3\332\1\0\4\332\1\u01d3\23\332\25\0\11\332\4\0"+
    "\3\332\1\0\10\332\1\u01d4\17\332\22\0\1\u016c\2\0"+
    "\11\363\42\0\15\u016d\1\u01d5\75\u016d\1\u01d5\4\u016d\1\u01d6"+
    "\53\u016d\1\23\6\0\1\23\13\0\11\23\4\0\3\23"+
    "\1\0\17\23\1\u01d7\10\23\2\0\1\23\6\0\1\23"+
    "\13\0\11\23\4\0\3\23\1\0\1\u01d8\27\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\12\23\1\371\15\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\1\u01d9\27\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\4\23"+
    "\1\u01da\23\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\12\23\1\u01db\15\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\20\23"+
    "\1\u01dc\1\u01dd\6\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\20\23\1\u0194\7\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\4\23\1\u01de\23\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\4\23\1\371\23\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\13\23\1\371\14\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\4\23\1\u01df\23\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\14\23\1\u01e0\13\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\2\23\1\u01e1\25\23\2\0"+
    "\1\23\5\0\1\u01e2\1\23\2\0\1\u01e3\10\0\11\23"+
    "\4\0\3\23\1\0\30\23\2\0\1\23\6\0\1\23"+
    "\13\0\11\23\4\0\3\23\1\0\17\23\1\u0176\10\23"+
    "\2\0\1\23\6\0\1\23\13\0\11\23\4\0\3\23"+
    "\1\0\15\23\1\u01e4\12\23\2\0\1\23\6\0\1\23"+
    "\13\0\1\23\1\u01e5\1\u01e6\1\u01e7\2\23\1\u01e8\1\23"+
    "\1\371\4\0\3\23\1\0\4\23\1\u01e9\23\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\16\23\1\u01ea\11\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\22\23\1\u01eb\5\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\10\23\1\u01ec\17\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\1\u01ed\27\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\6\23"+
    "\1\u01ee\21\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\23\23\1\u01ef\4\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\12\23"+
    "\1\u01f0\15\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\22\23\1\u01f1\5\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\15\23"+
    "\1\u01f2\12\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\3\23\1\u01f3\24\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\10\23"+
    "\1\u01f4\17\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\10\23\1\u01f5\11\23\1\u01f6\5\23"+
    "\2\0\1\23\6\0\1\23\13\0\11\23\4\0\3\23"+
    "\1\0\1\23\1\u01f7\26\23\2\0\1\23\6\0\1\23"+
    "\13\0\11\23\4\0\3\23\1\0\20\23\1\371\7\23"+
    "\2\0\1\23\6\0\1\23\13\0\11\23\4\0\3\23"+
    "\1\0\14\23\1\u01f8\13\23\2\0\1\23\6\0\1\23"+
    "\13\0\11\23\4\0\3\23\1\0\25\23\1\u01f9\2\23"+
    "\2\0\1\23\6\0\1\23\13\0\11\23\4\0\3\23"+
    "\1\0\21\23\1\u01fa\6\23\2\0\1\23\6\0\1\23"+
    "\13\0\11\23\4\0\3\23\1\0\24\23\1\371\3\23"+
    "\2\0\1\23\6\0\1\23\13\0\11\23\4\0\3\23"+
    "\1\0\11\23\1\u0176\16\23\2\0\1\23\6\0\1\23"+
    "\13\0\11\23\4\0\3\23\1\0\12\23\1\u0178\15\23"+
    "\2\0\2\63\1\0\1\63\1\0\1\63\1\0\3\63"+
    "\1\0\51\63\1\u01fb\1\u01fc\12\63\1\0\1\63\1\0"+
    "\1\63\1\0\3\63\1\0\35\63\1\u01fd\27\63\1\0"+
    "\1\63\1\0\1\63\1\0\3\63\1\0\35\63\1\u0123"+
    "\27\63\1\0\1\63\1\0\1\63\1\0\3\63\1\0"+
    "\44\63\1\u0123\20\63\1\0\1\63\1\0\1\63\1\0"+
    "\3\63\1\0\33\63\1\u01fe\31\63\1\0\1\63\1\0"+
    "\1\63\1\0\3\63\1\0\46\63\1\u01ff\16\63\1\0"+
    "\1\63\1\0\1\63\1\0\3\63\1\0\11\63\1\u0200"+
    "\1\u0201\1\u0202\2\63\1\u0203\1\63\1\u0123\14\63\1\u0204"+
    "\27\63\1\0\1\63\1\0\1\63\1\0\3\63\1\0"+
    "\47\63\1\u0205\15\63\1\0\1\63\1\0\1\63\1\0"+
    "\3\63\1\0\41\63\1\u0206\23\63\1\0\1\63\1\0"+
    "\1\63\1\0\3\63\1\0\31\63\1\u0207\33\63\1\0"+
    "\1\63\1\0\1\63\1\0\3\63\1\0\37\63\1\u0208"+
    "\25\63\1\0\1\63\1\0\1\63\1\0\3\63\1\0"+
    "\54\63\1\u0209\10\63\1\0\1\63\1\0\1\63\1\0"+
    "\3\63\1\0\43\63\1\u020a\21\63\1\0\1\63\1\0"+
    "\1\63\1\0\3\63\1\0\53\63\1\u020b\11\63\1\0"+
    "\1\63\1\0\1\63\1\0\3\63\1\0\41\63\1\u020c"+
    "\23\63\1\0\1\63\1\0\1\63\1\0\3\63\1\0"+
    "\41\63\1\u020d\11\63\1\u020e\11\63\1\0\1\63\1\0"+
    "\1\63\1\0\3\63\1\0\51\63\1\u0123\13\63\1\0"+
    "\1\63\1\0\1\63\1\0\3\63\1\0\56\63\1\u020f"+
    "\6\63\1\0\1\63\1\0\1\63\1\0\3\63\1\0"+
    "\52\63\1\u0210\12\63\1\0\1\63\1\0\1\63\1\0"+
    "\3\63\1\0\55\63\1\u0123\7\63\1\0\1\63\1\0"+
    "\1\63\1\0\3\63\1\0\43\63\1\u0198\17\63\64\0"+
    "\1\u0211\1\u0212\60\0\1\u0213\75\0\1\u013c\104\0\1\u013c"+
    "\64\0\1\u0214\110\0\1\u0215\40\0\1\u0216\1\u0217\1\u0218"+
    "\2\0\1\u0219\1\0\1\u013c\14\0\1\u021a\107\0\1\u021b"+
    "\67\0\1\u021c\65\0\1\u021d\103\0\1\u021e\112\0\1\u021f"+
    "\64\0\1\u0220\105\0\1\u0221\63\0\1\u0222\75\0\1\u0223"+
    "\11\0\1\u0224\73\0\1\u013c\102\0\1\u0225\71\0\1\u0226"+
    "\100\0\1\u013c\63\0\1\u01ad\42\0\11\332\4\0\3\332"+
    "\1\0\20\332\1\u0227\1\u0228\6\332\25\0\11\332\4\0"+
    "\3\332\1\0\4\332\1\u0229\23\332\25\0\11\332\4\0"+
    "\3\332\1\0\4\332\1\u0155\23\332\25\0\11\332\4\0"+
    "\3\332\1\0\13\332\1\u0155\14\332\25\0\11\332\4\0"+
    "\3\332\1\0\2\332\1\u022a\25\332\25\0\11\332\4\0"+
    "\3\332\1\0\15\332\1\u022b\12\332\25\0\1\332\1\u022c"+
    "\1\u022d\1\u022e\2\332\1\u022f\1\332\1\u0155\4\0\3\332"+
    "\1\0\4\332\1\u0230\23\332\25\0\11\332\4\0\3\332"+
    "\1\0\16\332\1\u0231\11\332\25\0\11\332\4\0\3\332"+
    "\1\0\10\332\1\u0232\17\332\25\0\11\332\4\0\3\332"+
    "\1\0\1\u0233\27\332\25\0\11\332\4\0\3\332\1\0"+
    "\6\332\1\u0234\21\332\25\0\11\332\4\0\3\332\1\0"+
    "\23\332\1\u0235\4\332\25\0\11\332\4\0\3\332\1\0"+
    "\12\332\1\u0236\15\332\25\0\11\332\4\0\3\332\1\0"+
    "\22\332\1\u0237\5\332\25\0\11\332\4\0\3\332\1\0"+
    "\10\332\1\u0238\17\332\25\0\11\332\4\0\3\332\1\0"+
    "\10\332\1\u0239\11\332\1\u023a\5\332\25\0\11\332\4\0"+
    "\3\332\1\0\20\332\1\u0155\7\332\25\0\11\332\4\0"+
    "\3\332\1\0\25\332\1\u023b\2\332\25\0\11\332\4\0"+
    "\3\332\1\0\21\332\1\u023c\6\332\25\0\11\332\4\0"+
    "\3\332\1\0\24\332\1\u0155\3\332\25\0\11\332\4\0"+
    "\3\332\1\0\12\332\1\u01c2\15\332\2\0\15\u016d\1\u01d5"+
    "\4\u016d\1\17\53\u016d\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\4\23\1\u023d\23\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\14\23"+
    "\1\u023e\13\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\11\23\1\371\16\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\20\23"+
    "\1\u023f\7\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\2\23\1\u0240\25\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\21\23"+
    "\1\u0241\6\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\10\23\1\u0242\6\23\1\u0243\10\23"+
    "\2\0\1\23\6\0\1\23\13\0\11\23\4\0\3\23"+
    "\1\0\6\23\1\u0244\12\23\1\u0178\6\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\17\23"+
    "\1\u0194\10\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\4\23\1\u0245\23\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\21\23"+
    "\1\u0246\6\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\17\23\1\u0247\10\23\2\0\1\23"+
    "\6\0\1\23\13\0\2\23\1\u0248\3\23\1\371\2\23"+
    "\4\0\3\23\1\0\30\23\2\0\1\23\6\0\1\23"+
    "\13\0\5\23\1\u0249\3\23\4\0\3\23\1\0\30\23"+
    "\2\0\1\23\6\0\1\23\13\0\2\23\1\371\6\23"+
    "\4\0\3\23\1\0\30\23\2\0\1\23\6\0\1\23"+
    "\13\0\4\23\1\371\4\23\4\0\3\23\1\0\30\23"+
    "\2\0\1\23\6\0\1\23\13\0\11\23\4\0\3\23"+
    "\1\0\17\23\1\u024a\10\23\2\0\1\23\6\0\1\23"+
    "\13\0\11\23\4\0\3\23\1\0\10\23\1\u01f5\17\23"+
    "\2\0\1\23\6\0\1\23\13\0\11\23\4\0\3\23"+
    "\1\0\21\23\1\u024b\6\23\2\0\1\23\6\0\1\23"+
    "\13\0\11\23\4\0\3\23\1\0\5\23\1\u024c\22\23"+
    "\2\0\1\23\6\0\1\23\13\0\11\23\4\0\3\23"+
    "\1\0\1\23\1\u0195\26\23\2\0\1\23\6\0\1\23"+
    "\13\0\11\23\4\0\3\23\1\0\13\23\1\u024d\14\23"+
    "\2\0\1\23\6\0\1\23\13\0\11\23\4\0\3\23"+
    "\1\0\1\u024e\27\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\10\23\1\u024f\17\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\17\23\1\u0250\10\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\14\23\1\u0251\13\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\3\23\1\u0252\24\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\14\23\1\u0253\13\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\2\23\1\u0247\25\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\15\23\1\u0194\12\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\20\23\1\u0254\7\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\4\23\1\u0255\23\23\2\0"+
    "\1\23\6\0\1\23\13\0\1\23\1\u01e5\1\u01e6\1\u01e7"+
    "\2\23\1\u01e8\1\23\1\371\4\0\3\23\1\0\30\23"+
    "\2\0\2\63\1\0\1\63\1\0\1\63\1\0\3\63"+
    "\1\0\52\63\1\u0256\12\63\1\0\1\63\1\0\1\63"+
    "\1\0\3\63\1\0\41\63\1\u0257\6\63\1\u0258\14\63"+
    "\1\0\1\63\1\0\1\63\1\0\3\63\1\0\52\63"+
    "\1\u0198\12\63\1\0\1\63\1\0\1\63\1\0\3\63"+
    "\1\0\52\63\1\u0259\12\63\1\0\1\63\1\0\1\63"+
    "\1\0\3\63\1\0\50\63\1\u025a\14\63\1\0\1\63"+
    "\1\0\1\63\1\0\3\63\1\0\12\63\1\u025b\3\63"+
    "\1\u0123\46\63\1\0\1\63\1\0\1\63\1\0\3\63"+
    "\1\0\15\63\1\u025c\47\63\1\0\1\63\1\0\1\63"+
    "\1\0\3\63\1\0\12\63\1\u0123\52\63\1\0\1\63"+
    "\1\0\1\63\1\0\3\63\1\0\14\63\1\u0123\50\63"+
    "\1\0\1\63\1\0\1\63\1\0\3\63\1\0\50\63"+
    "\1\u025d\14\63\1\0\1\63\1\0\1\63\1\0\3\63"+
    "\1\0\41\63\1\u020d\23\63\1\0\1\63\1\0\1\63"+
    "\1\0\3\63\1\0\36\63\1\u025e\26\63\1\0\1\63"+
    "\1\0\1\63\1\0\3\63\1\0\32\63\1\u01aa\32\63"+
    "\1\0\1\63\1\0\1\63\1\0\3\63\1\0\44\63"+
    "\1\u025f\20\63\1\0\1\63\1\0\1\63\1\0\3\63"+
    "\1\0\31\63\1\u01fd\33\63\1\0\1\63\1\0\1\63"+
    "\1\0\3\63\1\0\41\63\1\u0260\23\63\1\0\1\63"+
    "\1\0\1\63\1\0\3\63\1\0\50\63\1\u0261\14\63"+
    "\1\0\1\63\1\0\1\63\1\0\3\63\1\0\34\63"+
    "\1\u0262\30\63\1\0\1\63\1\0\1\63\1\0\3\63"+
    "\1\0\45\63\1\u0263\17\63\1\0\1\63\1\0\1\63"+
    "\1\0\3\63\1\0\33\63\1\u025a\31\63\1\0\1\63"+
    "\1\0\1\63\1\0\3\63\1\0\35\63\1\u0264\27\63"+
    "\1\0\1\63\1\0\1\63\1\0\3\63\1\0\11\63"+
    "\1\u0200\1\u0201\1\u0202\2\63\1\u0203\1\63\1\u0123\42\63"+
    "\65\0\1\u0265\64\0\1\u0266\6\0\1\u0267\77\0\1\u01ad"+
    "\75\0\1\u0268\73\0\1\u0269\37\0\1\u026a\3\0\1\u013c"+
    "\74\0\1\u026b\72\0\1\u013c\77\0\1\u013c\131\0\1\u026c"+
    "\66\0\1\u0223\72\0\1\u026d\71\0\1\u01bf\107\0\1\u026e"+
    "\62\0\1\u0213\105\0\1\u026f\104\0\1\u0270\61\0\1\u0271"+
    "\106\0\1\u0272\63\0\1\u0269\77\0\1\u0273\51\0\1\u0216"+
    "\1\u0217\1\u0218\2\0\1\u0219\1\0\1\u013c\65\0\11\332"+
    "\4\0\3\332\1\0\21\332\1\u0274\6\332\25\0\11\332"+
    "\4\0\3\332\1\0\10\332\1\u0275\6\332\1\u0276\10\332"+
    "\25\0\11\332\4\0\3\332\1\0\21\332\1\u01c2\6\332"+
    "\25\0\11\332\4\0\3\332\1\0\21\332\1\u0277\6\332"+
    "\25\0\11\332\4\0\3\332\1\0\17\332\1\u0278\10\332"+
    "\25\0\2\332\1\u0279\3\332\1\u0155\2\332\4\0\3\332"+
    "\1\0\30\332\25\0\5\332\1\u027a\3\332\4\0\3\332"+
    "\1\0\30\332\25\0\2\332\1\u0155\6\332\4\0\3\332"+
    "\1\0\30\332\25\0\4\332\1\u0155\4\332\4\0\3\332"+
    "\1\0\30\332\25\0\11\332\4\0\3\332\1\0\17\332"+
    "\1\u027b\10\332\25\0\11\332\4\0\3\332\1\0\10\332"+
    "\1\u0239\17\332\25\0\11\332\4\0\3\332\1\0\5\332"+
    "\1\u027c\22\332\25\0\11\332\4\0\3\332\1\0\1\332"+
    "\1\u01d4\26\332\25\0\11\332\4\0\3\332\1\0\13\332"+
    "\1\u027d\14\332\25\0\11\332\4\0\3\332\1\0\1\u0229"+
    "\27\332\25\0\11\332\4\0\3\332\1\0\10\332\1\u027e"+
    "\17\332\25\0\11\332\4\0\3\332\1\0\17\332\1\u027f"+
    "\10\332\25\0\11\332\4\0\3\332\1\0\3\332\1\u0280"+
    "\24\332\25\0\11\332\4\0\3\332\1\0\14\332\1\u0281"+
    "\13\332\25\0\11\332\4\0\3\332\1\0\2\332\1\u0278"+
    "\25\332\25\0\11\332\4\0\3\332\1\0\4\332\1\u0282"+
    "\23\332\25\0\1\332\1\u022c\1\u022d\1\u022e\2\332\1\u022f"+
    "\1\332\1\u0155\4\0\3\332\1\0\30\332\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\20\23"+
    "\1\u018e\7\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\2\23\1\u0283\25\23\2\0\1\23"+
    "\6\0\1\23\13\0\1\23\2\u0284\1\u0285\5\371\4\0"+
    "\3\23\1\0\30\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\15\23\1\u0286\12\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\17\23\1\u0287\10\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\14\23\1\u0288\13\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\1\u01f6\27\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\1\u0289\27\23\2\0\1\23\6\0"+
    "\1\23\13\0\11\23\4\0\3\23\1\0\26\23\1\u0194"+
    "\1\23\2\0\1\23\6\0\1\23\13\0\11\23\4\0"+
    "\3\23\1\0\10\23\1\u028a\17\23\2\0\1\23\6\0"+
    "\1\23\13\0\11\23\4\0\3\23\1\0\21\23\1\371"+
    "\6\23\2\0\1\23\6\0\1\23\13\0\10\23\1\371"+
    "\4\0\3\23\1\0\30\23\2\0\1\23\6\0\1\23"+
    "\13\0\6\23\1\371\2\23\4\0\3\23\1\0\30\23"+
    "\2\0\1\23\6\0\1\23\13\0\11\23\4\0\3\23"+
    "\1\0\14\23\1\u028b\13\23\2\0\1\23\6\0\1\23"+
    "\13\0\11\23\4\0\3\23\1\0\4\23\1\u0176\23\23"+
    "\2\0\1\23\6\0\1\23\13\0\11\23\4\0\3\23"+
    "\1\0\10\23\1\u028c\17\23\2\0\1\23\6\0\1\23"+
    "\13\0\11\23\4\0\3\23\1\0\1\371\27\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\21\23\1\u0178\6\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\2\23\1\371\25\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\14\23\1\u028d\13\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\3\23\1\u0176\24\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\10\23\1\u028e\17\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\6\23\1\371\21\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\5\23\1\u028f\22\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\3\23\1\371\24\23\2\0"+
    "\2\63\1\0\1\63\1\0\1\63\1\0\3\63\1\0"+
    "\50\63\1\u0290\14\63\1\0\1\63\1\0\1\63\1\0"+
    "\3\63\1\0\45\63\1\u0135\17\63\1\0\1\63\1\0"+
    "\1\63\1\0\3\63\1\0\31\63\1\u020e\33\63\1\0"+
    "\1\63\1\0\1\63\1\0\3\63\1\0\41\63\1\u0291"+
    "\23\63\1\0\1\63\1\0\1\63\1\0\3\63\1\0"+
    "\52\63\1\u0123\12\63\1\0\1\63\1\0\1\63\1\0"+
    "\3\63\1\0\20\63\1\u0123\44\63\1\0\1\63\1\0"+
    "\1\63\1\0\3\63\1\0\16\63\1\u0123\46\63\1\0"+
    "\1\63\1\0\1\63\1\0\3\63\1\0\45\63\1\u0292"+
    "\17\63\1\0\1\63\1\0\1\63\1\0\3\63\1\0"+
    "\41\63\1\u0293\23\63\1\0\1\63\1\0\1\63\1\0"+
    "\3\63\1\0\31\63\1\u0123\33\63\1\0\1\63\1\0"+
    "\1\63\1\0\3\63\1\0\33\63\1\u0123\31\63\1\0"+
    "\1\63\1\0\1\63\1\0\3\63\1\0\45\63\1\u0294"+
    "\17\63\1\0\1\63\1\0\1\63\1\0\3\63\1\0"+
    "\41\63\1\u0295\23\63\1\0\1\63\1\0\1\63\1\0"+
    "\3\63\1\0\37\63\1\u0123\25\63\1\0\1\63\1\0"+
    "\1\63\1\0\3\63\1\0\34\63\1\u0123\26\63\63\0"+
    "\1\u0296\72\0\1\u014e\61\0\1\u0224\105\0\1\u0297\106\0"+
    "\1\u013c\43\0\1\u013c\73\0\1\u013c\124\0\1\u0298\71\0"+
    "\1\u0299\65\0\1\u013c\77\0\1\u013c\107\0\1\u029a\71\0"+
    "\1\u029b\73\0\1\u013c\72\0\1\u013c\51\0\11\332\4\0"+
    "\3\332\1\0\17\332\1\u029c\10\332\25\0\11\332\4\0"+
    "\3\332\1\0\14\332\1\u0167\13\332\25\0\11\332\4\0"+
    "\3\332\1\0\1\u023a\27\332\25\0\11\332\4\0\3\332"+
    "\1\0\10\332\1\u029d\17\332\25\0\11\332\4\0\3\332"+
    "\1\0\21\332\1\u0155\6\332\25\0\10\332\1\u0155\4\0"+
    "\3\332\1\0\30\332\25\0\6\332\1\u0155\2\332\4\0"+
    "\3\332\1\0\30\332\25\0\11\332\4\0\3\332\1\0"+
    "\14\332\1\u029e\13\332\25\0\11\332\4\0\3\332\1\0"+
    "\10\332\1\u029f\17\332\25\0\11\332\4\0\3\332\1\0"+
    "\1\u0155\27\332\25\0\11\332\4\0\3\332\1\0\2\332"+
    "\1\u0155\25\332\25\0\11\332\4\0\3\332\1\0\14\332"+
    "\1\u02a0\13\332\25\0\11\332\4\0\3\332\1\0\10\332"+
    "\1\u02a1\17\332\25\0\11\332\4\0\3\332\1\0\6\332"+
    "\1\u0155\21\332\25\0\11\332\4\0\3\332\1\0\3\332"+
    "\1\u0155\24\332\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\4\23\1\u01f3\23\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\371\4\0\3\23\1\0\30\23"+
    "\2\0\1\23\6\0\1\23\13\0\3\371\6\23\4\0"+
    "\3\23\1\0\30\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\3\23\1\u0283\24\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\22\23\1\u02a2\5\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\22\23\1\u0178\5\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\21\23\1\u02a3\6\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\15\23\1\u02a4\12\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\1\u0171\27\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\4\23\1\u0107\23\23\2\0\1\23"+
    "\6\0\1\23\13\0\11\23\4\0\3\23\1\0\21\23"+
    "\1\u02a5\6\23\2\0\1\23\6\0\1\23\13\0\11\23"+
    "\4\0\3\23\1\0\4\23\1\u02a6\23\23\2\0\2\63"+
    "\1\0\1\63\1\0\1\63\1\0\3\63\1\0\53\63"+
    "\1\u02a7\11\63\1\0\1\63\1\0\1\63\1\0\3\63"+
    "\1\0\46\63\1\u02a8\16\63\1\0\1\63\1\0\1\63"+
    "\1\0\3\63\1\0\31\63\1\u02a9\33\63\1\0\1\63"+
    "\1\0\1\63\1\0\3\63\1\0\35\63\1\u0127\27\63"+
    "\1\0\1\63\1\0\1\63\1\0\3\63\1\0\52\63"+
    "\1\u02aa\10\63\66\0\1\u02ab\70\0\1\u02ac\60\0\1\u02ad"+
    "\101\0\1\u0140\112\0\1\u02ae\33\0\11\332\4\0\3\332"+
    "\1\0\22\332\1\u02af\5\332\25\0\11\332\4\0\3\332"+
    "\1\0\15\332\1\u02b0\12\332\25\0\11\332\4\0\3\332"+
    "\1\0\1\u02b1\27\332\25\0\11\332\4\0\3\332\1\0"+
    "\4\332\1\u0159\23\332\25\0\11\332\4\0\3\332\1\0"+
    "\21\332\1\u02b2\6\332\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\2\23\1\u02b3\25\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\4\23\1\u02b4\23\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\14\23\1\371\13\23\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\26\23\1\371\1\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\17\23\1\u01f3\10\23\2\0"+
    "\2\63\1\0\1\63\1\0\1\63\1\0\3\63\1\0"+
    "\33\63\1\u02b5\31\63\1\0\1\63\1\0\1\63\1\0"+
    "\3\63\1\0\45\63\1\u0123\17\63\1\0\1\63\1\0"+
    "\1\63\1\0\3\63\1\0\43\63\1\u0123\21\63\1\0"+
    "\1\63\1\0\1\63\1\0\3\63\1\0\57\63\1\u0123"+
    "\3\63\46\0\1\u02b6\107\0\1\u013c\73\0\1\u013c\111\0"+
    "\1\u013c\26\0\11\332\4\0\3\332\1\0\2\332\1\u02b7"+
    "\25\332\25\0\11\332\4\0\3\332\1\0\14\332\1\u0155"+
    "\13\332\25\0\11\332\4\0\3\332\1\0\12\332\1\u0155"+
    "\15\332\25\0\11\332\4\0\3\332\1\0\26\332\1\u0155"+
    "\1\332\2\0\1\23\6\0\1\23\13\0\11\23\4\0"+
    "\3\23\1\0\21\23\1\u02b8\6\23\2\0\1\23\6\0"+
    "\1\23\13\0\11\23\4\0\3\23\1\0\2\23\1\u02b9"+
    "\25\23\2\0\2\63\1\0\1\63\1\0\1\63\1\0"+
    "\3\63\1\0\52\63\1\u02ba\10\63\65\0\1\u02bb\33\0"+
    "\11\332\4\0\3\332\1\0\21\332\1\u02bc\6\332\2\0"+
    "\1\23\6\0\1\23\13\0\11\23\4\0\3\23\1\0"+
    "\15\23\1\u0107\12\23\2\0\1\23\6\0\1\23\13\0"+
    "\11\23\4\0\3\23\1\0\1\u02bd\27\23\2\0\2\63"+
    "\1\0\1\63\1\0\1\63\1\0\3\63\1\0\46\63"+
    "\1\u0127\14\63\61\0\1\u0140\37\0\11\332\4\0\3\332"+
    "\1\0\15\332\1\u0159\12\332\2\0\1\23\6\0\1\23"+
    "\13\0\11\23\4\0\3\23\1\0\12\23\1\u02be\15\23"+
    "\2\0\1\23\6\0\1\23\13\0\11\23\4\0\3\23"+
    "\1\0\12\23\1\u01f3\15\23\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[35402];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\2\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\35\1\1\11\1\1\2\11\15\1\2\11\1\1\2\11"+
    "\1\1\1\11\1\1\1\11\15\1\1\11\11\1\2\11"+
    "\1\1\1\11\15\1\1\11\2\1\1\11\1\1\1\11"+
    "\2\1\1\11\2\1\1\11\16\1\2\11\2\1\1\11"+
    "\23\1\1\11\1\1\3\11\1\1\2\11\1\1\1\11"+
    "\16\1\2\11\1\1\1\11\22\1\3\11\20\1\11\0"+
    "\2\1\1\0\1\1\1\0\103\1\2\0\1\11\26\0"+
    "\32\1\2\0\74\1\6\0\1\1\16\0\25\1\1\0"+
    "\14\1\2\11\55\1\25\0\77\1\17\0\42\1\4\0"+
    "\1\1\1\0\17\1\4\0\7\1\1\0\4\1\1\0"+
    "\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[702];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();
  StringBuffer stringN = new StringBuffer();
  public static int banderaN = 0;
  public static int bandera = 0;
  public static int bandera2 = 0;
  public static int bandera3 = 0;
  public static ArrayList<Token> tokens = new ArrayList<>();  
  public static ArrayList<Token> errores = new ArrayList<>();  

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Symb.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { stringN.setLength(0);
     stringN.append(yytext());
     yybegin(stateNosibol);
            }
            // fall through
          case 54: break;
          case 2:
            { /* ignore */ ;banderaN =0;
            }
            // fall through
          case 55: break;
          case 3:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
            }
            // fall through
          case 56: break;
          case 4:
            { string.setLength(0); yybegin(STRING); bandera = yycolumn;
            }
            // fall through
          case 57: break;
          case 5:
            { stringN.setLength(0);
string.setLength(0);
string.append(yytext());
stringN.append(yytext());
yybegin(filtro);
            }
            // fall through
          case 58: break;
          case 6:
            { string.setLength(0); yybegin(Chars); bandera = yycolumn;
            }
            // fall through
          case 59: break;
          case 7:
            { string.setLength(0);
  string.append(yytext());
  yybegin(numberState);
  banderaN =0;
  bandera2 = 0;
  bandera3= 0;
            }
            // fall through
          case 60: break;
          case 8:
            { string.append( yytext() );
            }
            // fall through
          case 61: break;
          case 9:
            { errores.add(new Token(string.toString(), yyline, bandera, "Error stringASAD"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 62: break;
          case 10:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal string"));
            }
            // fall through
          case 63: break;
          case 11:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error string"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 64: break;
          case 12:
            { string.append(yytext());
    yybegin(hexaStateError);
            }
            // fall through
          case 65: break;
          case 13:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: hexadecimal sin cierre"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 66: break;
          case 14:
            { yybegin(YYINITIAL);
    string.append( yytext() ); 
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal hexadecimal/Palabra Reservada"));
            }
            // fall through
          case 67: break;
          case 15:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: comillas de cierre incorrectas"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 68: break;
          case 16:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); 
    errores.add(new Token("Comillas", yyline, yycolumn, "Error: hexadecimal sin cierre"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 69: break;
          case 17:
            { System.out.println(yyline);
  System.out.println(yycolumn); 
  // throw new Error("Illegal character <"+ yytext()+">");
            }
            // fall through
          case 70: break;
          case 18:
            { string.append(yytext());
    yybegin(hexaStateCError);
            }
            // fall through
          case 71: break;
          case 19:
            { string.append(yytext());
            }
            // fall through
          case 72: break;
          case 20:
            { yybegin(YYINITIAL); errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
            }
            // fall through
          case 73: break;
          case 21:
            { yybegin(YYINITIAL);
    string.append(yytext());
    errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
            }
            // fall through
          case 74: break;
          case 22:
            { yybegin(YYINITIAL);
    return symbol(Symb.numero, string.toString());
            }
            // fall through
          case 75: break;
          case 23:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
  tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
  yybegin(YYINITIAL);
            }
            // fall through
          case 76: break;
          case 24:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "literal numerico"));
    tokens.add(new Token(")", yyline+1, yycolumn, "Operador"));
            }
            // fall through
          case 77: break;
          case 25:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "literal numerico"));
    tokens.add(new Token(";", yyline+1, yycolumn, "Operador"));
            }
            // fall through
          case 78: break;
          case 26:
            { string.append(yytext()); yybegin(Identificadorcillo);
            }
            // fall through
          case 79: break;
          case 27:
            { yybegin(otraMas);
    string.append(yytext());
            }
            // fall through
          case 80: break;
          case 28:
            { bandera = 1; 
    string.append(yytext());
            }
            // fall through
          case 81: break;
          case 29:
            { if(bandera == 1){
      yybegin(YYINITIAL);
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
    }
    else{
      yybegin(YYINITIAL);
      tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
    }
            }
            // fall through
          case 82: break;
          case 30:
            { if(bandera == 1){
      yybegin(YYINITIAL);
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
    else{
      yybegin(YYINITIAL);
      tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
            }
            // fall through
          case 83: break;
          case 31:
            { if((bandera2 == 1) && (bandera == 1)){
      yybegin(YYINITIAL);
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
    else if ((bandera2 == 1) && (bandera == 0)){
      yybegin(YYINITIAL);
      tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
    else if ((bandera2 == 0) && (bandera == 1)){
      yybegin(YYINITIAL);
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
    else {
      yybegin(YYINITIAL);
      tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
            }
            // fall through
          case 84: break;
          case 32:
            { string.append( yytext() );
    errores.add(new Token(string.toString(), yyline, bandera, "Error char"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 85: break;
          case 33:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error char"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 86: break;
          case 34:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal char"));
            }
            // fall through
          case 87: break;
          case 35:
            { errores.add(new Token(string.toString(), yyline, bandera, "Error: identificador")); yybegin(YYINITIAL);
            }
            // fall through
          case 88: break;
          case 36:
            { stringN.append(yytext());yybegin(stateNosibol);
            }
            // fall through
          case 89: break;
          case 37:
            { errores.add(new Token(stringN.toString(), yyline, yycolumn, "Error: identificador"));
        yybegin(YYINITIAL);
            }
            // fall through
          case 90: break;
          case 38:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));     
        errores.add(new Token(stringN.toString(), yyline, yycolumn, "Error: identificador"));
        yybegin(YYINITIAL);
            }
            // fall through
          case 91: break;
          case 39:
            { stringN.append(yytext());
    yybegin(stateNosibol);
            }
            // fall through
          case 92: break;
          case 40:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Identificador"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 93: break;
          case 41:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Identificador"));
    tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 94: break;
          case 42:
            { string.append(yytext()) ;
              errores.add(new Token(string.toString(), yyline, yycolumn, "Error Identificador"));
              yybegin(YYINITIAL);
            }
            // fall through
          case 95: break;
          case 43:
            { if (bandera3 == 0){
      string.append(yytext());
      bandera3 = 1;
      yybegin(otraMas);
    }
    else{
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Error: Literal numerico"));
      yybegin(YYINITIAL);
    }
            }
            // fall through
          case 96: break;
          case 44:
            { string.append(yytext());
    bandera2 = 1;
    yybegin(NaturalNumbers);
            }
            // fall through
          case 97: break;
          case 45:
            { if (bandera3 == 1){
      string.append(yytext());
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
      yybegin(YYINITIAL);
    }
    else{
      string.append(yytext());
      yybegin(NaturalNumbers);
    }
            }
            // fall through
          case 98: break;
          case 46:
            { System.out.println("Hola");
    string.append(yytext());
    errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 99: break;
          case 47:
            { string.setLength(0);
  string.append(yytext());
  errores.add(new Token(string.toString(), yyline, yycolumn, "Error Decimal"));
  yybegin(YYINITIAL);
            }
            // fall through
          case 100: break;
          case 48:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error Decimal"));
            }
            // fall through
          case 101: break;
          case 49:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));
            }
            // fall through
          case 102: break;
          case 50:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Units"));
            }
            // fall through
          case 103: break;
          case 51:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Transac"));
            }
            // fall through
          case 104: break;
          case 52:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaState);
            }
            // fall through
          case 105: break;
          case 53:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaStateC);
            }
            // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
