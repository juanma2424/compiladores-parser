
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symb.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u013e\000\002\002\004\000\002\002\016\000\002\074" +
    "\010\000\002\074\002\000\002\003\004\000\002\003\003" +
    "\000\002\004\004\000\002\004\003\000\002\005\004\000" +
    "\002\005\003\000\002\006\004\000\002\006\002\000\002" +
    "\011\021\000\002\011\005\000\002\054\006\000\002\054" +
    "\002\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\002\000\002\056\007\000" +
    "\002\056\002\000\002\057\004\000\002\057\002\000\002" +
    "\075\007\000\002\075\003\000\002\053\005\000\002\053" +
    "\007\000\002\053\004\000\002\053\005\000\002\053\003" +
    "\000\002\062\003\000\002\062\003\000\002\076\004\000" +
    "\002\076\003\000\002\077\003\000\002\077\003\000\002" +
    "\047\014\000\002\047\005\000\002\047\006\000\002\050" +
    "\010\000\002\050\002\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\033\012\000" +
    "\002\033\005\000\002\041\016\000\002\043\014\000\002" +
    "\044\013\000\002\044\005\000\002\045\007\000\002\045" +
    "\005\000\002\045\002\000\002\046\012\000\002\046\005" +
    "\000\002\046\011\000\002\040\004\000\002\040\002\000" +
    "\002\034\004\000\002\034\010\000\002\034\012\000\002" +
    "\034\016\000\002\034\014\000\002\034\003\000\002\034" +
    "\004\000\002\034\004\000\002\034\004\000\002\036\005" +
    "\000\002\036\003\000\002\061\003\000\002\061\003\000" +
    "\002\061\013\000\002\051\013\000\002\052\007\000\002" +
    "\052\002\000\002\035\005\000\002\037\006\000\002\042" +
    "\005\000\002\027\004\000\002\027\002\000\002\030\005" +
    "\000\002\030\002\000\002\060\004\000\002\007\010\000" +
    "\002\007\005\000\002\012\005\000\002\012\002\000\002" +
    "\137\002\000\002\140\002\000\002\141\002\000\002\016" +
    "\012\000\002\016\005\000\002\032\003\000\002\032\004" +
    "\000\002\017\004\000\002\014\004\000\002\014\002\000" +
    "\002\015\003\000\002\015\003\000\002\015\002\000\002" +
    "\020\004\000\002\020\004\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\067\004\000\002\067\004" +
    "\000\002\142\002\000\002\072\005\000\002\072\003\000" +
    "\002\063\005\000\002\063\003\000\002\073\004\000\002" +
    "\073\005\000\002\073\004\000\002\073\002\000\002\064" +
    "\005\000\002\065\004\000\002\065\005\000\002\065\004" +
    "\000\002\065\002\000\002\070\004\000\002\070\003\000" +
    "\002\071\004\000\002\071\003\000\002\143\002\000\002" +
    "\021\005\000\002\021\004\000\002\021\006\000\002\021" +
    "\003\000\002\134\004\000\002\134\003\000\002\134\002" +
    "\000\002\025\005\000\002\025\003\000\002\133\003\000" +
    "\002\133\003\000\002\133\002\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\066\003\000\002\066\003\000" +
    "\002\066\003\000\002\066\003\000\002\066\003\000\002" +
    "\066\003\000\002\066\003\000\002\066\003\000\002\066" +
    "\003\000\002\023\004\000\002\116\004\000\002\116\004" +
    "\000\002\116\004\000\002\116\004\000\002\026\004\000" +
    "\002\026\002\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\115\003" +
    "\000\002\115\002\000\002\031\003\000\002\031\003\000" +
    "\002\100\004\000\002\100\004\000\002\100\003\000\002" +
    "\100\003\000\002\104\004\000\002\101\005\000\002\101" +
    "\003\000\002\106\004\000\002\106\004\000\002\106\004" +
    "\000\002\102\005\000\002\111\004\000\002\111\004\000" +
    "\002\111\002\000\002\107\004\000\002\107\006\000\002" +
    "\107\003\000\002\112\004\000\002\112\003\000\002\110" +
    "\004\000\002\110\005\000\002\110\007\000\002\105\004" +
    "\000\002\105\002\000\002\113\004\000\002\113\002\000" +
    "\002\114\003\000\002\114\003\000\002\114\003\000\002" +
    "\114\003\000\002\114\003\000\002\114\003\000\002\114" +
    "\003\000\002\114\003\000\002\114\003\000\002\103\003" +
    "\000\002\103\003\000\002\117\004\000\002\117\004\000" +
    "\002\117\003\000\002\117\003\000\002\117\003\000\002" +
    "\127\004\000\002\127\004\000\002\123\004\000\002\120" +
    "\005\000\002\120\003\000\002\124\004\000\002\124\004" +
    "\000\002\124\004\000\002\124\002\000\002\121\005\000" +
    "\002\125\004\000\002\125\004\000\002\125\004\000\002" +
    "\125\002\000\002\122\003\000\002\122\003\000\002\132" +
    "\004\000\002\132\003\000\002\132\004\000\002\132\004" +
    "\000\002\132\004\000\002\135\005\000\002\135\006\000" +
    "\002\130\004\000\002\130\002\000\002\131\003\000\002" +
    "\131\003\000\002\131\003\000\002\131\003\000\002\131" +
    "\003\000\002\131\003\000\002\131\003\000\002\131\003" +
    "\000\002\131\003\000\002\131\003\000\002\131\003\000" +
    "\002\131\003\000\002\131\003\000\002\131\003\000\002" +
    "\131\003\000\002\131\003\000\002\131\003\000\002\136" +
    "\004\000\002\136\002\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0247\000\004\004\004\001\002\000\004\005\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\006\010\001\002\000\004\120\011\001\002\000" +
    "\004\120\012\001\002\000\004\013\013\001\002\000\004" +
    "\007\014\001\002\000\004\117\015\001\002\000\004\010" +
    "\016\001\002\000\166\011\ufff6\012\073\015\020\016\022" +
    "\017\036\020\104\021\063\022\116\023\111\024\034\025" +
    "\105\026\106\027\030\030\031\031\075\032\065\033\115" +
    "\034\074\035\077\036\110\037\067\107\103\110\053\114" +
    "\062\115\040\116\112\123\066\124\061\125\113\126\046" +
    "\127\056\130\041\131\047\132\101\133\045\134\051\135" +
    "\071\136\032\137\026\140\017\141\057\142\114\143\072" +
    "\144\117\145\120\146\054\147\042\150\050\151\033\152" +
    "\037\153\025\154\027\155\100\156\021\157\035\160\024" +
    "\161\060\162\055\001\002\000\014\003\ufed6\040\ufed6\042" +
    "\ufed6\043\ufed6\117\ufed6\001\002\000\014\003\ufef9\040\ufef9" +
    "\042\ufef9\043\ufef9\117\ufef9\001\002\000\014\003\ufec8\040" +
    "\ufec8\042\ufec8\043\ufec8\117\ufec8\001\002\000\014\003\ufef8" +
    "\040\ufef8\042\ufef8\043\ufef8\117\ufef8\001\002\000\014\003" +
    "\u023c\040\uffa7\042\uffa7\043\uffa7\117\uffa7\001\002\000\014" +
    "\003\ufec6\040\ufec6\042\ufec6\043\ufec6\117\ufec6\001\002\000" +
    "\014\003\ufecb\040\ufecb\042\ufecb\043\ufecb\117\ufecb\001\002" +
    "\000\014\003\ufed7\040\ufed7\042\ufed7\043\ufed7\117\ufed7\001" +
    "\002\000\014\003\ufeca\040\ufeca\042\ufeca\043\ufeca\117\ufeca" +
    "\001\002\000\014\003\ufeee\040\ufeee\042\ufeee\043\ufeee\117" +
    "\ufeee\001\002\000\014\003\ufeed\040\ufeed\042\ufeed\043\ufeed" +
    "\117\ufeed\001\002\000\014\003\ufed8\040\ufed8\042\ufed8\043" +
    "\ufed8\117\ufed8\001\002\000\014\003\ufecd\040\ufecd\042\ufecd" +
    "\043\ufecd\117\ufecd\001\002\000\014\003\ufef1\040\ufef1\042" +
    "\ufef1\043\ufef1\117\ufef1\001\002\000\014\003\ufec7\040\ufec7" +
    "\042\ufec7\043\ufec7\117\ufec7\001\002\000\014\003\ufef7\040" +
    "\ufef7\042\ufef7\043\ufef7\117\ufef7\001\002\000\014\003\ufecc" +
    "\040\ufecc\042\ufecc\043\ufecc\117\ufecc\001\002\000\014\003" +
    "\ufef6\040\ufef6\042\ufef6\043\ufef6\117\ufef6\001\002\000\014" +
    "\003\ufede\040\ufede\042\ufede\043\ufede\117\ufede\001\002\000" +
    "\014\003\ufecf\040\ufecf\042\ufecf\043\ufecf\117\ufecf\001\002" +
    "\000\164\011\ufff6\015\020\016\022\017\036\020\104\021" +
    "\063\022\116\023\111\024\034\025\105\026\106\027\030" +
    "\030\031\031\075\032\065\033\115\034\074\035\077\036" +
    "\110\037\067\107\103\110\053\114\062\115\040\116\112" +
    "\123\066\124\061\125\113\126\046\127\056\130\041\131" +
    "\047\132\101\133\045\134\051\135\071\136\032\137\026" +
    "\140\017\141\057\142\114\143\072\144\117\145\120\146" +
    "\054\147\042\150\050\151\033\152\037\153\025\154\027" +
    "\155\100\156\021\157\035\160\024\161\060\162\055\001" +
    "\002\000\004\011\ufffa\001\002\000\014\003\ufedb\040\ufedb" +
    "\042\ufedb\043\ufedb\117\ufedb\001\002\000\014\003\ufee0\040" +
    "\ufee0\042\ufee0\043\ufee0\117\ufee0\001\002\000\014\003\ufedd" +
    "\040\ufedd\042\ufedd\043\ufedd\117\ufedd\001\002\000\014\003" +
    "\ufece\040\ufece\042\ufece\043\ufece\117\ufece\001\002\000\014" +
    "\003\ufeda\040\ufeda\042\ufeda\043\ufeda\117\ufeda\001\002\000" +
    "\004\011\ufffc\001\002\000\006\003\175\117\176\001\002" +
    "\000\014\003\ufed0\040\ufed0\042\ufed0\043\ufed0\117\ufed0\001" +
    "\002\000\014\003\ufec4\040\ufec4\042\ufec4\043\ufec4\117\ufec4" +
    "\001\002\000\014\003\ufedf\040\ufedf\042\ufedf\043\ufedf\117" +
    "\ufedf\001\002\000\014\003\ufed5\040\ufed5\042\ufed5\043\ufed5" +
    "\117\ufed5\001\002\000\014\003\ufec5\040\ufec5\042\ufec5\043" +
    "\ufec5\117\ufec5\001\002\000\014\003\ufee2\040\ufee2\042\ufee2" +
    "\043\ufee2\117\ufee2\001\002\000\014\003\ufee5\040\ufee5\042" +
    "\ufee5\043\ufee5\117\ufee5\001\002\000\014\003\ufef4\040\ufef4" +
    "\042\ufef4\043\ufef4\117\ufef4\001\002\000\004\011\165\001" +
    "\002\000\014\003\ufeeb\040\ufeeb\042\ufeeb\043\ufeeb\117\ufeeb" +
    "\001\002\000\014\003\ufee3\040\ufee3\042\ufee3\043\ufee3\117" +
    "\ufee3\001\002\000\014\003\ufee6\040\ufee6\042\ufee6\043\ufee6" +
    "\117\ufee6\001\002\000\004\011\ufff8\001\002\000\014\003" +
    "\ufed9\040\ufed9\042\ufed9\043\ufed9\117\ufed9\001\002\000\014" +
    "\003\ufed3\040\ufed3\042\ufed3\043\ufed3\117\ufed3\001\002\000" +
    "\006\003\153\117\154\001\002\000\014\003\ufee9\040\ufee9" +
    "\042\ufee9\043\ufee9\117\ufee9\001\002\000\014\003\ufeec\040" +
    "\ufeec\042\ufeec\043\ufeec\117\ufeec\001\002\000\166\011\ufff6" +
    "\012\073\015\020\016\022\017\036\020\104\021\063\022" +
    "\116\023\111\024\034\025\105\026\106\027\030\030\031" +
    "\031\075\032\065\033\115\034\074\035\077\036\110\037" +
    "\067\107\103\110\053\114\062\115\040\116\112\123\066" +
    "\124\061\125\113\126\046\127\056\130\041\131\047\132" +
    "\101\133\045\134\051\135\071\136\032\137\026\140\017" +
    "\141\057\142\114\143\072\144\117\145\120\146\054\147" +
    "\042\150\050\151\033\152\037\153\025\154\027\155\100" +
    "\156\021\157\035\160\024\161\060\162\055\001\002\000" +
    "\014\003\ufee8\040\ufee8\042\ufee8\043\ufee8\117\ufee8\001\002" +
    "\000\014\003\ufec9\040\ufec9\042\ufec9\043\ufec9\117\ufec9\001" +
    "\002\000\014\003\ufedc\040\ufedc\042\ufedc\043\ufedc\117\ufedc" +
    "\001\002\000\006\011\ufff6\110\053\001\002\000\006\003" +
    "\122\117\123\001\002\000\014\003\ufef5\040\ufef5\042\ufef5" +
    "\043\ufef5\117\ufef5\001\002\000\014\003\ufef0\040\ufef0\042" +
    "\ufef0\043\ufef0\117\ufef0\001\002\000\014\003\ufeef\040\ufeef" +
    "\042\ufeef\043\ufeef\117\ufeef\001\002\000\010\011\ufff6\107" +
    "\103\110\053\001\002\000\014\003\ufee7\040\ufee7\042\ufee7" +
    "\043\ufee7\117\ufee7\001\002\000\014\003\ufef2\040\ufef2\042" +
    "\ufef2\043\ufef2\117\ufef2\001\002\000\014\003\ufee4\040\ufee4" +
    "\042\ufee4\043\ufee4\117\ufee4\001\002\000\014\003\ufee1\040" +
    "\ufee1\042\ufee1\043\ufee1\117\ufee1\001\002\000\014\003\ufed4" +
    "\040\ufed4\042\ufed4\043\ufed4\117\ufed4\001\002\000\014\003" +
    "\ufeea\040\ufeea\042\ufeea\043\ufeea\117\ufeea\001\002\000\014" +
    "\003\ufef3\040\ufef3\042\ufef3\043\ufef3\117\ufef3\001\002\000" +
    "\014\003\ufed2\040\ufed2\042\ufed2\043\ufed2\117\ufed2\001\002" +
    "\000\014\003\ufed1\040\ufed1\042\ufed1\043\ufed1\117\ufed1\001" +
    "\002\000\004\011\ufff9\001\002\000\004\011\150\001\002" +
    "\000\006\003\125\010\124\001\002\000\156\015\020\016" +
    "\022\017\036\020\104\021\063\022\116\023\111\024\034" +
    "\025\105\026\106\027\030\030\031\031\075\032\065\033" +
    "\115\034\074\035\077\036\110\037\067\114\062\115\040" +
    "\116\112\123\066\124\061\125\113\126\046\127\056\130" +
    "\041\131\047\132\101\133\045\134\051\135\071\136\032" +
    "\137\026\140\017\141\057\142\114\143\072\144\117\145" +
    "\120\146\054\147\042\150\050\151\033\152\037\153\025" +
    "\154\027\155\100\156\021\157\035\160\024\161\060\162" +
    "\055\001\002\000\004\011\126\001\002\000\010\011\uffd9" +
    "\107\uffd9\110\uffd9\001\002\000\012\040\130\042\uff9e\043" +
    "\uff9e\117\uff9e\001\002\000\004\041\147\001\002\000\010" +
    "\042\132\043\133\117\uff9b\001\002\000\004\117\uff9d\001" +
    "\002\000\004\117\uff9c\001\002\000\004\117\135\001\002" +
    "\000\004\013\136\001\002\000\160\011\uffd7\015\020\016" +
    "\022\017\036\020\104\021\063\022\116\023\111\024\034" +
    "\025\105\026\106\027\030\030\031\031\075\032\065\033" +
    "\115\034\074\035\077\036\110\037\067\114\062\115\040" +
    "\116\112\123\066\124\061\125\113\126\046\127\056\130" +
    "\041\131\047\132\101\133\045\134\051\135\071\136\032" +
    "\137\026\140\017\141\057\142\114\143\072\144\117\145" +
    "\120\146\054\147\042\150\050\151\033\152\037\153\025" +
    "\154\027\155\100\156\021\157\035\160\024\161\060\162" +
    "\055\001\002\000\012\040\130\042\uff9e\043\uff9e\117\uff9e" +
    "\001\002\000\004\011\141\001\002\000\010\011\uffdb\107" +
    "\uffdb\110\uffdb\001\002\000\010\042\132\043\133\117\uff9b" +
    "\001\002\000\004\117\144\001\002\000\004\013\145\001" +
    "\002\000\160\011\uffd7\015\020\016\022\017\036\020\104" +
    "\021\063\022\116\023\111\024\034\025\105\026\106\027" +
    "\030\030\031\031\075\032\065\033\115\034\074\035\077" +
    "\036\110\037\067\114\062\115\040\116\112\123\066\124" +
    "\061\125\113\126\046\127\056\130\041\131\047\132\101" +
    "\133\045\134\051\135\071\136\032\137\026\140\017\141" +
    "\057\142\114\143\072\144\117\145\120\146\054\147\042" +
    "\150\050\151\033\152\037\153\025\154\027\155\100\156" +
    "\021\157\035\160\024\161\060\162\055\001\002\000\004" +
    "\011\uffd8\001\002\000\010\042\uff9f\043\uff9f\117\uff9f\001" +
    "\002\000\010\011\uffda\107\uffda\110\uffda\001\002\000\004" +
    "\011\ufff7\001\002\000\004\011\ufffd\001\002\000\004\011" +
    "\164\001\002\000\004\010\155\001\002\000\004\117\156" +
    "\001\002\000\006\011\uffa8\014\157\001\002\000\004\117" +
    "\162\001\002\000\004\011\161\001\002\000\166\011\uffab" +
    "\012\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022" +
    "\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037" +
    "\uffab\107\uffab\110\uffab\114\uffab\115\uffab\116\uffab\123\uffab" +
    "\124\uffab\125\uffab\126\uffab\127\uffab\130\uffab\131\uffab\132" +
    "\uffab\133\uffab\134\uffab\135\uffab\136\uffab\137\uffab\140\uffab" +
    "\141\uffab\142\uffab\143\uffab\144\uffab\145\uffab\146\uffab\147" +
    "\uffab\150\uffab\151\uffab\152\uffab\153\uffab\154\uffab\155\uffab" +
    "\156\uffab\157\uffab\160\uffab\161\uffab\162\uffab\001\002\000" +
    "\006\011\uffa8\014\157\001\002\000\004\011\uffa9\001\002" +
    "\000\166\011\uffaa\012\uffaa\015\uffaa\016\uffaa\017\uffaa\020" +
    "\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\036\uffaa\037\uffaa\107\uffaa\110\uffaa\114\uffaa\115\uffaa" +
    "\116\uffaa\123\uffaa\124\uffaa\125\uffaa\126\uffaa\127\uffaa\130" +
    "\uffaa\131\uffaa\132\uffaa\133\uffaa\134\uffaa\135\uffaa\136\uffaa" +
    "\137\uffaa\140\uffaa\141\uffaa\142\uffaa\143\uffaa\144\uffaa\145" +
    "\uffaa\146\uffaa\147\uffaa\150\uffaa\151\uffaa\152\uffaa\153\uffaa" +
    "\154\uffaa\155\uffaa\156\uffaa\157\uffaa\160\uffaa\161\uffaa\162" +
    "\uffaa\001\002\000\006\002\ufffe\007\167\001\002\000\004" +
    "\002\000\001\002\000\004\117\170\001\002\000\004\010" +
    "\171\001\002\000\166\011\ufff6\012\073\015\020\016\022" +
    "\017\036\020\104\021\063\022\116\023\111\024\034\025" +
    "\105\026\106\027\030\030\031\031\075\032\065\033\115" +
    "\034\074\035\077\036\110\037\067\107\103\110\053\114" +
    "\062\115\040\116\112\123\066\124\061\125\113\126\046" +
    "\127\056\130\041\131\047\132\101\133\045\134\051\135" +
    "\071\136\032\137\026\140\017\141\057\142\114\143\072" +
    "\144\117\145\120\146\054\147\042\150\050\151\033\152" +
    "\037\153\025\154\027\155\100\156\021\157\035\160\024" +
    "\161\060\162\055\001\002\000\004\011\173\001\002\000" +
    "\006\002\ufffe\007\167\001\002\000\004\002\uffff\001\002" +
    "\000\004\011\u023a\001\002\000\004\064\177\001\002\000" +
    "\156\015\020\016\022\017\036\020\104\021\063\022\116" +
    "\023\111\024\034\025\105\026\106\027\030\030\031\031" +
    "\075\032\065\033\115\034\074\035\077\036\110\037\067" +
    "\114\062\115\040\116\112\123\066\124\061\125\113\126" +
    "\046\127\056\130\041\131\047\132\101\133\045\134\051" +
    "\135\071\136\032\137\026\140\017\141\057\142\114\143" +
    "\072\144\117\145\120\146\054\147\042\150\050\151\033" +
    "\152\037\153\025\154\027\155\100\156\021\157\035\160" +
    "\024\161\060\162\055\001\002\000\004\117\201\001\002" +
    "\000\006\014\202\065\ufff2\001\002\000\156\015\020\016" +
    "\022\017\036\020\104\021\063\022\116\023\111\024\034" +
    "\025\105\026\106\027\030\030\031\031\075\032\065\033" +
    "\115\034\074\035\077\036\110\037\067\114\062\115\040" +
    "\116\112\123\066\124\061\125\113\126\046\127\056\130" +
    "\041\131\047\132\101\133\045\134\051\135\071\136\032" +
    "\137\026\140\017\141\057\142\114\143\072\144\117\145" +
    "\120\146\054\147\042\150\050\151\033\152\037\153\025" +
    "\154\027\155\100\156\021\157\035\160\024\161\060\162" +
    "\055\001\002\000\004\065\204\001\002\000\016\010\uffed" +
    "\042\205\043\207\111\211\112\210\113\uffed\001\002\000" +
    "\006\010\uffef\113\uffef\001\002\000\006\010\uffeb\113\213" +
    "\001\002\000\006\010\ufff0\113\ufff0\001\002\000\006\010" +
    "\uffee\113\uffee\001\002\000\006\010\ufff1\113\ufff1\001\002" +
    "\000\004\010\220\001\002\000\004\064\214\001\002\000" +
    "\156\015\020\016\022\017\036\020\104\021\063\022\116" +
    "\023\111\024\034\025\105\026\106\027\030\030\031\031" +
    "\075\032\065\033\115\034\074\035\077\036\110\037\067" +
    "\114\062\115\040\116\112\123\066\124\061\125\113\126" +
    "\046\127\056\130\041\131\047\132\101\133\045\134\051" +
    "\135\071\136\032\137\026\140\017\141\057\142\114\143" +
    "\072\144\117\145\120\146\054\147\042\150\050\151\033" +
    "\152\037\153\025\154\027\155\100\156\021\157\035\160" +
    "\024\161\060\162\055\001\002\000\004\117\216\001\002" +
    "\000\004\065\217\001\002\000\004\010\uffec\001\002\000" +
    "\210\015\020\016\022\017\036\020\104\021\063\022\116" +
    "\023\111\024\034\025\105\026\106\027\030\030\031\031" +
    "\075\032\065\033\115\034\074\035\077\036\110\037\067" +
    "\045\236\046\227\064\232\074\247\075\250\076\uffe9\101" +
    "\225\102\230\103\244\114\062\115\040\116\112\117\222" +
    "\120\242\121\226\122\251\123\066\124\061\125\113\126" +
    "\046\127\056\130\041\131\047\132\101\133\045\134\051" +
    "\135\071\136\032\137\026\140\017\141\057\142\114\143" +
    "\072\144\117\145\120\146\054\147\042\150\050\151\033" +
    "\152\037\153\025\154\027\155\100\156\021\157\035\160" +
    "\024\161\060\162\055\001\002\000\004\013\u0236\001\002" +
    "\000\054\013\uff8b\044\u022f\047\272\050\273\051\274\052" +
    "\271\053\267\054\270\055\265\056\275\060\u012b\061\u0123" +
    "\062\u0126\063\u011f\064\u012a\066\u0120\067\u0129\070\u0121\071" +
    "\u011d\072\u0125\073\u022e\001\002\000\004\076\u022a\001\002" +
    "\000\210\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\045\uffd4\046\uffd4\064\uffd4\074\uffd4\075\uffd4\076\uffd4" +
    "\101\uffd4\102\uffd4\103\uffd4\114\uffd4\115\uffd4\116\uffd4\117" +
    "\uffd4\120\uffd4\121\uffd4\122\uffd4\123\uffd4\124\uffd4\125\uffd4" +
    "\126\uffd4\127\uffd4\130\uffd4\131\uffd4\132\uffd4\133\uffd4\134" +
    "\uffd4\135\uffd4\136\uffd4\137\uffd4\140\uffd4\141\uffd4\142\uffd4" +
    "\143\uffd4\144\uffd4\145\uffd4\146\uffd4\147\uffd4\150\uffd4\151" +
    "\uffd4\152\uffd4\153\uffd4\154\uffd4\155\uffd4\156\uffd4\157\uffd4" +
    "\160\uffd4\161\uffd4\162\uffd4\001\002\000\004\064\u021f\001" +
    "\002\000\010\003\uff51\013\uff51\106\uff51\001\002\000\030" +
    "\003\uff5c\013\uff5c\047\272\050\273\051\274\052\271\053" +
    "\267\054\270\055\265\056\275\106\uff5c\001\002\000\004" +
    "\010\u0215\001\002\000\210\015\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\037\uffe7\045\uffe7\046\uffe7\064\uffe7\074\uffe7" +
    "\075\uffe7\076\uffe7\101\uffe7\102\uffe7\103\uffe7\114\uffe7\115" +
    "\uffe7\116\uffe7\117\uffe7\120\uffe7\121\uffe7\122\uffe7\123\uffe7" +
    "\124\uffe7\125\uffe7\126\uffe7\127\uffe7\130\uffe7\131\uffe7\132" +
    "\uffe7\133\uffe7\134\uffe7\135\uffe7\136\uffe7\137\uffe7\140\uffe7" +
    "\141\uffe7\142\uffe7\143\uffe7\144\uffe7\145\uffe7\146\uffe7\147" +
    "\uffe7\150\uffe7\151\uffe7\152\uffe7\153\uffe7\154\uffe7\155\uffe7" +
    "\156\uffe7\157\uffe7\160\uffe7\161\uffe7\162\uffe7\001\002\000" +
    "\022\013\uffaf\045\u0131\046\u0130\074\u012c\117\u0132\120\u0134" +
    "\121\u0133\122\u012d\001\002\000\010\003\uff96\013\uff96\106" +
    "\uff96\001\002\000\012\040\130\042\uff9e\043\uff9e\117\uff9e" +
    "\001\002\000\210\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\045\uffd5\046\uffd5\064\uffd5\074\uffd5\075\uffd5" +
    "\076\uffd5\101\uffd5\102\uffd5\103\uffd5\114\uffd5\115\uffd5\116" +
    "\uffd5\117\uffd5\120\uffd5\121\uffd5\122\uffd5\123\uffd5\124\uffd5" +
    "\125\uffd5\126\uffd5\127\uffd5\130\uffd5\131\uffd5\132\uffd5\133" +
    "\uffd5\134\uffd5\135\uffd5\136\uffd5\137\uffd5\140\uffd5\141\uffd5" +
    "\142\uffd5\143\uffd5\144\uffd5\145\uffd5\146\uffd5\147\uffd5\150" +
    "\uffd5\151\uffd5\152\uffd5\153\uffd5\154\uffd5\155\uffd5\156\uffd5" +
    "\157\uffd5\160\uffd5\161\uffd5\162\uffd5\001\002\000\030\003" +
    "\uff5c\013\uff5c\047\272\050\273\051\274\052\271\053\267" +
    "\054\270\055\265\056\275\106\uff5c\001\002\000\010\003" +
    "\uff98\013\uff98\106\uff98\001\002\000\210\015\020\016\022" +
    "\017\036\020\104\021\063\022\116\023\111\024\034\025" +
    "\105\026\106\027\030\030\031\031\075\032\065\033\115" +
    "\034\074\035\077\036\110\037\067\045\236\046\227\064" +
    "\232\074\247\075\250\076\uffe9\101\225\102\230\103\244" +
    "\114\062\115\040\116\112\117\222\120\242\121\226\122" +
    "\251\123\066\124\061\125\113\126\046\127\056\130\041" +
    "\131\047\132\101\133\045\134\051\135\071\136\032\137" +
    "\026\140\017\141\057\142\114\143\072\144\117\145\120" +
    "\146\054\147\042\150\050\151\033\152\037\153\025\154" +
    "\027\155\100\156\021\157\035\160\024\161\060\162\055" +
    "\001\002\000\010\003\uff97\013\uff97\106\uff97\001\002\000" +
    "\034\003\uff91\013\uff91\060\uff93\061\uff93\062\uff93\063\uff93" +
    "\065\uff93\066\uff93\067\uff93\070\uff93\071\uff93\072\uff93\106" +
    "\uff91\001\002\000\210\015\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\045\uffd6\046\uffd6\064\uffd6\074\uffd6\075" +
    "\uffd6\076\uffd6\101\uffd6\102\uffd6\103\uffd6\114\uffd6\115\uffd6" +
    "\116\uffd6\117\uffd6\120\uffd6\121\uffd6\122\uffd6\123\uffd6\124" +
    "\uffd6\125\uffd6\126\uffd6\127\uffd6\130\uffd6\131\uffd6\132\uffd6" +
    "\133\uffd6\134\uffd6\135\uffd6\136\uffd6\137\uffd6\140\uffd6\141" +
    "\uffd6\142\uffd6\143\uffd6\144\uffd6\145\uffd6\146\uffd6\147\uffd6" +
    "\150\uffd6\151\uffd6\152\uffd6\153\uffd6\154\uffd6\155\uffd6\156" +
    "\uffd6\157\uffd6\160\uffd6\161\uffd6\162\uffd6\001\002\000\006" +
    "\003\u01e7\064\u01e8\001\002\000\210\015\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\045\uffe2\046\uffe2\064\uffe2" +
    "\074\uffe2\075\uffe2\076\uffe2\101\uffe2\102\uffe2\103\uffe2\114" +
    "\uffe2\115\uffe2\116\uffe2\117\uffe2\120\uffe2\121\uffe2\122\uffe2" +
    "\123\uffe2\124\uffe2\125\uffe2\126\uffe2\127\uffe2\130\uffe2\131" +
    "\uffe2\132\uffe2\133\uffe2\134\uffe2\135\uffe2\136\uffe2\137\uffe2" +
    "\140\uffe2\141\uffe2\142\uffe2\143\uffe2\144\uffe2\145\uffe2\146" +
    "\uffe2\147\uffe2\150\uffe2\151\uffe2\152\uffe2\153\uffe2\154\uffe2" +
    "\155\uffe2\156\uffe2\157\uffe2\160\uffe2\161\uffe2\162\uffe2\001" +
    "\002\000\210\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\045\uffd3\046\uffd3\064\uffd3\074\uffd3\075\uffd3\076" +
    "\uffd3\101\uffd3\102\uffd3\103\uffd3\114\uffd3\115\uffd3\116\uffd3" +
    "\117\uffd3\120\uffd3\121\uffd3\122\uffd3\123\uffd3\124\uffd3\125" +
    "\uffd3\126\uffd3\127\uffd3\130\uffd3\131\uffd3\132\uffd3\133\uffd3" +
    "\134\uffd3\135\uffd3\136\uffd3\137\uffd3\140\uffd3\141\uffd3\142" +
    "\uffd3\143\uffd3\144\uffd3\145\uffd3\146\uffd3\147\uffd3\150\uffd3" +
    "\151\uffd3\152\uffd3\153\uffd3\154\uffd3\155\uffd3\156\uffd3\157" +
    "\uffd3\160\uffd3\161\uffd3\162\uffd3\001\002\000\004\073\u01dc" +
    "\001\002\000\006\003\252\064\253\001\002\000\010\003" +
    "\uff50\013\uff50\106\uff50\001\002\000\004\011\u01db\001\002" +
    "\000\014\045\uff52\046\uff52\057\255\117\uff52\120\uff52\001" +
    "\002\000\004\065\302\001\002\000\012\045\uff53\046\uff53" +
    "\117\uff53\120\uff53\001\002\000\012\045\263\046\257\117" +
    "\261\120\260\001\002\000\032\003\uff5c\013\uff5c\047\272" +
    "\050\273\051\274\052\271\053\267\054\270\055\265\056" +
    "\275\065\uff5c\106\uff5c\001\002\000\032\003\uff5c\013\uff5c" +
    "\047\272\050\273\051\274\052\271\053\267\054\270\055" +
    "\265\056\275\065\uff5c\106\uff5c\001\002\000\032\003\uff5c" +
    "\013\uff5c\047\272\050\273\051\274\052\271\053\267\054" +
    "\270\055\265\056\275\065\uff5c\106\uff5c\001\002\000\012" +
    "\003\uff62\013\uff62\065\uff62\106\uff62\001\002\000\032\003" +
    "\uff5c\013\uff5c\047\272\050\273\051\274\052\271\053\267" +
    "\054\270\055\265\056\275\065\uff5c\106\uff5c\001\002\000" +
    "\012\003\uff61\013\uff61\065\uff61\106\uff61\001\002\000\014" +
    "\045\uff55\046\uff55\057\uff55\117\uff55\120\uff55\001\002\000" +
    "\014\045\uff52\046\uff52\057\255\117\uff52\120\uff52\001\002" +
    "\000\014\045\uff57\046\uff57\057\uff57\117\uff57\120\uff57\001" +
    "\002\000\014\045\uff56\046\uff56\057\uff56\117\uff56\120\uff56" +
    "\001\002\000\014\045\uff58\046\uff58\057\uff58\117\uff58\120" +
    "\uff58\001\002\000\014\045\uff5b\046\uff5b\057\uff5b\117\uff5b" +
    "\120\uff5b\001\002\000\014\045\uff5a\046\uff5a\057\uff5a\117" +
    "\uff5a\120\uff5a\001\002\000\014\045\uff59\046\uff59\057\uff59" +
    "\117\uff59\120\uff59\001\002\000\014\045\uff54\046\uff54\057" +
    "\uff54\117\uff54\120\uff54\001\002\000\012\003\uff5d\013\uff5d" +
    "\065\uff5d\106\uff5d\001\002\000\012\003\uff5f\013\uff5f\065" +
    "\uff5f\106\uff5f\001\002\000\012\003\uff5e\013\uff5e\065\uff5e" +
    "\106\uff5e\001\002\000\012\003\uff60\013\uff60\065\uff60\106" +
    "\uff60\001\002\000\004\010\303\001\002\000\024\074\304" +
    "\075\311\076\316\077\312\100\305\101\315\102\307\103" +
    "\313\117\310\001\002\000\004\073\u01d6\001\002\000\004" +
    "\013\u01d5\001\002\000\026\011\uffbf\074\uffbf\075\uffbf\076" +
    "\uffbf\077\uffbf\100\uffbf\101\uffbf\102\uffbf\103\uffbf\117\uffbf" +
    "\001\002\000\004\010\u01cc\001\002\000\010\044\u01b5\064" +
    "\u01b6\073\u01b1\001\002\000\004\064\u01aa\001\002\000\004" +
    "\013\u01a9\001\002\000\004\064\u019c\001\002\000\026\011" +
    "\uffc5\074\304\075\311\076\316\077\312\100\305\101\315" +
    "\102\307\103\313\117\310\001\002\000\004\064\320\001" +
    "\002\000\004\013\317\001\002\000\026\011\uffbe\074\uffbe" +
    "\075\uffbe\076\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe\103" +
    "\uffbe\117\uffbe\001\002\000\004\117\321\001\002\000\004" +
    "\044\u011a\001\002\000\004\013\323\001\002\000\014\045" +
    "\uff52\046\uff52\057\255\117\uff52\120\uff52\001\002\000\004" +
    "\013\325\001\002\000\014\074\326\117\332\120\327\121" +
    "\335\122\334\001\002\000\004\073\u0112\001\002\000\026" +
    "\060\362\061\353\062\346\063\360\065\uff38\066\351\067" +
    "\350\070\345\071\356\072\357\001\002\000\004\065\uff4c" +
    "\001\002\000\004\065\uff4d\001\002\000\032\044\363\060" +
    "\362\061\353\062\346\063\360\064\361\066\351\067\350" +
    "\070\345\071\356\072\357\073\354\001\002\000\004\065" +
    "\336\001\002\000\004\065\uff2b\001\002\000\004\065\uff2c" +
    "\001\002\000\004\010\337\001\002\000\024\074\304\075" +
    "\311\076\316\077\312\100\305\101\315\102\307\103\313" +
    "\117\310\001\002\000\026\011\uffc5\074\304\075\311\076" +
    "\316\077\312\100\305\101\315\102\307\103\313\117\310" +
    "\001\002\000\026\011\uffc5\074\304\075\311\076\316\077" +
    "\312\100\305\101\315\102\307\103\313\117\310\001\002" +
    "\000\004\011\343\001\002\000\026\011\uffc1\074\uffc1\075" +
    "\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1" +
    "\117\uffc1\001\002\000\004\011\uffc6\001\002\000\010\074" +
    "\uff2f\117\uff2f\120\uff2f\001\002\000\010\074\uff33\117\uff33" +
    "\120\uff33\001\002\000\004\065\uff4f\001\002\000\010\074" +
    "\uff30\117\uff30\120\uff30\001\002\000\010\074\uff31\117\uff31" +
    "\120\uff31\001\002\000\010\074\364\117\367\120\365\001" +
    "\002\000\010\074\uff34\117\uff34\120\uff34\001\002\000\004" +
    "\117\u010e\001\002\000\004\065\uff49\001\002\000\010\074" +
    "\uff2e\117\uff2e\120\uff2e\001\002\000\010\074\uff2d\117\uff2d" +
    "\120\uff2d\001\002\000\010\074\uff32\117\uff32\120\uff32\001" +
    "\002\000\010\065\u0106\074\u0104\117\u0105\001\002\000\010" +
    "\074\uff35\117\uff35\120\uff35\001\002\000\010\074\364\117" +
    "\367\120\365\001\002\000\004\073\377\001\002\000\026" +
    "\060\362\061\353\062\346\063\360\065\uff38\066\351\067" +
    "\350\070\345\071\356\072\357\001\002\000\004\065\uff46" +
    "\001\002\000\030\060\uff36\061\uff36\062\uff36\063\uff36\065" +
    "\uff36\066\uff36\067\uff36\070\uff36\071\uff36\072\uff36\073\370" +
    "\001\002\000\004\117\375\001\002\000\026\060\362\061" +
    "\353\062\346\063\360\065\uff38\066\351\067\350\070\345" +
    "\071\356\072\357\001\002\000\010\074\364\117\367\120" +
    "\365\001\002\000\004\065\uff3b\001\002\000\004\065\uff39" +
    "\001\002\000\026\060\uff37\061\uff37\062\uff37\063\uff37\065" +
    "\uff37\066\uff37\067\uff37\070\uff37\071\uff37\072\uff37\001\002" +
    "\000\004\065\uff3c\001\002\000\004\117\u0100\001\002\000" +
    "\030\060\uff36\061\uff36\062\uff36\063\uff36\065\uff36\066\uff36" +
    "\067\uff36\070\uff36\071\uff36\072\uff36\073\370\001\002\000" +
    "\026\060\362\061\353\062\346\063\360\065\uff38\066\351" +
    "\067\350\070\345\071\356\072\357\001\002\000\004\065" +
    "\uff3a\001\002\000\004\065\uff48\001\002\000\004\073\u010b" +
    "\001\002\000\006\014\u0107\065\u0109\001\002\000\004\065" +
    "\uff3f\001\002\000\010\065\u0106\074\u0104\117\u0105\001\002" +
    "\000\004\065\uff41\001\002\000\004\065\uff3d\001\002\000" +
    "\004\065\uff3e\001\002\000\004\117\u010c\001\002\000\006" +
    "\014\u0107\065\u0109\001\002\000\004\065\uff40\001\002\000" +
    "\030\044\363\060\362\061\353\062\346\063\360\064\361" +
    "\066\351\067\350\070\345\071\356\072\357\001\002\000" +
    "\004\065\uff4a\001\002\000\004\065\uff47\001\002\000\004" +
    "\065\uff4b\001\002\000\004\117\u0114\001\002\000\004\065" +
    "\uff4e\001\002\000\030\060\362\061\353\062\346\063\360" +
    "\064\u0117\065\uff42\066\351\067\350\070\345\071\356\072" +
    "\357\001\002\000\010\074\364\117\367\120\365\001\002" +
    "\000\004\065\uff45\001\002\000\010\065\u0106\074\u0104\117" +
    "\u0105\001\002\000\004\065\uff44\001\002\000\004\065\uff43" +
    "\001\002\000\020\045\236\046\227\074\247\117\u011b\120" +
    "\242\121\226\122\251\001\002\000\056\003\uff8b\013\uff8b" +
    "\047\272\050\273\051\274\052\271\053\267\054\270\055" +
    "\265\056\275\060\u012b\061\u0123\062\u0126\063\u011f\064\u012a" +
    "\066\u0120\067\u0129\070\u0121\071\u011d\072\u0125\073\u0124\106" +
    "\uff8b\001\002\000\004\013\uffb1\001\002\000\014\064\uff64" +
    "\065\uff64\074\uff64\117\uff64\120\uff64\001\002\000\014\045" +
    "\uff52\046\uff52\057\255\117\uff52\120\uff52\001\002\000\014" +
    "\064\uff68\065\uff68\074\uff68\117\uff68\120\uff68\001\002\000" +
    "\014\064\uff67\065\uff67\074\uff67\117\uff67\120\uff67\001\002" +
    "\000\014\064\uff65\065\uff65\074\uff65\117\uff65\120\uff65\001" +
    "\002\000\014\064\u017d\065\u017e\074\uff75\117\uff75\120\uff75" +
    "\001\002\000\014\064\uff6a\065\uff6a\074\uff6a\117\uff6a\120" +
    "\uff6a\001\002\000\004\117\u017a\001\002\000\014\064\uff63" +
    "\065\uff63\074\uff63\117\uff63\120\uff63\001\002\000\014\064" +
    "\uff69\065\uff69\074\uff69\117\uff69\120\uff69\001\002\000\010" +
    "\003\uff9a\013\uff9a\106\uff9a\001\002\000\010\003\uff8f\013" +
    "\uff8f\106\uff8f\001\002\000\014\064\uff66\065\uff66\074\uff66" +
    "\117\uff66\120\uff66\001\002\000\022\045\u0131\046\u0130\065" +
    "\u0138\074\u012c\117\u0132\120\u0134\121\u0133\122\u012d\001\002" +
    "\000\014\064\uff6b\065\uff6b\074\uff6b\117\uff6b\120\uff6b\001" +
    "\002\000\004\073\u0170\001\002\000\026\013\uff16\014\uff16" +
    "\045\uff16\046\uff16\065\uff16\074\uff16\117\uff16\120\uff16\121" +
    "\uff16\122\uff16\001\002\000\006\014\u016c\065\u016d\001\002" +
    "\000\026\013\uff27\014\uff27\045\uff27\046\uff27\065\uff27\074" +
    "\uff27\117\uff27\120\uff27\121\uff27\122\uff27\001\002\000\070" +
    "\013\uff0d\014\uff0d\045\uff0d\046\uff0d\047\u013d\050\u0139\051" +
    "\u014b\052\u0142\053\u0144\054\u014a\055\u013b\056\u0148\060\u0149" +
    "\061\u0143\062\u0146\063\u013f\065\uff0d\066\u013e\067\u0147\070" +
    "\u0140\071\u013a\072\u0145\074\uff0d\117\uff0d\120\uff0d\121\uff0d" +
    "\122\uff0d\001\002\000\070\013\uff0d\014\uff0d\045\uff0d\046" +
    "\uff0d\047\u013d\050\u0139\051\u014b\052\u0142\053\u0144\054\u014a" +
    "\055\u013b\056\u0148\060\u0149\061\u0143\062\u0146\063\u013f\065" +
    "\uff0d\066\u013e\067\u0147\070\u0140\071\u013a\072\u0145\074\uff0d" +
    "\117\uff0d\120\uff0d\121\uff0d\122\uff0d\001\002\000\074\013" +
    "\uff1d\014\uff1d\045\uff1d\046\uff1d\047\u013d\050\u0139\051\u014b" +
    "\052\u0142\053\u0144\054\u014a\055\u013b\056\u0148\060\u0149\061" +
    "\u0143\062\u0146\063\u013f\064\u0164\065\uff1d\066\u013e\067\u0147" +
    "\070\u0140\071\u013a\072\u0145\073\u0163\074\uff1d\117\uff1d\120" +
    "\uff1d\121\uff1d\122\uff1d\001\002\000\026\013\uff17\014\uff17" +
    "\045\uff17\046\uff17\065\uff17\074\uff17\117\uff17\120\uff17\121" +
    "\uff17\122\uff17\001\002\000\070\013\uff0d\014\uff0d\045\uff0d" +
    "\046\uff0d\047\u013d\050\u0139\051\u014b\052\u0142\053\u0144\054" +
    "\u014a\055\u013b\056\u0148\060\u0149\061\u0143\062\u0146\063\u013f" +
    "\065\uff0d\066\u013e\067\u0147\070\u0140\071\u013a\072\u0145\074" +
    "\uff0d\117\uff0d\120\uff0d\121\uff0d\122\uff0d\001\002\000\026" +
    "\013\uff28\014\uff28\045\uff28\046\uff28\065\uff28\074\uff28\117" +
    "\uff28\120\uff28\121\uff28\122\uff28\001\002\000\010\003\uff8e" +
    "\013\uff8e\106\uff8e\001\002\000\026\013\uff26\014\uff26\045" +
    "\uff26\046\uff26\065\uff26\074\uff26\117\uff26\120\uff26\121\uff26" +
    "\122\uff26\001\002\000\010\003\uff84\013\uff84\106\uff84\001" +
    "\002\000\016\045\uff0b\046\uff0b\057\uff0b\074\uff0b\117\uff0b" +
    "\120\uff0b\001\002\000\016\045\ufefd\046\ufefd\057\ufefd\074" +
    "\ufefd\117\ufefd\120\ufefd\001\002\000\016\045\uff06\046\uff06" +
    "\057\uff06\074\uff06\117\uff06\120\uff06\001\002\000\026\013" +
    "\uff23\014\uff23\045\uff23\046\uff23\065\uff23\074\uff23\117\uff23" +
    "\120\uff23\121\uff23\122\uff23\001\002\000\016\045\uff0c\046" +
    "\uff0c\057\uff0c\074\uff0c\117\uff0c\120\uff0c\001\002\000\016" +
    "\045\uff00\046\uff00\057\uff00\074\uff00\117\uff00\120\uff00\001" +
    "\002\000\016\045\uff01\046\uff01\057\uff01\074\uff01\117\uff01" +
    "\120\uff01\001\002\000\016\045\ufefe\046\ufefe\057\ufefe\074" +
    "\ufefe\117\ufefe\120\ufefe\001\002\000\016\045\u0153\046\u014c" +
    "\057\u0151\074\u014d\117\u0150\120\u014e\001\002\000\016\045" +
    "\uff09\046\uff09\057\uff09\074\uff09\117\uff09\120\uff09\001\002" +
    "\000\016\045\uff03\046\uff03\057\uff03\074\uff03\117\uff03\120" +
    "\uff03\001\002\000\016\045\uff08\046\uff08\057\uff08\074\uff08" +
    "\117\uff08\120\uff08\001\002\000\016\045\ufefc\046\ufefc\057" +
    "\ufefc\074\ufefc\117\ufefc\120\ufefc\001\002\000\016\045\uff02" +
    "\046\uff02\057\uff02\074\uff02\117\uff02\120\uff02\001\002\000" +
    "\016\045\ufeff\046\ufeff\057\ufeff\074\ufeff\117\ufeff\120\ufeff" +
    "\001\002\000\016\045\uff05\046\uff05\057\uff05\074\uff05\117" +
    "\uff05\120\uff05\001\002\000\016\045\uff04\046\uff04\057\uff04" +
    "\074\uff04\117\uff04\120\uff04\001\002\000\016\045\uff07\046" +
    "\uff07\057\uff07\074\uff07\117\uff07\120\uff07\001\002\000\016" +
    "\045\uff0a\046\uff0a\057\uff0a\074\uff0a\117\uff0a\120\uff0a\001" +
    "\002\000\070\013\uff0d\014\uff0d\045\uff0d\046\uff0d\047\u013d" +
    "\050\u0139\051\u014b\052\u0142\053\u0144\054\u014a\055\u013b\056" +
    "\u0148\060\u0149\061\u0143\062\u0146\063\u013f\065\uff0d\066\u013e" +
    "\067\u0147\070\u0140\071\u013a\072\u0145\074\uff0d\117\uff0d\120" +
    "\uff0d\121\uff0d\122\uff0d\001\002\000\004\073\u015b\001\002" +
    "\000\070\013\uff0d\014\uff0d\045\uff0d\046\uff0d\047\u013d\050" +
    "\u0139\051\u014b\052\u0142\053\u0144\054\u014a\055\u013b\056\u0148" +
    "\060\u0149\061\u0143\062\u0146\063\u013f\065\uff0d\066\u013e\067" +
    "\u0147\070\u0140\071\u013a\072\u0145\074\uff0d\117\uff0d\120\uff0d" +
    "\121\uff0d\122\uff0d\001\002\000\026\013\uff0e\014\uff0e\045" +
    "\uff0e\046\uff0e\065\uff0e\074\uff0e\117\uff0e\120\uff0e\121\uff0e" +
    "\122\uff0e\001\002\000\072\013\ufefa\014\ufefa\045\ufefa\046" +
    "\ufefa\047\ufefa\050\ufefa\051\ufefa\052\ufefa\053\ufefa\054\ufefa" +
    "\055\ufefa\056\ufefa\060\ufefa\061\ufefa\062\ufefa\063\ufefa\065" +
    "\ufefa\066\ufefa\067\ufefa\070\ufefa\071\ufefa\072\ufefa\073\u0156" +
    "\074\ufefa\117\ufefa\120\ufefa\121\ufefa\122\ufefa\001\002\000" +
    "\006\074\u014d\117\u0150\001\002\000\026\013\uff14\014\uff14" +
    "\045\uff14\046\uff14\065\uff14\074\uff14\117\uff14\120\uff14\121" +
    "\uff14\122\uff14\001\002\000\070\013\uff0d\014\uff0d\045\uff0d" +
    "\046\uff0d\047\u013d\050\u0139\051\u014b\052\u0142\053\u0144\054" +
    "\u014a\055\u013b\056\u0148\060\u0149\061\u0143\062\u0146\063\u013f" +
    "\065\uff0d\066\u013e\067\u0147\070\u0140\071\u013a\072\u0145\074" +
    "\uff0d\117\uff0d\120\uff0d\121\uff0d\122\uff0d\001\002\000\026" +
    "\013\uff13\014\uff13\045\uff13\046\uff13\065\uff13\074\uff13\117" +
    "\uff13\120\uff13\121\uff13\122\uff13\001\002\000\026\013\uff15" +
    "\014\uff15\045\uff15\046\uff15\065\uff15\074\uff15\117\uff15\120" +
    "\uff15\121\uff15\122\uff15\001\002\000\004\117\u0159\001\002" +
    "\000\070\013\uff0d\014\uff0d\045\uff0d\046\uff0d\047\u013d\050" +
    "\u0139\051\u014b\052\u0142\053\u0144\054\u014a\055\u013b\056\u0148" +
    "\060\u0149\061\u0143\062\u0146\063\u013f\065\uff0d\066\u013e\067" +
    "\u0147\070\u0140\071\u013a\072\u0145\074\uff0d\117\uff0d\120\uff0d" +
    "\121\uff0d\122\uff0d\001\002\000\026\013\uff10\014\uff10\045" +
    "\uff10\046\uff10\065\uff10\074\uff10\117\uff10\120\uff10\121\uff10" +
    "\122\uff10\001\002\000\070\013\ufefb\014\ufefb\045\ufefb\046" +
    "\ufefb\047\ufefb\050\ufefb\051\ufefb\052\ufefb\053\ufefb\054\ufefb" +
    "\055\ufefb\056\ufefb\060\ufefb\061\ufefb\062\ufefb\063\ufefb\065" +
    "\ufefb\066\ufefb\067\ufefb\070\ufefb\071\ufefb\072\ufefb\074\ufefb" +
    "\117\ufefb\120\ufefb\121\ufefb\122\ufefb\001\002\000\026\013" +
    "\uff11\014\uff11\045\uff11\046\uff11\065\uff11\074\uff11\117\uff11" +
    "\120\uff11\121\uff11\122\uff11\001\002\000\004\117\u015c\001" +
    "\002\000\070\013\uff0d\014\uff0d\045\uff0d\046\uff0d\047\u013d" +
    "\050\u0139\051\u014b\052\u0142\053\u0144\054\u014a\055\u013b\056" +
    "\u0148\060\u0149\061\u0143\062\u0146\063\u013f\065\uff0d\066\u013e" +
    "\067\u0147\070\u0140\071\u013a\072\u0145\074\uff0d\117\uff0d\120" +
    "\uff0d\121\uff0d\122\uff0d\001\002\000\026\013\uff0f\014\uff0f" +
    "\045\uff0f\046\uff0f\065\uff0f\074\uff0f\117\uff0f\120\uff0f\121" +
    "\uff0f\122\uff0f\001\002\000\026\013\uff12\014\uff12\045\uff12" +
    "\046\uff12\065\uff12\074\uff12\117\uff12\120\uff12\121\uff12\122" +
    "\uff12\001\002\000\026\013\uff21\014\uff21\045\uff21\046\uff21" +
    "\065\uff21\074\uff21\117\uff21\120\uff21\121\uff21\122\uff21\001" +
    "\002\000\026\013\uff2a\014\uff2a\045\uff2a\046\uff2a\065\uff2a" +
    "\074\uff2a\117\uff2a\120\uff2a\121\uff2a\122\uff2a\001\002\000" +
    "\016\045\u0153\046\u014c\057\u0151\074\u014d\117\u0150\120\u014e" +
    "\001\002\000\016\045\u0153\046\u014c\057\u0151\074\u014d\117" +
    "\u0150\120\u014e\001\002\000\004\117\u0166\001\002\000\016" +
    "\045\u0153\046\u014c\057\u0151\074\u014d\117\u0150\120\u014e\001" +
    "\002\000\026\013\uff20\014\uff20\045\uff20\046\uff20\065\uff20" +
    "\074\uff20\117\uff20\120\uff20\121\uff20\122\uff20\001\002\000" +
    "\072\013\uff1d\014\uff1d\045\uff1d\046\uff1d\047\u013d\050\u0139" +
    "\051\u014b\052\u0142\053\u0144\054\u014a\055\u013b\056\u0148\060" +
    "\u0149\061\u0143\062\u0146\063\u013f\064\u0164\065\uff1d\066\u013e" +
    "\067\u0147\070\u0140\071\u013a\072\u0145\074\uff1d\117\uff1d\120" +
    "\uff1d\121\uff1d\122\uff1d\001\002\000\026\013\uff22\014\uff22" +
    "\045\uff22\046\uff22\065\uff22\074\uff22\117\uff22\120\uff22\121" +
    "\uff22\122\uff22\001\002\000\026\013\uff1e\014\uff1e\045\uff1e" +
    "\046\uff1e\065\uff1e\074\uff1e\117\uff1e\120\uff1e\121\uff1e\122" +
    "\uff1e\001\002\000\026\013\uff1f\014\uff1f\045\uff1f\046\uff1f" +
    "\065\uff1f\074\uff1f\117\uff1f\120\uff1f\121\uff1f\122\uff1f\001" +
    "\002\000\026\013\uff25\014\uff25\045\uff25\046\uff25\065\uff25" +
    "\074\uff25\117\uff25\120\uff25\121\uff25\122\uff25\001\002\000" +
    "\026\013\uff24\014\uff24\045\uff24\046\uff24\065\uff24\074\uff24" +
    "\117\uff24\120\uff24\121\uff24\122\uff24\001\002\000\022\045" +
    "\u0131\046\u0130\065\u0138\074\u012c\117\u0132\120\u0134\121\u0133" +
    "\122\u012d\001\002\000\010\003\uff82\013\uff82\106\uff82\001" +
    "\002\000\010\003\uff85\013\uff85\106\uff85\001\002\000\010" +
    "\003\uff83\013\uff83\106\uff83\001\002\000\004\117\u0172\001" +
    "\002\000\026\013\uff29\014\uff29\045\uff29\046\uff29\065\uff29" +
    "\074\uff29\117\uff29\120\uff29\121\uff29\122\uff29\001\002\000" +
    "\072\013\uff18\014\uff18\045\uff18\046\uff18\047\u013d\050\u0139" +
    "\051\u014b\052\u0142\053\u0144\054\u014a\055\u013b\056\u0148\060" +
    "\u0149\061\u0143\062\u0146\063\u013f\064\u0176\065\uff18\066\u013e" +
    "\067\u0147\070\u0140\071\u013a\072\u0145\074\uff18\117\uff18\120" +
    "\uff18\121\uff18\122\uff18\001\002\000\026\013\uff1c\014\uff1c" +
    "\045\uff1c\046\uff1c\065\uff1c\074\uff1c\117\uff1c\120\uff1c\121" +
    "\uff1c\122\uff1c\001\002\000\016\045\u0153\046\u014c\057\u0151" +
    "\074\u014d\117\u0150\120\u014e\001\002\000\016\045\u0153\046" +
    "\u014c\057\u0151\074\u014d\117\u0150\120\u014e\001\002\000\016" +
    "\045\u0153\046\u014c\057\u0151\074\u014d\117\u0150\120\u014e\001" +
    "\002\000\026\013\uff1b\014\uff1b\045\uff1b\046\uff1b\065\uff1b" +
    "\074\uff1b\117\uff1b\120\uff1b\121\uff1b\122\uff1b\001\002\000" +
    "\026\013\uff19\014\uff19\045\uff19\046\uff19\065\uff19\074\uff19" +
    "\117\uff19\120\uff19\121\uff19\122\uff19\001\002\000\026\013" +
    "\uff1a\014\uff1a\045\uff1a\046\uff1a\065\uff1a\074\uff1a\117\uff1a" +
    "\120\uff1a\121\uff1a\122\uff1a\001\002\000\054\003\uff8b\013" +
    "\uff8b\047\272\050\273\051\274\052\271\053\267\054\270" +
    "\055\265\056\275\060\u012b\061\u0123\062\u0126\063\u011f\064" +
    "\u012a\066\u0120\067\u0129\070\u0121\071\u011d\072\u0125\106\uff8b" +
    "\001\002\000\010\003\uff90\013\uff90\106\uff90\001\002\000" +
    "\010\074\u017f\117\u0181\120\u0180\001\002\000\010\074\uff76" +
    "\117\uff76\120\uff76\001\002\000\010\074\uff77\117\uff77\120" +
    "\uff77\001\002\000\004\073\u0196\001\002\000\034\003\uff7d" +
    "\013\uff7d\060\uff81\061\uff81\062\uff81\063\uff81\065\uff81\066" +
    "\uff81\067\uff81\070\uff81\071\uff81\072\uff81\106\uff7d\001\002" +
    "\000\036\003\uff7a\013\uff7a\060\u018e\061\u0189\062\u0185\063" +
    "\u018c\064\u018f\065\u0190\066\u0187\067\u0186\070\u0183\071\u018a" +
    "\072\u018b\106\uff7a\001\002\000\010\003\uff8d\013\uff8d\106" +
    "\uff8d\001\002\000\014\064\uff6e\065\uff6e\074\uff6e\117\uff6e" +
    "\120\uff6e\001\002\000\014\064\u017d\065\u017e\074\uff75\117" +
    "\uff75\120\uff75\001\002\000\014\064\uff72\065\uff72\074\uff72" +
    "\117\uff72\120\uff72\001\002\000\014\064\uff6f\065\uff6f\074" +
    "\uff6f\117\uff6f\120\uff6f\001\002\000\014\064\uff70\065\uff70" +
    "\074\uff70\117\uff70\120\uff70\001\002\000\010\003\uff7f\013" +
    "\uff7f\106\uff7f\001\002\000\014\064\uff73\065\uff73\074\uff73" +
    "\117\uff73\120\uff73\001\002\000\014\064\uff6d\065\uff6d\074" +
    "\uff6d\117\uff6d\120\uff6d\001\002\000\014\064\uff6c\065\uff6c" +
    "\074\uff6c\117\uff6c\120\uff6c\001\002\000\014\064\uff71\065" +
    "\uff71\074\uff71\117\uff71\120\uff71\001\002\000\010\003\uff7b" +
    "\013\uff7b\106\uff7b\001\002\000\014\064\uff74\065\uff74\074" +
    "\uff74\117\uff74\120\uff74\001\002\000\022\045\u0131\046\u0130" +
    "\065\u0138\074\u012c\117\u0132\120\u0134\121\u0133\122\u012d\001" +
    "\002\000\010\003\uff78\013\uff78\106\uff78\001\002\000\010" +
    "\003\uff7c\013\uff7c\106\uff7c\001\002\000\010\074\u017f\117" +
    "\u0181\120\u0180\001\002\000\010\003\uff79\013\uff79\106\uff79" +
    "\001\002\000\026\060\u018e\061\u0189\062\u0185\063\u018c\065" +
    "\u0190\066\u0187\067\u0186\070\u0183\071\u018a\072\u018b\001\002" +
    "\000\010\003\uff80\013\uff80\106\uff80\001\002\000\004\117" +
    "\u0197\001\002\000\036\003\uff7a\013\uff7a\060\u018e\061\u0189" +
    "\062\u0185\063\u018c\064\u018f\065\u0190\066\u0187\067\u0186\070" +
    "\u0183\071\u018a\072\u018b\106\uff7a\001\002\000\010\003\uff7e" +
    "\013\uff7e\106\uff7e\001\002\000\010\003\uff8c\013\uff8c\106" +
    "\uff8c\001\002\000\004\011\u019b\001\002\000\210\015\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\045\uffd2\046" +
    "\uffd2\064\uffd2\074\uffd2\075\uffd2\076\uffd2\101\uffd2\102\uffd2" +
    "\103\uffd2\114\uffd2\115\uffd2\116\uffd2\117\uffd2\120\uffd2\121" +
    "\uffd2\122\uffd2\123\uffd2\124\uffd2\125\uffd2\126\uffd2\127\uffd2" +
    "\130\uffd2\131\uffd2\132\uffd2\133\uffd2\134\uffd2\135\uffd2\136" +
    "\uffd2\137\uffd2\140\uffd2\141\uffd2\142\uffd2\143\uffd2\144\uffd2" +
    "\145\uffd2\146\uffd2\147\uffd2\150\uffd2\151\uffd2\152\uffd2\153" +
    "\uffd2\154\uffd2\155\uffd2\156\uffd2\157\uffd2\160\uffd2\161\uffd2" +
    "\162\uffd2\001\002\000\014\045\uff52\046\uff52\057\255\117" +
    "\uff52\120\uff52\001\002\000\004\065\u019e\001\002\000\004" +
    "\010\u019f\001\002\000\024\074\304\075\311\076\316\077" +
    "\312\100\305\101\315\102\307\103\313\117\310\001\002" +
    "\000\026\011\uffc5\074\304\075\311\076\316\077\312\100" +
    "\305\101\315\102\307\103\313\117\310\001\002\000\004" +
    "\011\u01a2\001\002\000\030\011\uffb4\074\uffb4\075\uffb4\076" +
    "\uffb4\077\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4\104\u01a4" +
    "\117\uffb4\001\002\000\026\011\uffb6\074\uffb6\075\uffb6\076" +
    "\uffb6\077\uffb6\100\uffb6\101\uffb6\102\uffb6\103\uffb6\117\uffb6" +
    "\001\002\000\004\010\u01a5\001\002\000\024\074\304\075" +
    "\311\076\316\077\312\100\305\101\315\102\307\103\313" +
    "\117\310\001\002\000\026\011\uffc5\074\304\075\311\076" +
    "\316\077\312\100\305\101\315\102\307\103\313\117\310" +
    "\001\002\000\004\011\u01a8\001\002\000\026\011\uffb5\074" +
    "\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5" +
    "\103\uffb5\117\uffb5\001\002\000\026\011\uffbd\074\uffbd\075" +
    "\uffbd\076\uffbd\077\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd" +
    "\117\uffbd\001\002\000\014\045\uff52\046\uff52\057\255\117" +
    "\uff52\120\uff52\001\002\000\004\065\u01ac\001\002\000\004" +
    "\010\u01ad\001\002\000\024\074\304\075\311\076\316\077" +
    "\312\100\305\101\315\102\307\103\313\117\310\001\002" +
    "\000\026\011\uffc5\074\304\075\311\076\316\077\312\100" +
    "\305\101\315\102\307\103\313\117\310\001\002\000\004" +
    "\011\u01b0\001\002\000\026\011\uffc2\074\uffc2\075\uffc2\076" +
    "\uffc2\077\uffc2\100\uffc2\101\uffc2\102\uffc2\103\uffc2\117\uffc2" +
    "\001\002\000\004\117\u01ca\001\002\000\026\011\uffc4\074" +
    "\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4\102\uffc4" +
    "\103\uffc4\117\uffc4\001\002\000\026\011\uffb8\074\uffb8\075" +
    "\uffb8\076\uffb8\077\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8" +
    "\117\uffb8\001\002\000\026\011\uffba\074\uffba\075\uffba\076" +
    "\uffba\077\uffba\100\uffba\101\uffba\102\uffba\103\uffba\117\uffba" +
    "\001\002\000\022\045\236\046\227\064\u01c1\074\247\117" +
    "\u011b\120\242\121\226\122\251\001\002\000\022\045\u0131" +
    "\046\u0130\065\uffaf\074\u012c\117\u0132\120\u0134\121\u0133\122" +
    "\u012d\001\002\000\026\011\uffb9\074\uffb9\075\uffb9\076\uffb9" +
    "\077\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\117\uffb9\001" +
    "\002\000\010\013\uffad\014\u01bc\065\uffad\001\002\000\004" +
    "\065\u01ba\001\002\000\004\013\u01bb\001\002\000\026\011" +
    "\uffb2\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2" +
    "\102\uffb2\103\uffb2\117\uffb2\001\002\000\020\045\u0131\046" +
    "\u0130\074\u012c\117\u0132\120\u0134\121\u0133\122\u012d\001\002" +
    "\000\006\013\uffb0\065\uffb0\001\002\000\024\013\uffaf\045" +
    "\u0131\046\u0130\065\uffaf\074\u012c\117\u0132\120\u0134\121\u0133" +
    "\122\u012d\001\002\000\006\013\uffae\065\uffae\001\002\000" +
    "\004\013\u01c9\001\002\000\014\045\uff52\046\uff52\057\255" +
    "\117\uff52\120\uff52\001\002\000\004\065\u01c3\001\002\000" +
    "\004\105\u01c4\001\002\000\020\045\236\046\227\074\247" +
    "\117\u011b\120\242\121\226\122\251\001\002\000\004\106" +
    "\u01c6\001\002\000\020\045\236\046\227\074\247\117\u011b" +
    "\120\242\121\226\122\251\001\002\000\004\013\u01c8\001" +
    "\002\000\026\011\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7" +
    "\100\uffb7\101\uffb7\102\uffb7\103\uffb7\117\uffb7\001\002\000" +
    "\026\011\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3" +
    "\101\uffb3\102\uffb3\103\uffb3\117\uffb3\001\002\000\006\044" +
    "\u01b5\064\u01b6\001\002\000\026\011\uffbb\074\uffbb\075\uffbb" +
    "\076\uffbb\077\uffbb\100\uffbb\101\uffbb\102\uffbb\103\uffbb\117" +
    "\uffbb\001\002\000\024\074\304\075\311\076\316\077\312" +
    "\100\305\101\315\102\307\103\313\117\310\001\002\000" +
    "\026\011\uffc5\074\304\075\311\076\316\077\312\100\305" +
    "\101\315\102\307\103\313\117\310\001\002\000\004\011" +
    "\u01cf\001\002\000\004\075\u01d0\001\002\000\004\064\u01d1" +
    "\001\002\000\014\045\uff52\046\uff52\057\255\117\uff52\120" +
    "\uff52\001\002\000\004\065\u01d3\001\002\000\004\013\u01d4" +
    "\001\002\000\026\011\uffc0\074\uffc0\075\uffc0\076\uffc0\077" +
    "\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\117\uffc0\001\002" +
    "\000\026\011\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100" +
    "\uffbc\101\uffbc\102\uffbc\103\uffbc\117\uffbc\001\002\000\004" +
    "\117\u01d7\001\002\000\004\044\u01d8\001\002\000\020\045" +
    "\236\046\227\074\247\117\u011b\120\242\121\226\122\251" +
    "\001\002\000\004\013\u01da\001\002\000\026\011\uffc3\074" +
    "\uffc3\075\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3" +
    "\103\uffc3\117\uffc3\001\002\000\210\015\uffd1\016\uffd1\017" +
    "\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\045\uffd1\046\uffd1\064\uffd1" +
    "\074\uffd1\075\uffd1\076\uffd1\101\uffd1\102\uffd1\103\uffd1\114" +
    "\uffd1\115\uffd1\116\uffd1\117\uffd1\120\uffd1\121\uffd1\122\uffd1" +
    "\123\uffd1\124\uffd1\125\uffd1\126\uffd1\127\uffd1\130\uffd1\131" +
    "\uffd1\132\uffd1\133\uffd1\134\uffd1\135\uffd1\136\uffd1\137\uffd1" +
    "\140\uffd1\141\uffd1\142\uffd1\143\uffd1\144\uffd1\145\uffd1\146" +
    "\uffd1\147\uffd1\150\uffd1\151\uffd1\152\uffd1\153\uffd1\154\uffd1" +
    "\155\uffd1\156\uffd1\157\uffd1\160\uffd1\161\uffd1\162\uffd1\001" +
    "\002\000\004\117\u01de\001\002\000\010\003\uff99\013\uff99" +
    "\106\uff99\001\002\000\054\003\uff86\013\uff86\047\272\050" +
    "\273\051\274\052\271\053\267\054\270\055\265\056\275" +
    "\060\u012b\061\u0123\062\u0126\063\u011f\064\u01e2\066\u0120\067" +
    "\u0129\070\u0121\071\u011d\072\u0125\106\uff86\001\002\000\014" +
    "\045\uff52\046\uff52\057\255\117\uff52\120\uff52\001\002\000" +
    "\014\064\u017d\065\u017e\074\uff75\117\uff75\120\uff75\001\002" +
    "\000\010\003\uff8a\013\uff8a\106\uff8a\001\002\000\022\045" +
    "\u0131\046\u0130\065\u0138\074\u012c\117\u0132\120\u0134\121\u0133" +
    "\122\u012d\001\002\000\010\003\uff89\013\uff89\106\uff89\001" +
    "\002\000\010\074\u017f\117\u0181\120\u0180\001\002\000\010" +
    "\003\uff88\013\uff88\106\uff88\001\002\000\010\003\uff87\013" +
    "\uff87\106\uff87\001\002\000\004\011\u01f7\001\002\000\014" +
    "\045\uff52\046\uff52\057\255\117\uff52\120\uff52\001\002\000" +
    "\004\065\u01ea\001\002\000\004\010\u01eb\001\002\000\024" +
    "\074\304\075\311\076\316\077\312\100\305\101\315\102" +
    "\307\103\313\117\310\001\002\000\026\011\uffc5\074\304" +
    "\075\311\076\316\077\312\100\305\101\315\102\307\103" +
    "\313\117\310\001\002\000\004\011\u01ee\001\002\000\212" +
    "\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\045" +
    "\uffca\046\uffca\064\uffca\074\uffca\075\uffca\076\uffca\101\uffca" +
    "\102\uffca\103\uffca\104\u01ef\114\uffca\115\uffca\116\uffca\117" +
    "\uffca\120\uffca\121\uffca\122\uffca\123\uffca\124\uffca\125\uffca" +
    "\126\uffca\127\uffca\130\uffca\131\uffca\132\uffca\133\uffca\134" +
    "\uffca\135\uffca\136\uffca\137\uffca\140\uffca\141\uffca\142\uffca" +
    "\143\uffca\144\uffca\145\uffca\146\uffca\147\uffca\150\uffca\151" +
    "\uffca\152\uffca\153\uffca\154\uffca\155\uffca\156\uffca\157\uffca" +
    "\160\uffca\161\uffca\162\uffca\001\002\000\006\003\u01f2\010" +
    "\u01f1\001\002\000\210\015\uffce\016\uffce\017\uffce\020\uffce" +
    "\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce" +
    "\036\uffce\037\uffce\045\uffce\046\uffce\064\uffce\074\uffce\075" +
    "\uffce\076\uffce\101\uffce\102\uffce\103\uffce\114\uffce\115\uffce" +
    "\116\uffce\117\uffce\120\uffce\121\uffce\122\uffce\123\uffce\124" +
    "\uffce\125\uffce\126\uffce\127\uffce\130\uffce\131\uffce\132\uffce" +
    "\133\uffce\134\uffce\135\uffce\136\uffce\137\uffce\140\uffce\141" +
    "\uffce\142\uffce\143\uffce\144\uffce\145\uffce\146\uffce\147\uffce" +
    "\150\uffce\151\uffce\152\uffce\153\uffce\154\uffce\155\uffce\156" +
    "\uffce\157\uffce\160\uffce\161\uffce\162\uffce\001\002\000\024" +
    "\074\304\075\311\076\316\077\312\100\305\101\315\102" +
    "\307\103\313\117\310\001\002\000\004\011\u01f3\001\002" +
    "\000\210\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037" +
    "\uffcb\045\uffcb\046\uffcb\064\uffcb\074\uffcb\075\uffcb\076\uffcb" +
    "\101\uffcb\102\uffcb\103\uffcb\114\uffcb\115\uffcb\116\uffcb\117" +
    "\uffcb\120\uffcb\121\uffcb\122\uffcb\123\uffcb\124\uffcb\125\uffcb" +
    "\126\uffcb\127\uffcb\130\uffcb\131\uffcb\132\uffcb\133\uffcb\134" +
    "\uffcb\135\uffcb\136\uffcb\137\uffcb\140\uffcb\141\uffcb\142\uffcb" +
    "\143\uffcb\144\uffcb\145\uffcb\146\uffcb\147\uffcb\150\uffcb\151" +
    "\uffcb\152\uffcb\153\uffcb\154\uffcb\155\uffcb\156\uffcb\157\uffcb" +
    "\160\uffcb\161\uffcb\162\uffcb\001\002\000\026\011\uffc5\074" +
    "\304\075\311\076\316\077\312\100\305\101\315\102\307" +
    "\103\313\117\310\001\002\000\004\011\u01f6\001\002\000" +
    "\210\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc" +
    "\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\045\uffcc\046\uffcc\064\uffcc\074\uffcc\075\uffcc\076\uffcc\101" +
    "\uffcc\102\uffcc\103\uffcc\114\uffcc\115\uffcc\116\uffcc\117\uffcc" +
    "\120\uffcc\121\uffcc\122\uffcc\123\uffcc\124\uffcc\125\uffcc\126" +
    "\uffcc\127\uffcc\130\uffcc\131\uffcc\132\uffcc\133\uffcc\134\uffcc" +
    "\135\uffcc\136\uffcc\137\uffcc\140\uffcc\141\uffcc\142\uffcc\143" +
    "\uffcc\144\uffcc\145\uffcc\146\uffcc\147\uffcc\150\uffcc\151\uffcc" +
    "\152\uffcc\153\uffcc\154\uffcc\155\uffcc\156\uffcc\157\uffcc\160" +
    "\uffcc\161\uffcc\162\uffcc\001\002\000\210\015\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\045\uffcd\046\uffcd\064" +
    "\uffcd\074\uffcd\075\uffcd\076\uffcd\101\uffcd\102\uffcd\103\uffcd" +
    "\114\uffcd\115\uffcd\116\uffcd\117\uffcd\120\uffcd\121\uffcd\122" +
    "\uffcd\123\uffcd\124\uffcd\125\uffcd\126\uffcd\127\uffcd\130\uffcd" +
    "\131\uffcd\132\uffcd\133\uffcd\134\uffcd\135\uffcd\136\uffcd\137" +
    "\uffcd\140\uffcd\141\uffcd\142\uffcd\143\uffcd\144\uffcd\145\uffcd" +
    "\146\uffcd\147\uffcd\150\uffcd\151\uffcd\152\uffcd\153\uffcd\154" +
    "\uffcd\155\uffcd\156\uffcd\157\uffcd\160\uffcd\161\uffcd\162\uffcd" +
    "\001\002\000\026\060\u018e\061\u0189\062\u0185\063\u018c\065" +
    "\u0190\066\u0187\067\u0186\070\u0183\071\u018a\072\u018b\001\002" +
    "\000\010\003\uff92\013\uff92\106\uff92\001\002\000\004\076" +
    "\uffea\001\002\000\010\003\uff95\013\uff95\106\uff95\001\002" +
    "\000\010\042\132\043\133\117\uff9b\001\002\000\004\117" +
    "\u01fe\001\002\000\006\013\u0201\044\u0200\001\002\000\210" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\045" +
    "\uffe8\046\uffe8\064\uffe8\074\uffe8\075\uffe8\076\uffe8\101\uffe8" +
    "\102\uffe8\103\uffe8\114\uffe8\115\uffe8\116\uffe8\117\uffe8\120" +
    "\uffe8\121\uffe8\122\uffe8\123\uffe8\124\uffe8\125\uffe8\126\uffe8" +
    "\127\uffe8\130\uffe8\131\uffe8\132\uffe8\133\uffe8\134\uffe8\135" +
    "\uffe8\136\uffe8\137\uffe8\140\uffe8\141\uffe8\142\uffe8\143\uffe8" +
    "\144\uffe8\145\uffe8\146\uffe8\147\uffe8\150\uffe8\151\uffe8\152" +
    "\uffe8\153\uffe8\154\uffe8\155\uffe8\156\uffe8\157\uffe8\160\uffe8" +
    "\161\uffe8\162\uffe8\001\002\000\022\045\236\046\227\064" +
    "\u0206\074\247\117\u011b\120\242\121\226\122\251\001\002" +
    "\000\210\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022" +
    "\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde" +
    "\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\045\uffde\046\uffde\064\uffde\074\uffde\075\uffde\076\uffde" +
    "\101\uffde\102\uffde\103\uffde\114\uffde\115\uffde\116\uffde\117" +
    "\uffde\120\uffde\121\uffde\122\uffde\123\uffde\124\uffde\125\uffde" +
    "\126\uffde\127\uffde\130\uffde\131\uffde\132\uffde\133\uffde\134" +
    "\uffde\135\uffde\136\uffde\137\uffde\140\uffde\141\uffde\142\uffde" +
    "\143\uffde\144\uffde\145\uffde\146\uffde\147\uffde\150\uffde\151" +
    "\uffde\152\uffde\153\uffde\154\uffde\155\uffde\156\uffde\157\uffde" +
    "\160\uffde\161\uffde\162\uffde\001\002\000\210\015\uffdf\016" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\045\uffdf\046\uffdf" +
    "\064\uffdf\074\uffdf\075\uffdf\076\uffdf\101\uffdf\102\uffdf\103" +
    "\uffdf\114\uffdf\115\uffdf\116\uffdf\117\uffdf\120\uffdf\121\uffdf" +
    "\122\uffdf\123\uffdf\124\uffdf\125\uffdf\126\uffdf\127\uffdf\130" +
    "\uffdf\131\uffdf\132\uffdf\133\uffdf\134\uffdf\135\uffdf\136\uffdf" +
    "\137\uffdf\140\uffdf\141\uffdf\142\uffdf\143\uffdf\144\uffdf\145" +
    "\uffdf\146\uffdf\147\uffdf\150\uffdf\151\uffdf\152\uffdf\153\uffdf" +
    "\154\uffdf\155\uffdf\156\uffdf\157\uffdf\160\uffdf\161\uffdf\162" +
    "\uffdf\001\002\000\210\015\uffdc\016\uffdc\017\uffdc\020\uffdc" +
    "\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\045\uffdc\046\uffdc\064\uffdc\074\uffdc\075" +
    "\uffdc\076\uffdc\101\uffdc\102\uffdc\103\uffdc\114\uffdc\115\uffdc" +
    "\116\uffdc\117\uffdc\120\uffdc\121\uffdc\122\uffdc\123\uffdc\124" +
    "\uffdc\125\uffdc\126\uffdc\127\uffdc\130\uffdc\131\uffdc\132\uffdc" +
    "\133\uffdc\134\uffdc\135\uffdc\136\uffdc\137\uffdc\140\uffdc\141" +
    "\uffdc\142\uffdc\143\uffdc\144\uffdc\145\uffdc\146\uffdc\147\uffdc" +
    "\150\uffdc\151\uffdc\152\uffdc\153\uffdc\154\uffdc\155\uffdc\156" +
    "\uffdc\157\uffdc\160\uffdc\161\uffdc\162\uffdc\001\002\000\210" +
    "\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\045" +
    "\uffdd\046\uffdd\064\uffdd\074\uffdd\075\uffdd\076\uffdd\101\uffdd" +
    "\102\uffdd\103\uffdd\114\uffdd\115\uffdd\116\uffdd\117\uffdd\120" +
    "\uffdd\121\uffdd\122\uffdd\123\uffdd\124\uffdd\125\uffdd\126\uffdd" +
    "\127\uffdd\130\uffdd\131\uffdd\132\uffdd\133\uffdd\134\uffdd\135" +
    "\uffdd\136\uffdd\137\uffdd\140\uffdd\141\uffdd\142\uffdd\143\uffdd" +
    "\144\uffdd\145\uffdd\146\uffdd\147\uffdd\150\uffdd\151\uffdd\152" +
    "\uffdd\153\uffdd\154\uffdd\155\uffdd\156\uffdd\157\uffdd\160\uffdd" +
    "\161\uffdd\162\uffdd\001\002\000\004\013\u0212\001\002\000" +
    "\016\003\u0207\045\uff52\046\uff52\057\255\117\uff52\120\uff52" +
    "\001\002\000\004\013\u0211\001\002\000\004\065\u0209\001" +
    "\002\000\004\105\u020a\001\002\000\020\045\236\046\227" +
    "\074\247\117\u011b\120\242\121\226\122\251\001\002\000" +
    "\006\003\u020c\106\u020d\001\002\000\004\013\u0210\001\002" +
    "\000\020\045\236\046\227\074\247\117\u011b\120\242\121" +
    "\226\122\251\001\002\000\004\013\u020f\001\002\000\210" +
    "\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\045" +
    "\uffc9\046\uffc9\064\uffc9\074\uffc9\075\uffc9\076\uffc9\101\uffc9" +
    "\102\uffc9\103\uffc9\114\uffc9\115\uffc9\116\uffc9\117\uffc9\120" +
    "\uffc9\121\uffc9\122\uffc9\123\uffc9\124\uffc9\125\uffc9\126\uffc9" +
    "\127\uffc9\130\uffc9\131\uffc9\132\uffc9\133\uffc9\134\uffc9\135" +
    "\uffc9\136\uffc9\137\uffc9\140\uffc9\141\uffc9\142\uffc9\143\uffc9" +
    "\144\uffc9\145\uffc9\146\uffc9\147\uffc9\150\uffc9\151\uffc9\152" +
    "\uffc9\153\uffc9\154\uffc9\155\uffc9\156\uffc9\157\uffc9\160\uffc9" +
    "\161\uffc9\162\uffc9\001\002\000\210\015\uffc7\016\uffc7\017" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\035\uffc7\036\uffc7\037\uffc7\045\uffc7\046\uffc7\064\uffc7" +
    "\074\uffc7\075\uffc7\076\uffc7\101\uffc7\102\uffc7\103\uffc7\114" +
    "\uffc7\115\uffc7\116\uffc7\117\uffc7\120\uffc7\121\uffc7\122\uffc7" +
    "\123\uffc7\124\uffc7\125\uffc7\126\uffc7\127\uffc7\130\uffc7\131" +
    "\uffc7\132\uffc7\133\uffc7\134\uffc7\135\uffc7\136\uffc7\137\uffc7" +
    "\140\uffc7\141\uffc7\142\uffc7\143\uffc7\144\uffc7\145\uffc7\146" +
    "\uffc7\147\uffc7\150\uffc7\151\uffc7\152\uffc7\153\uffc7\154\uffc7" +
    "\155\uffc7\156\uffc7\157\uffc7\160\uffc7\161\uffc7\162\uffc7\001" +
    "\002\000\210\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\045\uffc8\046\uffc8\064\uffc8\074\uffc8\075\uffc8\076" +
    "\uffc8\101\uffc8\102\uffc8\103\uffc8\114\uffc8\115\uffc8\116\uffc8" +
    "\117\uffc8\120\uffc8\121\uffc8\122\uffc8\123\uffc8\124\uffc8\125" +
    "\uffc8\126\uffc8\127\uffc8\130\uffc8\131\uffc8\132\uffc8\133\uffc8" +
    "\134\uffc8\135\uffc8\136\uffc8\137\uffc8\140\uffc8\141\uffc8\142" +
    "\uffc8\143\uffc8\144\uffc8\145\uffc8\146\uffc8\147\uffc8\150\uffc8" +
    "\151\uffc8\152\uffc8\153\uffc8\154\uffc8\155\uffc8\156\uffc8\157" +
    "\uffc8\160\uffc8\161\uffc8\162\uffc8\001\002\000\210\015\uffac" +
    "\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024" +
    "\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac" +
    "\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\045\uffac\046" +
    "\uffac\064\uffac\074\uffac\075\uffac\076\uffac\101\uffac\102\uffac" +
    "\103\uffac\114\uffac\115\uffac\116\uffac\117\uffac\120\uffac\121" +
    "\uffac\122\uffac\123\uffac\124\uffac\125\uffac\126\uffac\127\uffac" +
    "\130\uffac\131\uffac\132\uffac\133\uffac\134\uffac\135\uffac\136" +
    "\uffac\137\uffac\140\uffac\141\uffac\142\uffac\143\uffac\144\uffac" +
    "\145\uffac\146\uffac\147\uffac\150\uffac\151\uffac\152\uffac\153" +
    "\uffac\154\uffac\155\uffac\156\uffac\157\uffac\160\uffac\161\uffac" +
    "\162\uffac\001\002\000\004\013\u0214\001\002\000\210\015" +
    "\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\045\uffe3" +
    "\046\uffe3\064\uffe3\074\uffe3\075\uffe3\076\uffe3\101\uffe3\102" +
    "\uffe3\103\uffe3\114\uffe3\115\uffe3\116\uffe3\117\uffe3\120\uffe3" +
    "\121\uffe3\122\uffe3\123\uffe3\124\uffe3\125\uffe3\126\uffe3\127" +
    "\uffe3\130\uffe3\131\uffe3\132\uffe3\133\uffe3\134\uffe3\135\uffe3" +
    "\136\uffe3\137\uffe3\140\uffe3\141\uffe3\142\uffe3\143\uffe3\144" +
    "\uffe3\145\uffe3\146\uffe3\147\uffe3\150\uffe3\151\uffe3\152\uffe3" +
    "\153\uffe3\154\uffe3\155\uffe3\156\uffe3\157\uffe3\160\uffe3\161" +
    "\uffe3\162\uffe3\001\002\000\024\074\304\075\311\076\316" +
    "\077\312\100\305\101\315\102\307\103\313\117\310\001" +
    "\002\000\026\011\uffc5\074\304\075\311\076\316\077\312" +
    "\100\305\101\315\102\307\103\313\117\310\001\002\000" +
    "\004\011\u0218\001\002\000\004\075\u0219\001\002\000\004" +
    "\064\u021a\001\002\000\014\045\uff52\046\uff52\057\255\117" +
    "\uff52\120\uff52\001\002\000\004\065\u021c\001\002\000\004" +
    "\013\u021d\001\002\000\210\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf" +
    "\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\045\uffcf\046\uffcf\064\uffcf\074\uffcf" +
    "\075\uffcf\076\uffcf\101\uffcf\102\uffcf\103\uffcf\114\uffcf\115" +
    "\uffcf\116\uffcf\117\uffcf\120\uffcf\121\uffcf\122\uffcf\123\uffcf" +
    "\124\uffcf\125\uffcf\126\uffcf\127\uffcf\130\uffcf\131\uffcf\132" +
    "\uffcf\133\uffcf\134\uffcf\135\uffcf\136\uffcf\137\uffcf\140\uffcf" +
    "\141\uffcf\142\uffcf\143\uffcf\144\uffcf\145\uffcf\146\uffcf\147" +
    "\uffcf\150\uffcf\151\uffcf\152\uffcf\153\uffcf\154\uffcf\155\uffcf" +
    "\156\uffcf\157\uffcf\160\uffcf\161\uffcf\162\uffcf\001\002\000" +
    "\010\003\uff94\013\uff94\106\uff94\001\002\000\004\117\321" +
    "\001\002\000\004\013\u0221\001\002\000\014\045\uff52\046" +
    "\uff52\057\255\117\uff52\120\uff52\001\002\000\004\013\u0223" +
    "\001\002\000\014\074\326\117\332\120\327\121\335\122" +
    "\334\001\002\000\004\065\u0225\001\002\000\004\010\u0226" +
    "\001\002\000\024\074\304\075\311\076\316\077\312\100" +
    "\305\101\315\102\307\103\313\117\310\001\002\000\026" +
    "\011\uffc5\074\304\075\311\076\316\077\312\100\305\101" +
    "\315\102\307\103\313\117\310\001\002\000\004\011\u0229" +
    "\001\002\000\210\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\045\uffd0\046\uffd0\064\uffd0\074\uffd0\075\uffd0" +
    "\076\uffd0\101\uffd0\102\uffd0\103\uffd0\114\uffd0\115\uffd0\116" +
    "\uffd0\117\uffd0\120\uffd0\121\uffd0\122\uffd0\123\uffd0\124\uffd0" +
    "\125\uffd0\126\uffd0\127\uffd0\130\uffd0\131\uffd0\132\uffd0\133" +
    "\uffd0\134\uffd0\135\uffd0\136\uffd0\137\uffd0\140\uffd0\141\uffd0" +
    "\142\uffd0\143\uffd0\144\uffd0\145\uffd0\146\uffd0\147\uffd0\150" +
    "\uffd0\151\uffd0\152\uffd0\153\uffd0\154\uffd0\155\uffd0\156\uffd0" +
    "\157\uffd0\160\uffd0\161\uffd0\162\uffd0\001\002\000\020\045" +
    "\236\046\227\074\247\117\u011b\120\242\121\226\122\251" +
    "\001\002\000\004\013\u022c\001\002\000\004\011\u022d\001" +
    "\002\000\006\011\ufff5\110\ufff5\001\002\000\004\117\u0233" +
    "\001\002\000\022\045\236\046\227\064\u0206\074\247\117" +
    "\u011b\120\242\121\226\122\251\001\002\000\210\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\045\uffe0\046" +
    "\uffe0\064\uffe0\074\uffe0\075\uffe0\076\uffe0\101\uffe0\102\uffe0" +
    "\103\uffe0\114\uffe0\115\uffe0\116\uffe0\117\uffe0\120\uffe0\121" +
    "\uffe0\122\uffe0\123\uffe0\124\uffe0\125\uffe0\126\uffe0\127\uffe0" +
    "\130\uffe0\131\uffe0\132\uffe0\133\uffe0\134\uffe0\135\uffe0\136" +
    "\uffe0\137\uffe0\140\uffe0\141\uffe0\142\uffe0\143\uffe0\144\uffe0" +
    "\145\uffe0\146\uffe0\147\uffe0\150\uffe0\151\uffe0\152\uffe0\153" +
    "\uffe0\154\uffe0\155\uffe0\156\uffe0\157\uffe0\160\uffe0\161\uffe0" +
    "\162\uffe0\001\002\000\210\015\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1" +
    "\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\036\uffe1\037\uffe1\045\uffe1\046\uffe1\064\uffe1\074\uffe1" +
    "\075\uffe1\076\uffe1\101\uffe1\102\uffe1\103\uffe1\114\uffe1\115" +
    "\uffe1\116\uffe1\117\uffe1\120\uffe1\121\uffe1\122\uffe1\123\uffe1" +
    "\124\uffe1\125\uffe1\126\uffe1\127\uffe1\130\uffe1\131\uffe1\132" +
    "\uffe1\133\uffe1\134\uffe1\135\uffe1\136\uffe1\137\uffe1\140\uffe1" +
    "\141\uffe1\142\uffe1\143\uffe1\144\uffe1\145\uffe1\146\uffe1\147" +
    "\uffe1\150\uffe1\151\uffe1\152\uffe1\153\uffe1\154\uffe1\155\uffe1" +
    "\156\uffe1\157\uffe1\160\uffe1\161\uffe1\162\uffe1\001\002\000" +
    "\210\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031" +
    "\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6" +
    "\045\uffe6\046\uffe6\064\uffe6\074\uffe6\075\uffe6\076\uffe6\101" +
    "\uffe6\102\uffe6\103\uffe6\114\uffe6\115\uffe6\116\uffe6\117\uffe6" +
    "\120\uffe6\121\uffe6\122\uffe6\123\uffe6\124\uffe6\125\uffe6\126" +
    "\uffe6\127\uffe6\130\uffe6\131\uffe6\132\uffe6\133\uffe6\134\uffe6" +
    "\135\uffe6\136\uffe6\137\uffe6\140\uffe6\141\uffe6\142\uffe6\143" +
    "\uffe6\144\uffe6\145\uffe6\146\uffe6\147\uffe6\150\uffe6\151\uffe6" +
    "\152\uffe6\153\uffe6\154\uffe6\155\uffe6\156\uffe6\157\uffe6\160" +
    "\uffe6\161\uffe6\162\uffe6\001\002\000\052\013\uff8b\044\u0234" +
    "\047\272\050\273\051\274\052\271\053\267\054\270\055" +
    "\265\056\275\060\u012b\061\u0123\062\u0126\063\u011f\064\u012a" +
    "\066\u0120\067\u0129\070\u0121\071\u011d\072\u0125\001\002\000" +
    "\022\045\236\046\227\064\u0206\074\247\117\u011b\120\242" +
    "\121\226\122\251\001\002\000\210\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\045\uffe5\046\uffe5\064\uffe5" +
    "\074\uffe5\075\uffe5\076\uffe5\101\uffe5\102\uffe5\103\uffe5\114" +
    "\uffe5\115\uffe5\116\uffe5\117\uffe5\120\uffe5\121\uffe5\122\uffe5" +
    "\123\uffe5\124\uffe5\125\uffe5\126\uffe5\127\uffe5\130\uffe5\131" +
    "\uffe5\132\uffe5\133\uffe5\134\uffe5\135\uffe5\136\uffe5\137\uffe5" +
    "\140\uffe5\141\uffe5\142\uffe5\143\uffe5\144\uffe5\145\uffe5\146" +
    "\uffe5\147\uffe5\150\uffe5\151\uffe5\152\uffe5\153\uffe5\154\uffe5" +
    "\155\uffe5\156\uffe5\157\uffe5\160\uffe5\161\uffe5\162\uffe5\001" +
    "\002\000\210\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\045\uffe4\046\uffe4\064\uffe4\074\uffe4\075\uffe4\076" +
    "\uffe4\101\uffe4\102\uffe4\103\uffe4\114\uffe4\115\uffe4\116\uffe4" +
    "\117\uffe4\120\uffe4\121\uffe4\122\uffe4\123\uffe4\124\uffe4\125" +
    "\uffe4\126\uffe4\127\uffe4\130\uffe4\131\uffe4\132\uffe4\133\uffe4" +
    "\134\uffe4\135\uffe4\136\uffe4\137\uffe4\140\uffe4\141\uffe4\142" +
    "\uffe4\143\uffe4\144\uffe4\145\uffe4\146\uffe4\147\uffe4\150\uffe4" +
    "\151\uffe4\152\uffe4\153\uffe4\154\uffe4\155\uffe4\156\uffe4\157" +
    "\uffe4\160\uffe4\161\uffe4\162\uffe4\001\002\000\004\117\u0238" +
    "\001\002\000\006\014\202\065\ufff2\001\002\000\004\065" +
    "\ufff3\001\002\000\006\011\ufff4\110\ufff4\001\002\000\004" +
    "\011\ufffb\001\002\000\004\013\u0249\001\002\000\012\040" +
    "\130\042\uff9e\043\uff9e\117\uff9e\001\002\000\010\042\132" +
    "\043\133\117\uff9b\001\002\000\004\117\uffa6\001\002\000" +
    "\004\117\u0241\001\002\000\006\013\uffa5\044\uffa5\001\002" +
    "\000\006\013\u0245\044\u0243\001\002\000\020\045\236\046" +
    "\227\074\247\117\u011b\120\242\121\226\122\251\001\002" +
    "\000\164\011\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021" +
    "\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4" +
    "\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036" +
    "\uffa4\037\uffa4\107\uffa4\110\uffa4\114\uffa4\115\uffa4\116\uffa4" +
    "\123\uffa4\124\uffa4\125\uffa4\126\uffa4\127\uffa4\130\uffa4\131" +
    "\uffa4\132\uffa4\133\uffa4\134\uffa4\135\uffa4\136\uffa4\137\uffa4" +
    "\140\uffa4\141\uffa4\142\uffa4\143\uffa4\144\uffa4\145\uffa4\146" +
    "\uffa4\147\uffa4\150\uffa4\151\uffa4\152\uffa4\153\uffa4\154\uffa4" +
    "\155\uffa4\156\uffa4\157\uffa4\160\uffa4\161\uffa4\162\uffa4\001" +
    "\002\000\164\011\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2" +
    "\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027" +
    "\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2" +
    "\036\uffa2\037\uffa2\107\uffa2\110\uffa2\114\uffa2\115\uffa2\116" +
    "\uffa2\123\uffa2\124\uffa2\125\uffa2\126\uffa2\127\uffa2\130\uffa2" +
    "\131\uffa2\132\uffa2\133\uffa2\134\uffa2\135\uffa2\136\uffa2\137" +
    "\uffa2\140\uffa2\141\uffa2\142\uffa2\143\uffa2\144\uffa2\145\uffa2" +
    "\146\uffa2\147\uffa2\150\uffa2\151\uffa2\152\uffa2\153\uffa2\154" +
    "\uffa2\155\uffa2\156\uffa2\157\uffa2\160\uffa2\161\uffa2\162\uffa2" +
    "\001\002\000\004\013\u0247\001\002\000\164\011\uffa1\015" +
    "\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1" +
    "\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032" +
    "\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\107\uffa1" +
    "\110\uffa1\114\uffa1\115\uffa1\116\uffa1\123\uffa1\124\uffa1\125" +
    "\uffa1\126\uffa1\127\uffa1\130\uffa1\131\uffa1\132\uffa1\133\uffa1" +
    "\134\uffa1\135\uffa1\136\uffa1\137\uffa1\140\uffa1\141\uffa1\142" +
    "\uffa1\143\uffa1\144\uffa1\145\uffa1\146\uffa1\147\uffa1\150\uffa1" +
    "\151\uffa1\152\uffa1\153\uffa1\154\uffa1\155\uffa1\156\uffa1\157" +
    "\uffa1\160\uffa1\161\uffa1\162\uffa1\001\002\000\004\013\uffa0" +
    "\001\002\000\164\011\uffa3\015\uffa3\016\uffa3\017\uffa3\020" +
    "\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3" +
    "\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035" +
    "\uffa3\036\uffa3\037\uffa3\107\uffa3\110\uffa3\114\uffa3\115\uffa3" +
    "\116\uffa3\123\uffa3\124\uffa3\125\uffa3\126\uffa3\127\uffa3\130" +
    "\uffa3\131\uffa3\132\uffa3\133\uffa3\134\uffa3\135\uffa3\136\uffa3" +
    "\137\uffa3\140\uffa3\141\uffa3\142\uffa3\143\uffa3\144\uffa3\145" +
    "\uffa3\146\uffa3\147\uffa3\150\uffa3\151\uffa3\152\uffa3\153\uffa3" +
    "\154\uffa3\155\uffa3\156\uffa3\157\uffa3\160\uffa3\161\uffa3\162" +
    "\uffa3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0247\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\063" +
    "\004\051\005\043\006\067\007\075\011\101\013\022\016" +
    "\042\047\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\137\u023c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\u023a" +
    "\005\043\006\067\011\101\013\022\016\042\047\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\151\004\051\005\043\006\067\007\075" +
    "\011\101\013\022\016\042\047\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\150" +
    "\011\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\120\006\067" +
    "\011\101\047\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\130\001\001\000\002\001\001" +
    "\000\004\015\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\136" +
    "\050\137\001\001\000\004\014\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\136\050\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\074\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\171\004\051\005\043" +
    "\006\067\007\075\011\101\013\022\016\042\047\106\001" +
    "\001\000\002\001\001\000\004\074\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\177\001\001\000\002\001\001\000\004\054\202\001\001" +
    "\000\004\013\u0236\001\001\000\002\001\001\000\004\055" +
    "\205\001\001\000\002\001\001\000\004\056\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\010\244\013\233\020\220\031\236\033\242\041\234" +
    "\043\223\044\245\053\230\057\222\067\232\072\240\075" +
    "\237\001\001\000\002\001\001\000\012\024\u011d\063\u0126" +
    "\066\u0121\073\u0127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\265" +
    "\026\u021d\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\027\u0212\117\u01b7\122\u0134\123\u012e\127\u0136\001\001" +
    "\000\002\001\001\000\004\014\u01fb\001\001\000\002\001" +
    "\001\000\006\024\265\026\u01fa\001\001\000\002\001\001" +
    "\000\034\010\244\013\233\020\220\031\236\033\242\041" +
    "\234\043\223\044\245\053\230\057\u01f9\067\232\072\240" +
    "\075\237\001\001\000\002\001\001\000\004\142\u01f7\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\u01dc\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\253" +
    "\115\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\116\261\001\001\000\006\024\265\026\300\001\001" +
    "\000\006\024\265\026\277\001\001\000\006\024\265\026" +
    "\276\001\001\000\002\001\001\000\006\024\265\026\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\275\115\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\034\313\051\305\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\035\u01b6\036\u01b1\037\u01b2\061\u01b3\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\034" +
    "\340\040\u0199\051\305\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\323\115\255" +
    "\001\001\000\002\001\001\000\010\100\332\103\330\104" +
    "\327\001\001\000\004\102\u0112\001\001\000\006\105\u0110" +
    "\114\371\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\101\346\106\354\114\351\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\337\051\305\001\001\000\010\034\340\040\341" +
    "\051\305\001\001\000\010\034\340\040\343\051\305\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\110\u010f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\107\u0102\001\001\000\002\001\001\000\004\110\365\001" +
    "\001\000\002\001\001\000\006\105\375\114\371\001\001" +
    "\000\002\001\001\000\004\113\370\001\001\000\002\001" +
    "\001\000\006\105\372\114\371\001\001\000\004\110\373" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\113\u0100" +
    "\001\001\000\006\105\u0101\114\371\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\112\u0107" +
    "\001\001\000\002\001\001\000\004\107\u0109\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\112\u010c\001\001\000\002\001\001\000" +
    "\006\106\u010e\114\351\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\111\u0115\114\u0114\001\001\000\004\110\u0118" +
    "\001\001\000\002\001\001\000\004\107\u0117\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\u011b\031\236" +
    "\067\232\072\240\001\001\000\012\024\u011d\063\u0126\066" +
    "\u0121\073\u0127\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\u0198\115\255\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\133\u017b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\070\u0135\117\u012d\122\u0134\123\u012e\127" +
    "\u0136\001\001\000\002\001\001\000\004\121\u0170\001\001" +
    "\000\002\001\001\000\004\071\u016d\001\001\000\002\001" +
    "\001\000\006\130\u016a\131\u0140\001\001\000\006\130\u0169" +
    "\131\u0140\001\001\000\012\120\u015f\124\u015e\126\u0160\131" +
    "\u0161\001\001\000\002\001\001\000\006\130\u013b\131\u0140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\132\u014e\135\u0151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\130\u015d\131\u0140" +
    "\001\001\000\002\001\001\000\006\130\u0159\131\u0140\001" +
    "\001\000\002\001\001\000\004\136\u0156\001\001\000\004" +
    "\135\u0154\001\001\000\002\001\001\000\006\130\u0153\131" +
    "\u0140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\130\u0157\131\u0140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\130\u015c\131\u0140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\132\u0168\135\u0151\001\001\000\006\132\u0167\135\u0151\001" +
    "\001\000\002\001\001\000\006\132\u0164\135\u0151\001\001" +
    "\000\002\001\001\000\010\124\u0166\126\u0160\131\u0161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\070\u016e\117" +
    "\u012d\122\u0134\123\u012e\127\u0136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\125\u0172\126\u0173\131\u0174\001\001" +
    "\000\002\001\001\000\006\132\u0178\135\u0151\001\001\000" +
    "\006\132\u0177\135\u0151\001\001\000\006\132\u0176\135\u0151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\u011d\066\u0121\073\u017a\001\001\000\002" +
    "\001\001\000\004\021\u0181\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\143\u0193\001\001" +
    "\000\010\022\u0183\025\u018c\134\u0187\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\133\u0191\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\070\u0190\117\u012d\122\u0134\123\u012e\127\u0136\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u0192\001" +
    "\001\000\002\001\001\000\006\022\u0183\025\u0194\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\u0183\025" +
    "\u018c\134\u0197\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\u019c\115" +
    "\255\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\u019f\051\305\001\001\000\010\034\340\040\u01a0\051" +
    "\305\001\001\000\002\001\001\000\004\052\u01a2\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\u01a5\051" +
    "\305\001\001\000\010\034\340\040\u01a6\051\305\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\u01aa\115\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\u01ad\051\305\001\001\000\010\034" +
    "\340\040\u01ae\051\305\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\u01bf\031\236\067\232" +
    "\072\240\001\001\000\014\027\u01b8\117\u01b7\122\u0134\123" +
    "\u012e\127\u0136\001\001\000\002\001\001\000\004\030\u01bc" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\117\u01bd\122\u0134\123\u012e\127\u0136\001\001" +
    "\000\002\001\001\000\014\027\u01be\117\u01b7\122\u0134\123" +
    "\u012e\127\u0136\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\u01c1\115\255\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\u01c4\031\236\067\232\072\240" +
    "\001\001\000\002\001\001\000\012\020\u01c6\031\236\067" +
    "\232\072\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\035\u01b6\037\u01b2\061\u01ca\001" +
    "\001\000\002\001\001\000\006\034\u01cc\051\305\001\001" +
    "\000\010\034\340\040\u01cd\051\305\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\u01d1" +
    "\115\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\u01d8\031\236\067\232\072\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\024\u01de\065" +
    "\u01e0\066\u01df\001\001\000\006\023\u01e5\115\255\001\001" +
    "\000\004\133\u01e3\001\001\000\002\001\001\000\014\070" +
    "\u01e2\117\u012d\122\u0134\123\u012e\127\u0136\001\001\000\002" +
    "\001\001\000\004\021\u01e4\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\u01e8\115\255" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\034" +
    "\u01eb\051\305\001\001\000\010\034\340\040\u01ec\051\305" +
    "\001\001\000\002\001\001\000\004\045\u01ef\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\034\u01f3\051\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\034" +
    "\340\040\u01f4\051\305\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\u0183\025\u01f8\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\u01fc\001\001\000\002\001\001\000\004\076" +
    "\u01fe\001\001\000\002\001\001\000\020\020\u0204\031\236" +
    "\046\u0202\060\u0203\067\232\072\240\077\u0201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\u0207\115\255\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\020\u020a\031\236\067\232\072\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\u020d\031\236" +
    "\067\232\072\240\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\u0215\051" +
    "\305\001\001\000\010\034\340\040\u0216\051\305\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\u021a\115\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\u021f\001\001\000\002\001\001\000\006\023\u0221\115\255" +
    "\001\001\000\002\001\001\000\010\100\u0223\103\330\104" +
    "\327\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\u0226\051\305\001\001\000\010\034\340\040\u0227\051" +
    "\305\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\u022a\031\236\067\232\072\240\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\020\u0204\031\236\046\u022f\060\u0230\062\u0231\067" +
    "\232\072\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\024\u011d\066\u0121\073\u017a\001" +
    "\001\000\020\020\u0204\031\236\046\u022f\060\u0230\062\u0234" +
    "\067\232\072\240\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\u0238\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\u023d\001\001\000\004\015\u023e\001\001" +
    "\000\004\140\u023f\001\001\000\002\001\001\000\004\141" +
    "\u0241\001\001\000\006\017\u0245\032\u0243\001\001\000\012" +
    "\020\u0247\031\236\067\232\072\240\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static LinkedList<TError> TablaES = new LinkedList<TError>();
    public static LinkedList<Integer> listaParametros = new LinkedList<Integer>();
    public static LinkedList<RegistroSemantico> pilaSemantica = new LinkedList<RegistroSemantico>();

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        if(s.value != null){
            String lexema = s.value.toString();
            int fila = s.left;
            int columna = s.right;
            TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
            TablaES.add(datos);
            System.out.println("------ Recuperacion exitosa ------");
            System.out.println("\t\tLexema: "+lexema);
        }
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        if(s.value != null){
            String lexema = s.value.toString();
            int fila = s.left;
            int columna = s.right;
            TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
            TablaES.add(datos);
            System.out.println("------ Error Sintactico irrecuperable ------");
            System.out.println("\t\tLexema: "+lexema);
        }
    }

    public void recuerdoTipo(String pTipo){
        pilaSemantica.push(new RS_Tipo(pTipo));
    }

    public void recuerdoAccess(String pAcces){
        if(pAcces == null){

        }
        else{
            pilaSemantica.push(new RS_ACCESS(pAcces));
        }
    }

    public void recuerdoID(String pIdent){
        pilaSemantica.push(new RS_IDENT(pIdent));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico$actions {



  private final analisis_sintactico parser;

  /** Constructor */
  CUP$analisis_sintactico$actions(analisis_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action_part00000000(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico$parser.done_parsing();
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= pragma solidity techo numero numero punto_coma contract ident O_Parent_L BODY_CONTRACT C_Parent_L INICIO_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO_S ::= contract ident O_Parent_L BODY_CONTRACT C_Parent_L INICIO_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_S",58, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_S",58, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BODY_CONTRACT ::= EN BODY_CONTRACT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BODY_CONTRACT ::= BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BODY_CONTRACT_P ::= VAR_CONTRACT BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BODY_CONTRACT_P ::= BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BODY_CONTRACT_PP ::= STRUCTURE BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BODY_CONTRACT_PP ::= BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BODY_CONTRACT_PPP ::= FUNC BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BODY_CONTRACT_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNC ::= functionSoli ident O_Parent_R TIPO ident FUNC_PARAM C_Parent_R FUNC_MOD FUNC_RETURNS O_Parent_L CUERPO_M returnSoli EXP punto_coma C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNC ::= functionSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNC_PARAM ::= coma TIPO ident FUNC_PARAM 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNC_PARAM ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNC_MOD ::= payableSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNC_MOD ::= privateSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNC_MOD ::= publicSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNC_MOD ::= internalSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNC_MOD ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNC_RETURNS ::= returns O_Parent_R TIPO ident C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_RETURNS",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNC_RETURNS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_RETURNS",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO_M ::= CUERPO_MA CUERPO_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",45, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO_M ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",45, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPO_MA ::= TIPO VAR_ARR VAR_ACCESS ident CUERPO_ASSIGN_F 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_MA",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPO_MA ::= CUERPO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_MA",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CUERPO ::= ident igual CUERPO_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPO ::= ident punto ident igual CUERPO_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPO ::= EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPO ::= O_Parent_R FUNC_CALL_PARAMS punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPO ::= STRU 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUERPO_P ::= ASSIGN_NOT_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_P",48, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CUERPO_P ::= STRU_IF_LINE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_P",48, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CUERPO_ASSIGN_F ::= igual CUERPO_ASSIGN_FP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_F",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CUERPO_ASSIGN_F ::= punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_F",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUERPO_ASSIGN_FP ::= ASSIGN_NOT_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_FP",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CUERPO_ASSIGN_FP ::= STRU_IF_LINE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_FP",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // STRUCTURE ::= structSoli ident O_Parent_L TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // STRUCTURE ::= structSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // STRUCTURE ::= structSoli ident error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // STRUCTURE_VAR ::= TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STRUCTURE_VAR ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STRU ::= STRU_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STRU ::= STRU_FOR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STRU ::= STRU_DO_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // STRU ::= STRU_IF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STRU_WHILE ::= whileSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_WHILE",25, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STRU_WHILE ::= whileSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_WHILE",25, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STRU_FOR ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma F_EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_FOR",31, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STRU_DO_WHILE ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_DO_WHILE",33, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STRU_IF ::= ifSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L STRU_ELSE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF",34, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STRU_IF ::= ifSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF",34, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STRU_ELSE ::= elseSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",35, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // STRU_ELSE ::= elseSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",35, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STRU_ELSE ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",35, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STRU_IF_LINE ::= O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP punto_punto EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_LINE",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STRU_IF_LINE ::= O_Parent_R error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_LINE",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // STRU_IF_LINE ::= O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_LINE",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BODY_SENT_M ::= BODY_SENT BODY_SENT_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",30, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BODY_SENT_M ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",30, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BODY_SENT ::= ident BODY_SENT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BODY_SENT ::= thisSoli punto ident igual EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BODY_SENT ::= whileSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BODY_SENT ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma F_EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BODY_SENT ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BODY_SENT ::= STRU_IF_ELSE_IN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BODY_SENT ::= returnSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BODY_SENT ::= breakSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BODY_SENT ::= continueSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BODY_SENT_P ::= punto ident BODY_SENT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BODY_SENT_P ::= BODY_SENT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BODY_SENT_PP ::= BODY_ASSIGN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",47, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // BODY_SENT_PP ::= BODY_FUN_CALL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",47, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BODY_SENT_PP ::= igual O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP punto_punto EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",47, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // STRU_IF_ELSE_IN ::= ifSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L STRU_ELSE_IN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_ELSE_IN",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // STRU_ELSE_IN ::= elseSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",40, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // STRU_ELSE_IN ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",40, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BODY_ASSIGN ::= igual EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_ASSIGN",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // BODY_FUN_CALL ::= O_Parent_R FUNC_CALL_PARAMS C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_FUN_CALL",29, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FOR_VAR ::= ident igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FOR_VAR",32, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FUNC_CALL_PARAMS ::= FS_EXP FUNC_CALL_PARAMS_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMS",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FUNC_CALL_PARAMS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMS",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FUNC_CALL_PARAMS_P ::= coma FS_EXP FUNC_CALL_PARAMS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMS_P",22, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FUNC_CALL_PARAMS_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMS_P",22, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ASSIGN_NOT_VAR ::= EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ASSIGN_NOT_VAR",46, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EN ::= enumSoli ident O_Parent_L ident EN_IDENT C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EN ::= enumSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EN_IDENT ::= coma ident EN_IDENT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EN_IDENT ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$0 ::= 
            {
              String RESULT =null;
		int inputTipoleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int inputTiporight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String inputTipo = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
 recuerdoTipo(inputTipo); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",93, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$1 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int inputTipoleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int inputTiporight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String inputTipo = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int inputAccessleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int inputAccessright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String inputAccess = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
 recuerdoAccess(inputAccess); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",94, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$2 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int inputTipoleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).left;
		int inputTiporight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).right;
		String inputTipo = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)).value;
		int inputAccessleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int inputAccessright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String inputAccess = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
 recuerdoID(b); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",95, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VAR_CONTRACT ::= TIPO NT$0 VAR_ARR VAR_ACCESS NT$1 ident NT$2 VAR_CONTRACT_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int inputTipoleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).left;
		int inputTiporight = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).right;
		String inputTipo = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)).value;
		int inputAccessleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).left;
		int inputAccessright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).right;
		String inputAccess = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VAR_CONTRACT ::= TIPO error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VAR_CONTRACT_P ::= punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VAR_CONTRACT_P ::= VAR_CONTRACT_C punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VAR_CONTRACT_C ::= igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_C",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VAR_ARR ::= O_Parent_C C_Parent_C 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VAR_ARR ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VAR_ACCESS ::= publicSoli 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VAR_ACCESS ::= privateSoli 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 RESULT = b; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VAR_ACCESS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP ::= ident EXP_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP ::= thisSoli EXP_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP ::= BODY_LIT_TF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP ::= ARIT_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXP ::= BOOL_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // BOOL_GATE ::= trueSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BOOL_GATE",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // BOOL_GATE ::= falseSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BOOL_GATE",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$3 ::= 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
listaParametros.add(Integer.parseInt(num));
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",96, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ARIT_GATE ::= numero NT$3 OP_ARIT_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARIT_GATE",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ARIT_GATE ::= numero 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		listaParametros.add(Integer.parseInt(num));
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARIT_GATE",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXP_P ::= punto ident EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXP_P ::= EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXP_P_S ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXP_P_S ::= OP_EXCL PARENT_S OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXP_P_S ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXP_P_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXP_PP ::= punto ident EXP_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PP",50, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXP_PPP ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",51, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXP_PPP ::= OP_EXCL PARENT_S OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",51, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXP_PPP ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",51, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXP_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",51, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // FUNC_CALL_CASE ::= FS_EXP FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // FUNC_CALL_CASE ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // FUNC_CALL_CASE_P ::= coma FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE_P",55, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // FUNC_CALL_CASE_P ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE_P",55, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$4 ::= 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
listaParametros.add(Integer.parseInt(num));
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",97, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OP_ARIT ::= numero NT$4 OP_ARIT_P 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OP_ARIT ::= ident OP_ARIT_A 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OP_ARIT ::= thisSoli punto ident OP_ARIT_A 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OP_ARIT ::= numero 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		listaParametros.add(Integer.parseInt(num));
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OP_ARIT_A ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_A",90, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OP_ARIT_A ::= OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_A",90, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OP_ARIT_A ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_A",90, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OP_ARIT_P ::= OP PARENT_S OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OP_ARIT_P ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // PARENT_S ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PARENT_S",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // PARENT_S ::= O_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PARENT_S",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // PARENT_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PARENT_S",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OP ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OP ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OP ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OP ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OP ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OP ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OP ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OP ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OP ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OP_EXCL ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OP_EXCL ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OP_EXCL ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OP_EXCL ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OP_EXCL ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OP_EXCL ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // OP_EXCL ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // OP_EXCL ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // OP_EXCL ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // OP_BOOL ::= NEGADO OP_BOOL_N 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // OP_BOOL_N ::= trueSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_N",76, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // OP_BOOL_N ::= falseSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_N",76, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // OP_BOOL_N ::= ident OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_N",76, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // OP_BOOL_N ::= numero OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_N",76, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // OP_BOOL_P ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // OP_BOOL_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // OP_OP_BOOL ::= igual_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // OP_OP_BOOL ::= mayor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // OP_OP_BOOL ::= mayor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // OP_OP_BOOL ::= menor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // OP_OP_BOOL ::= menor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // OP_OP_BOOL ::= diferente 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // OP_OP_BOOL ::= op_or 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // OP_OP_BOOL ::= op_and 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NEGADO ::= negacion 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NEGADO",75, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // NEGADO ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NEGADO",75, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // BODY_LIT_TF ::= numero_HEX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // BODY_LIT_TF ::= stringSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // F_EXP ::= ident F_EXP_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // F_EXP ::= thisSoli F_EXP_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // F_EXP ::= F_BODY_LIT_TF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // F_EXP ::= F_ARIT_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // F_ARIT_GATE ::= numero F_OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_ARIT_GATE",66, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // F_EXP_P ::= punto ident F_EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_P",63, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // F_EXP_P ::= F_EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_P",63, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // F_EXP_P_S ::= O_Parent_R F_FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_P_S",68, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // F_EXP_P_S ::= F_OP F_OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_P_S",68, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // F_EXP_P_S ::= igual F_OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_P_S",68, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // F_EXP_PP ::= punto ident F_EXP_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_PP",64, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // F_EXP_PPP ::= O_Parent_R F_FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_PPP",71, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // F_EXP_PPP ::= F_OP F_OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_PPP",71, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // F_EXP_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_PPP",71, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // F_FUNC_CALL_CASE ::= ident F_FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_FUNC_CALL_CASE",69, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // F_FUNC_CALL_CASE ::= thisSoli punto ident F_FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_FUNC_CALL_CASE",69, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // F_FUNC_CALL_CASE ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_FUNC_CALL_CASE",69, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // F_FUNC_CALL_CASE_P ::= coma F_FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_FUNC_CALL_CASE_P",72, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // F_FUNC_CALL_CASE_P ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_FUNC_CALL_CASE_P",72, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // F_OP_ARIT ::= numero F_OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT",70, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // F_OP_ARIT ::= ident F_OP_ARIT_Parent F_OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT",70, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // F_OP_ARIT ::= thisSoli punto ident F_OP_ARIT_Parent F_OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT",70, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // F_OP_ARIT_P ::= F_OP F_OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT_P",67, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // F_OP_ARIT_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT_P",67, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // F_OP_ARIT_Parent ::= punto ident 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT_Parent",73, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // F_OP_ARIT_Parent ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT_Parent",73, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // F_OP ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",74, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // F_OP ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",74, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // F_OP ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",74, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // F_OP ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",74, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // F_OP ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",74, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // F_OP ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",74, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // F_OP ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",74, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // F_OP ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",74, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // F_OP ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",74, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // F_BODY_LIT_TF ::= numero_HEX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_BODY_LIT_TF",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // F_BODY_LIT_TF ::= stringSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_BODY_LIT_TF",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // FS_EXP ::= ident FS_EXP_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP",77, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // FS_EXP ::= thisSoli FS_EXP_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP",77, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // FS_EXP ::= FS_BODY_LIT_TF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP",77, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // FS_EXP ::= FS_ARIT_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP",77, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // FS_EXP ::= FS_BOOL_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP",77, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // FS_BOOL_GATE ::= trueSoli FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_BOOL_GATE",85, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // FS_BOOL_GATE ::= falseSoli FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_BOOL_GATE",85, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // FS_ARIT_GATE ::= numero FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_ARIT_GATE",81, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // FS_EXP_P ::= punto ident FS_EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_P",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // FS_EXP_P ::= FS_EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_P",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // FS_EXP_P_S ::= O_Parent_R FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_P_S",82, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // FS_EXP_P_S ::= FS_OP FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_P_S",82, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // FS_EXP_P_S ::= FS_OP_OP_BOOL FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_P_S",82, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // FS_EXP_P_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_P_S",82, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // FS_EXP_PP ::= punto ident FS_EXP_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_PP",79, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // FS_EXP_PPP ::= O_Parent_R FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_PPP",83, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // FS_EXP_PPP ::= FS_OP FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_PPP",83, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // FS_EXP_PPP ::= FS_OP_OP_BOOL FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_PPP",83, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // FS_EXP_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_EXP_PPP",83, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // FS_BODY_LIT_TF ::= numero_HEX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_BODY_LIT_TF",80, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // FS_BODY_LIT_TF ::= stringSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_BODY_LIT_TF",80, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // FS_OP_BOOL ::= negacion FS_OP_BOOL_F 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // FS_OP_BOOL ::= FS_OP_BOOL_F 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // FS_OP_BOOL ::= trueSoli FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // FS_OP_BOOL ::= falseSoli FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // FS_OP_BOOL ::= numero FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // FS_OP_BOOL_F ::= ident PCLASS FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL_F",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // FS_OP_BOOL_F ::= thisSoli punto ident FS_OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL_F",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // FS_OP_BOOL_P ::= FS_OP_OP_BOOL FS_OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL_P",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // FS_OP_BOOL_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_BOOL_P",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // FS_OP_OP_BOOL ::= igual_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // FS_OP_OP_BOOL ::= mayor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // FS_OP_OP_BOOL ::= mayor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // FS_OP_OP_BOOL ::= menor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // FS_OP_OP_BOOL ::= menor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // FS_OP_OP_BOOL ::= diferente 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // FS_OP_OP_BOOL ::= op_or 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // FS_OP_OP_BOOL ::= op_and 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // FS_OP_OP_BOOL ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // FS_OP_OP_BOOL ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // FS_OP_OP_BOOL ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // FS_OP_OP_BOOL ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // FS_OP_OP_BOOL ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // FS_OP_OP_BOOL ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // FS_OP_OP_BOOL ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // FS_OP_OP_BOOL ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // FS_OP_OP_BOOL ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FS_OP_OP_BOOL",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // PCLASS ::= punto ident 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PCLASS",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // PCLASS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PCLASS",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // TIPO ::= bool 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // TIPO ::= byteSoli 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // TIPO ::= bytes 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // TIPO ::= string 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // TIPO ::= uint 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // TIPO ::= uint_O 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // TIPO ::= uint_DS 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // TIPO ::= uint_TD 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // TIPO ::= uint_SC 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // TIPO ::= uint_CVO 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // TIPO ::= uint_DCS 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // TIPO ::= intSoli 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // TIPO ::= int_O 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // TIPO ::= int_DS 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // TIPO ::= int_TD 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // TIPO ::= int_SC 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // TIPO ::= int_CVO 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // TIPO ::= int_DCS 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // TIPO ::= address 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // TIPO ::= address_payable 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // TIPO ::= charss 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // TIPO ::= ufixedSoli 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // TIPO ::= B_I 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // TIPO ::= B_II 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // TIPO ::= B_III 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // TIPO ::= B_IV 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // TIPO ::= B_V 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // TIPO ::= B_VI 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // TIPO ::= B_VII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // TIPO ::= B_IIX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // TIPO ::= B_IX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // TIPO ::= B_X 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // TIPO ::= B_XI 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // TIPO ::= B_XII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // TIPO ::= B_XIII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // TIPO ::= B_XIV 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action_part00000001(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // TIPO ::= B_XV 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // TIPO ::= B_XVI 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // TIPO ::= B_XVII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // TIPO ::= B_XIIX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // TIPO ::= B_XIX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // TIPO ::= B_XX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // TIPO ::= B_XXI 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // TIPO ::= B_XXII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // TIPO ::= B_XXIII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // TIPO ::= B_XXIV 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // TIPO ::= B_XXV 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // TIPO ::= B_XXVI 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // TIPO ::= B_XXVII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // TIPO ::= B_XXIIX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // TIPO ::= B_XXIX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // TIPO ::= B_XXX 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // TIPO ::= B_XXXI 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // TIPO ::= B_XXXII 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		RESULT = b;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$analisis_sintactico$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$analisis_sintactico$do_action_part00000000(
                               CUP$analisis_sintactico$act_num,
                               CUP$analisis_sintactico$parser,
                               CUP$analisis_sintactico$stack,
                               CUP$analisis_sintactico$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$analisis_sintactico$do_action_part00000001(
                               CUP$analisis_sintactico$act_num,
                               CUP$analisis_sintactico$parser,
                               CUP$analisis_sintactico$stack,
                               CUP$analisis_sintactico$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
