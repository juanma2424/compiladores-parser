
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symb.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\344\000\002\002\004\000\002\002\016\000\002\002" +
    "\005\000\002\140\010\000\002\140\005\000\002\140\002" +
    "\000\002\004\004\000\002\004\003\000\002\005\004\000" +
    "\002\005\003\000\002\006\004\000\002\006\003\000\002" +
    "\007\004\000\002\007\002\000\002\014\022\000\002\014" +
    "\005\000\002\075\006\000\002\075\002\000\002\076\003" +
    "\000\002\076\003\000\002\076\003\000\002\076\003\000" +
    "\002\076\002\000\002\077\007\000\002\077\002\000\002" +
    "\100\004\000\002\100\002\000\002\073\005\000\002\073" +
    "\007\000\002\073\004\000\002\073\003\000\002\104\003" +
    "\000\002\104\003\000\002\074\004\000\002\074\002\000" +
    "\002\067\014\000\002\067\005\000\002\070\010\000\002" +
    "\070\002\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\050\012\000\002\050\005" +
    "\000\002\057\016\000\002\057\005\000\002\061\014\000" +
    "\002\061\005\000\002\062\013\000\002\062\005\000\002" +
    "\063\007\000\002\063\005\000\002\063\002\000\002\064" +
    "\012\000\002\064\005\000\002\056\004\000\002\056\002" +
    "\000\002\051\004\000\002\051\010\000\002\051\012\000" +
    "\002\051\005\000\002\051\016\000\002\051\005\000\002" +
    "\051\014\000\002\051\005\000\002\051\003\000\002\051" +
    "\004\000\002\051\005\000\002\051\004\000\002\051\005" +
    "\000\002\051\004\000\002\051\005\000\002\054\005\000" +
    "\002\054\003\000\002\103\003\000\002\103\003\000\002" +
    "\103\013\000\002\071\013\000\002\071\005\000\002\072" +
    "\007\000\002\072\005\000\002\072\002\000\002\053\005" +
    "\000\002\053\005\000\002\055\006\000\002\055\005\000" +
    "\002\060\005\000\002\060\005\000\002\102\004\000\002" +
    "\011\010\000\002\011\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\002\000\002\021\007\000\002\021\005" +
    "\000\002\047\003\000\002\047\004\000\002\023\004\000" +
    "\002\017\004\000\002\017\005\000\002\017\002\000\002" +
    "\020\003\000\002\020\003\000\002\020\002\000\002\026" +
    "\004\000\002\026\004\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\131\004\000\002\131\004\000" +
    "\002\134\004\000\002\105\005\000\002\105\005\000\002" +
    "\105\003\000\002\136\004\000\002\136\004\000\002\136" +
    "\004\000\002\136\002\000\002\106\005\000\002\120\004" +
    "\000\002\120\004\000\002\120\004\000\002\120\002\000" +
    "\002\132\004\000\002\132\006\000\002\132\003\000\002" +
    "\133\004\000\002\133\003\000\002\027\004\000\002\027" +
    "\005\000\002\027\007\000\002\035\004\000\002\035\002" +
    "\000\002\135\004\000\002\135\002\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\130\003\000\002\130\003\000\002\130\003\000" +
    "\002\130\003\000\002\130\003\000\002\130\003\000\002" +
    "\130\003\000\002\130\003\000\002\130\003\000\002\032" +
    "\004\000\002\032\004\000\002\032\004\000\002\036\004" +
    "\000\002\036\002\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\046\003\000\002\046\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01cc\000\004\004\004\001\002\000\006\003\007\005" +
    "\010\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\004\014\u01ce\001\002\000\004\006\011\001" +
    "\002\000\004\161\012\001\002\000\004\161\013\001\002" +
    "\000\004\014\014\001\002\000\004\007\015\001\002\000" +
    "\004\160\016\001\002\000\004\010\017\001\002\000\166" +
    "\011\ufff4\013\075\016\021\017\023\020\037\021\105\022" +
    "\064\023\117\024\112\025\035\026\106\027\107\030\030" +
    "\031\033\032\076\033\066\034\115\035\073\036\100\037" +
    "\111\040\067\110\104\111\054\115\063\116\043\117\114" +
    "\120\071\121\062\122\113\123\047\124\057\125\042\126" +
    "\051\127\102\130\046\131\053\132\072\133\032\134\026" +
    "\135\020\136\060\137\116\140\074\141\120\142\121\143" +
    "\055\144\041\145\050\146\034\147\040\150\027\151\031" +
    "\152\101\153\022\154\036\155\025\156\061\157\056\001" +
    "\002\000\014\003\uff30\041\uff30\043\uff30\044\uff30\160\uff30" +
    "\001\002\000\014\003\uff53\041\uff53\043\uff53\044\uff53\160" +
    "\uff53\001\002\000\014\003\uff22\041\uff22\043\uff22\044\uff22" +
    "\160\uff22\001\002\000\014\003\uff52\041\uff52\043\uff52\044" +
    "\uff52\160\uff52\001\002\000\014\003\u01c3\041\127\043\uff9b" +
    "\044\uff9b\160\uff9b\001\002\000\014\003\uff20\041\uff20\043" +
    "\uff20\044\uff20\160\uff20\001\002\000\014\003\uff31\041\uff31" +
    "\043\uff31\044\uff31\160\uff31\001\002\000\014\003\uff25\041" +
    "\uff25\043\uff25\044\uff25\160\uff25\001\002\000\014\003\uff48" +
    "\041\uff48\043\uff48\044\uff48\160\uff48\001\002\000\014\003" +
    "\uff24\041\uff24\043\uff24\044\uff24\160\uff24\001\002\000\014" +
    "\003\uff32\041\uff32\043\uff32\044\uff32\160\uff32\001\002\000" +
    "\014\003\uff47\041\uff47\043\uff47\044\uff47\160\uff47\001\002" +
    "\000\014\003\uff27\041\uff27\043\uff27\044\uff27\160\uff27\001" +
    "\002\000\014\003\uff4b\041\uff4b\043\uff4b\044\uff4b\160\uff4b" +
    "\001\002\000\014\003\uff21\041\uff21\043\uff21\044\uff21\160" +
    "\uff21\001\002\000\014\003\uff51\041\uff51\043\uff51\044\uff51" +
    "\160\uff51\001\002\000\014\003\uff26\041\uff26\043\uff26\044" +
    "\uff26\160\uff26\001\002\000\014\003\uff29\041\uff29\043\uff29" +
    "\044\uff29\160\uff29\001\002\000\014\003\uff38\041\uff38\043" +
    "\uff38\044\uff38\160\uff38\001\002\000\014\003\uff50\041\uff50" +
    "\043\uff50\044\uff50\160\uff50\001\002\000\164\011\ufff4\016" +
    "\021\017\023\020\037\021\105\022\064\023\117\024\112" +
    "\025\035\026\106\027\107\030\030\031\033\032\076\033" +
    "\066\034\115\035\073\036\100\037\111\040\067\110\104" +
    "\111\054\115\063\116\043\117\114\120\071\121\062\122" +
    "\113\123\047\124\057\125\042\126\051\127\102\130\046" +
    "\131\053\132\072\133\032\134\026\135\020\136\060\137" +
    "\116\140\074\141\120\142\121\143\055\144\041\145\050" +
    "\146\034\147\040\150\027\151\031\152\101\153\022\154" +
    "\036\155\025\156\061\157\056\001\002\000\004\011\ufff8" +
    "\001\002\000\014\003\uff35\041\uff35\043\uff35\044\uff35\160" +
    "\uff35\001\002\000\014\003\uff3a\041\uff3a\043\uff3a\044\uff3a" +
    "\160\uff3a\001\002\000\014\003\uff28\041\uff28\043\uff28\044" +
    "\uff28\160\uff28\001\002\000\014\003\uff37\041\uff37\043\uff37" +
    "\044\uff37\160\uff37\001\002\000\004\011\ufffa\001\002\000" +
    "\014\003\uff34\041\uff34\043\uff34\044\uff34\160\uff34\001\002" +
    "\000\006\003\202\160\203\001\002\000\014\003\uff2a\041" +
    "\uff2a\043\uff2a\044\uff2a\160\uff2a\001\002\000\014\003\uff1e" +
    "\041\uff1e\043\uff1e\044\uff1e\160\uff1e\001\002\000\014\003" +
    "\uff39\041\uff39\043\uff39\044\uff39\160\uff39\001\002\000\014" +
    "\003\uff2f\041\uff2f\043\uff2f\044\uff2f\160\uff2f\001\002\000" +
    "\014\003\uff1f\041\uff1f\043\uff1f\044\uff1f\160\uff1f\001\002" +
    "\000\014\003\uff3c\041\uff3c\043\uff3c\044\uff3c\160\uff3c\001" +
    "\002\000\014\003\uff3f\041\uff3f\043\uff3f\044\uff3f\160\uff3f" +
    "\001\002\000\014\003\uff4e\041\uff4e\043\uff4e\044\uff4e\160" +
    "\uff4e\001\002\000\004\011\170\001\002\000\014\003\uff45" +
    "\041\uff45\043\uff45\044\uff45\160\uff45\001\002\000\014\003" +
    "\uff40\041\uff40\043\uff40\044\uff40\160\uff40\001\002\000\004" +
    "\011\ufff6\001\002\000\014\003\uff3d\041\uff3d\043\uff3d\044" +
    "\uff3d\160\uff3d\001\002\000\014\003\uff33\041\uff33\043\uff33" +
    "\044\uff33\160\uff33\001\002\000\014\003\uff43\041\uff43\043" +
    "\uff43\044\uff43\160\uff43\001\002\000\014\003\uff2d\041\uff2d" +
    "\043\uff2d\044\uff2d\160\uff2d\001\002\000\006\003\154\160" +
    "\155\001\002\000\014\003\uff46\041\uff46\043\uff46\044\uff46" +
    "\160\uff46\001\002\000\166\011\ufff4\013\075\016\021\017" +
    "\023\020\037\021\105\022\064\023\117\024\112\025\035" +
    "\026\106\027\107\030\030\031\033\032\076\033\066\034" +
    "\115\035\073\036\100\037\111\040\067\110\104\111\054" +
    "\115\063\116\043\117\114\120\071\121\062\122\113\123" +
    "\047\124\057\125\042\126\051\127\102\130\046\131\053" +
    "\132\072\133\032\134\026\135\020\136\060\137\116\140" +
    "\074\141\120\142\121\143\055\144\041\145\050\146\034" +
    "\147\040\150\027\151\031\152\101\153\022\154\036\155" +
    "\025\156\061\157\056\001\002\000\014\003\uff42\041\uff42" +
    "\043\uff42\044\uff42\160\uff42\001\002\000\014\003\uff23\041" +
    "\uff23\043\uff23\044\uff23\160\uff23\001\002\000\014\003\uff36" +
    "\041\uff36\043\uff36\044\uff36\160\uff36\001\002\000\006\011" +
    "\ufff4\111\054\001\002\000\006\003\123\160\124\001\002" +
    "\000\014\003\uff4f\041\uff4f\043\uff4f\044\uff4f\160\uff4f\001" +
    "\002\000\014\003\uff4a\041\uff4a\043\uff4a\044\uff4a\160\uff4a" +
    "\001\002\000\014\003\uff49\041\uff49\043\uff49\044\uff49\160" +
    "\uff49\001\002\000\010\011\ufff4\110\104\111\054\001\002" +
    "\000\014\003\uff41\041\uff41\043\uff41\044\uff41\160\uff41\001" +
    "\002\000\014\003\uff4c\041\uff4c\043\uff4c\044\uff4c\160\uff4c" +
    "\001\002\000\014\003\uff3b\041\uff3b\043\uff3b\044\uff3b\160" +
    "\uff3b\001\002\000\014\003\uff3e\041\uff3e\043\uff3e\044\uff3e" +
    "\160\uff3e\001\002\000\014\003\uff44\041\uff44\043\uff44\044" +
    "\uff44\160\uff44\001\002\000\014\003\uff2e\041\uff2e\043\uff2e" +
    "\044\uff2e\160\uff2e\001\002\000\014\003\uff4d\041\uff4d\043" +
    "\uff4d\044\uff4d\160\uff4d\001\002\000\014\003\uff2c\041\uff2c" +
    "\043\uff2c\044\uff2c\160\uff2c\001\002\000\014\003\uff2b\041" +
    "\uff2b\043\uff2b\044\uff2b\160\uff2b\001\002\000\004\011\ufff7" +
    "\001\002\000\004\010\151\001\002\000\004\010\125\001" +
    "\002\000\156\016\021\017\023\020\037\021\105\022\064" +
    "\023\117\024\112\025\035\026\106\027\107\030\030\031" +
    "\033\032\076\033\066\034\115\035\073\036\100\037\111" +
    "\040\067\115\063\116\043\117\114\120\071\121\062\122" +
    "\113\123\047\124\057\125\042\126\051\127\102\130\046" +
    "\131\053\132\072\133\032\134\026\135\020\136\060\137" +
    "\116\140\074\141\120\142\121\143\055\144\041\145\050" +
    "\146\034\147\040\150\027\151\031\152\101\153\022\154" +
    "\036\155\025\156\061\157\056\001\002\000\012\041\127" +
    "\043\uff9b\044\uff9b\160\uff9b\001\002\000\006\003\147\042" +
    "\146\001\002\000\010\043\131\044\132\160\uff98\001\002" +
    "\000\004\160\uff9a\001\002\000\004\160\uff99\001\002\000" +
    "\004\160\134\001\002\000\004\014\135\001\002\000\160" +
    "\011\uffdb\016\021\017\023\020\037\021\105\022\064\023" +
    "\117\024\112\025\035\026\106\027\107\030\030\031\033" +
    "\032\076\033\066\034\115\035\073\036\100\037\111\040" +
    "\067\115\063\116\043\117\114\120\071\121\062\122\113" +
    "\123\047\124\057\125\042\126\051\127\102\130\046\131" +
    "\053\132\072\133\032\134\026\135\020\136\060\137\116" +
    "\140\074\141\120\142\121\143\055\144\041\145\050\146" +
    "\034\147\040\150\027\151\031\152\101\153\022\154\036" +
    "\155\025\156\061\157\056\001\002\000\012\041\127\043" +
    "\uff9b\044\uff9b\160\uff9b\001\002\000\004\011\140\001\002" +
    "\000\010\011\uffde\110\uffde\111\uffde\001\002\000\010\043" +
    "\131\044\132\160\uff98\001\002\000\004\160\143\001\002" +
    "\000\004\014\144\001\002\000\160\011\uffdb\016\021\017" +
    "\023\020\037\021\105\022\064\023\117\024\112\025\035" +
    "\026\106\027\107\030\030\031\033\032\076\033\066\034" +
    "\115\035\073\036\100\037\111\040\067\115\063\116\043" +
    "\117\114\120\071\121\062\122\113\123\047\124\057\125" +
    "\042\126\051\127\102\130\046\131\053\132\072\133\032" +
    "\134\026\135\020\136\060\137\116\140\074\141\120\142" +
    "\121\143\055\144\041\145\050\146\034\147\040\150\027" +
    "\151\031\152\101\153\022\154\036\155\025\156\061\157" +
    "\056\001\002\000\004\011\uffdc\001\002\000\010\043\uff9d" +
    "\044\uff9d\160\uff9d\001\002\000\004\014\150\001\002\000" +
    "\010\043\uff9c\044\uff9c\160\uff9c\001\002\000\010\011\uffdd" +
    "\110\uffdd\111\uffdd\001\002\000\004\011\ufff5\001\002\000" +
    "\004\011\ufffb\001\002\000\004\011\167\001\002\000\004" +
    "\010\156\001\002\000\004\160\157\001\002\000\006\011" +
    "\uffa3\015\160\001\002\000\006\003\163\160\164\001\002" +
    "\000\004\011\162\001\002\000\166\011\uffa7\013\uffa7\016" +
    "\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7" +
    "\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033" +
    "\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\110\uffa7" +
    "\111\uffa7\115\uffa7\116\uffa7\117\uffa7\120\uffa7\121\uffa7\122" +
    "\uffa7\123\uffa7\124\uffa7\125\uffa7\126\uffa7\127\uffa7\130\uffa7" +
    "\131\uffa7\132\uffa7\133\uffa7\134\uffa7\135\uffa7\136\uffa7\137" +
    "\uffa7\140\uffa7\141\uffa7\142\uffa7\143\uffa7\144\uffa7\145\uffa7" +
    "\146\uffa7\147\uffa7\150\uffa7\151\uffa7\152\uffa7\153\uffa7\154" +
    "\uffa7\155\uffa7\156\uffa7\157\uffa7\001\002\000\004\011\166" +
    "\001\002\000\006\011\uffa3\015\160\001\002\000\004\011" +
    "\uffa5\001\002\000\004\011\uffa4\001\002\000\166\011\uffa6" +
    "\013\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023" +
    "\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6" +
    "\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\110\uffa6\111\uffa6\115\uffa6\116\uffa6\117\uffa6\120\uffa6" +
    "\121\uffa6\122\uffa6\123\uffa6\124\uffa6\125\uffa6\126\uffa6\127" +
    "\uffa6\130\uffa6\131\uffa6\132\uffa6\133\uffa6\134\uffa6\135\uffa6" +
    "\136\uffa6\137\uffa6\140\uffa6\141\uffa6\142\uffa6\143\uffa6\144" +
    "\uffa6\145\uffa6\146\uffa6\147\uffa6\150\uffa6\151\uffa6\152\uffa6" +
    "\153\uffa6\154\uffa6\155\uffa6\156\uffa6\157\uffa6\001\002\000" +
    "\006\002\ufffc\007\172\001\002\000\004\002\000\001\002" +
    "\000\006\003\173\160\174\001\002\000\004\011\201\001" +
    "\002\000\004\010\175\001\002\000\166\011\ufff4\013\075" +
    "\016\021\017\023\020\037\021\105\022\064\023\117\024" +
    "\112\025\035\026\106\027\107\030\030\031\033\032\076" +
    "\033\066\034\115\035\073\036\100\037\111\040\067\110" +
    "\104\111\054\115\063\116\043\117\114\120\071\121\062" +
    "\122\113\123\047\124\057\125\042\126\051\127\102\130" +
    "\046\131\053\132\072\133\032\134\026\135\020\136\060" +
    "\137\116\140\074\141\120\142\121\143\055\144\041\145" +
    "\050\146\034\147\040\150\027\151\031\152\101\153\022" +
    "\154\036\155\025\156\061\157\056\001\002\000\004\011" +
    "\177\001\002\000\006\002\ufffc\007\172\001\002\000\004" +
    "\002\ufffe\001\002\000\004\002\ufffd\001\002\000\004\010" +
    "\u01c1\001\002\000\004\065\204\001\002\000\156\016\021" +
    "\017\023\020\037\021\105\022\064\023\117\024\112\025" +
    "\035\026\106\027\107\030\030\031\033\032\076\033\066" +
    "\034\115\035\073\036\100\037\111\040\067\115\063\116" +
    "\043\117\114\120\071\121\062\122\113\123\047\124\057" +
    "\125\042\126\051\127\102\130\046\131\053\132\072\133" +
    "\032\134\026\135\020\136\060\137\116\140\074\141\120" +
    "\142\121\143\055\144\041\145\050\146\034\147\040\150" +
    "\027\151\031\152\101\153\022\154\036\155\025\156\061" +
    "\157\056\001\002\000\004\160\206\001\002\000\006\015" +
    "\207\066\ufff0\001\002\000\156\016\021\017\023\020\037" +
    "\021\105\022\064\023\117\024\112\025\035\026\106\027" +
    "\107\030\030\031\033\032\076\033\066\034\115\035\073" +
    "\036\100\037\111\040\067\115\063\116\043\117\114\120" +
    "\071\121\062\122\113\123\047\124\057\125\042\126\051" +
    "\127\102\130\046\131\053\132\072\133\032\134\026\135" +
    "\020\136\060\137\116\140\074\141\120\142\121\143\055" +
    "\144\041\145\050\146\034\147\040\150\027\151\031\152" +
    "\101\153\022\154\036\155\025\156\061\157\056\001\002" +
    "\000\004\066\211\001\002\000\016\010\uffeb\043\212\044" +
    "\214\112\216\113\215\114\uffeb\001\002\000\006\010\uffed" +
    "\114\uffed\001\002\000\006\010\uffe9\114\220\001\002\000" +
    "\006\010\uffee\114\uffee\001\002\000\006\010\uffec\114\uffec" +
    "\001\002\000\006\010\uffef\114\uffef\001\002\000\004\010" +
    "\225\001\002\000\004\065\221\001\002\000\156\016\021" +
    "\017\023\020\037\021\105\022\064\023\117\024\112\025" +
    "\035\026\106\027\107\030\030\031\033\032\076\033\066" +
    "\034\115\035\073\036\100\037\111\040\067\115\063\116" +
    "\043\117\114\120\071\121\062\122\113\123\047\124\057" +
    "\125\042\126\051\127\102\130\046\131\053\132\072\133" +
    "\032\134\026\135\020\136\060\137\116\140\074\141\120" +
    "\142\121\143\055\144\041\145\050\146\034\147\040\150" +
    "\027\151\031\152\101\153\022\154\036\155\025\156\061" +
    "\157\056\001\002\000\004\160\223\001\002\000\004\066" +
    "\224\001\002\000\004\010\uffea\001\002\000\206\016\021" +
    "\017\023\020\037\021\105\022\064\023\117\024\112\025" +
    "\035\026\106\027\107\030\030\031\033\032\076\033\066" +
    "\034\115\035\073\036\100\037\111\040\067\046\uffdf\047" +
    "\uffdf\075\uffdf\076\uffdf\077\uffdf\102\uffdf\103\uffdf\104\uffdf" +
    "\115\063\116\043\117\114\120\071\121\062\122\113\123" +
    "\047\124\057\125\042\126\051\127\102\130\046\131\053" +
    "\132\072\133\032\134\026\135\020\136\060\137\116\140" +
    "\074\141\120\142\121\143\055\144\041\145\050\146\034" +
    "\147\040\150\027\151\031\152\101\153\022\154\036\155" +
    "\025\156\061\157\056\160\uffdf\161\uffdf\162\uffdf\163\uffdf" +
    "\001\002\000\206\016\021\017\023\020\037\021\105\022" +
    "\064\023\117\024\112\025\035\026\106\027\107\030\030" +
    "\031\033\032\076\033\066\034\115\035\073\036\100\037" +
    "\111\040\067\046\uffdf\047\uffdf\075\uffdf\076\uffdf\077\uffdf" +
    "\102\uffdf\103\uffdf\104\uffdf\115\063\116\043\117\114\120" +
    "\071\121\062\122\113\123\047\124\057\125\042\126\051" +
    "\127\102\130\046\131\053\132\072\133\032\134\026\135" +
    "\020\136\060\137\116\140\074\141\120\142\121\143\055" +
    "\144\041\145\050\146\034\147\040\150\027\151\031\152" +
    "\101\153\022\154\036\155\025\156\061\157\056\160\uffdf" +
    "\161\uffdf\162\uffdf\163\uffdf\001\002\000\032\046\230\047" +
    "\246\075\250\076\245\077\uffe7\102\244\103\255\104\231" +
    "\160\243\161\235\162\236\163\237\001\002\000\032\014" +
    "\uff5f\050\316\051\317\052\321\053\315\054\313\055\314" +
    "\056\311\057\322\060\320\066\uff5f\107\uff5f\001\002\000" +
    "\006\003\u01ab\065\u01ac\001\002\000\032\046\uffda\047\uffda" +
    "\075\uffda\076\uffda\077\uffda\102\uffda\103\uffda\104\uffda\160" +
    "\uffda\161\uffda\162\uffda\163\uffda\001\002\000\004\077\u01a7" +
    "\001\002\000\032\046\230\047\246\075\250\076\245\077" +
    "\uffe7\102\244\103\255\104\231\160\243\161\235\162\236" +
    "\163\237\001\002\000\034\014\uff7a\061\u010d\062\u0108\063" +
    "\u0105\064\u010c\065\u010e\066\u010f\067\u0107\070\u0106\071\u0103" +
    "\072\u0109\073\u010a\107\uff7a\001\002\000\010\014\uff55\066" +
    "\uff55\107\uff55\001\002\000\010\014\uff54\066\uff54\107\uff54" +
    "\001\002\000\004\014\u01a4\001\002\000\010\014\uff94\066" +
    "\uff94\107\uff94\001\002\000\010\014\uff93\066\uff93\107\uff93" +
    "\001\002\000\056\014\uff89\045\u0191\050\316\051\317\052" +
    "\321\053\315\054\313\055\314\056\311\057\322\060\320" +
    "\061\355\062\345\063\350\064\342\065\354\067\341\070" +
    "\353\071\343\072\337\073\347\074\u0190\001\002\000\006" +
    "\003\u0183\065\u0184\001\002\000\006\003\u017a\065\u017b\001" +
    "\002\000\032\014\uff5f\050\316\051\317\052\321\053\315" +
    "\054\313\055\314\056\311\057\322\060\320\066\uff5f\107" +
    "\uff5f\001\002\000\010\014\uff95\066\uff95\107\uff95\001\002" +
    "\000\004\074\u016f\001\002\000\032\046\uffd8\047\uffd8\075" +
    "\uffd8\076\uffd8\077\uffd8\102\uffd8\103\uffd8\104\uffd8\160\uffd8" +
    "\161\uffd8\162\uffd8\163\uffd8\001\002\000\032\046\uffd9\047" +
    "\uffd9\075\uffd9\076\uffd9\077\uffd9\102\uffd9\103\uffd9\104\uffd9" +
    "\160\uffd9\161\uffd9\162\uffd9\163\uffd9\001\002\000\032\046" +
    "\uffe3\047\uffe3\075\uffe3\076\uffe3\077\uffe3\102\uffe3\103\uffe3" +
    "\104\uffe3\160\uffe3\161\uffe3\162\uffe3\163\uffe3\001\002\000" +
    "\032\046\uffd7\047\uffd7\075\uffd7\076\uffd7\077\uffd7\102\uffd7" +
    "\103\uffd7\104\uffd7\160\uffd7\161\uffd7\162\uffd7\163\uffd7\001" +
    "\002\000\006\003\257\010\256\001\002\000\024\075\261" +
    "\076\266\077\273\100\267\101\262\102\272\103\264\104" +
    "\270\160\265\001\002\000\004\011\260\001\002\000\032" +
    "\046\uffd1\047\uffd1\075\uffd1\076\uffd1\077\uffd1\102\uffd1\103" +
    "\uffd1\104\uffd1\160\uffd1\161\uffd1\162\uffd1\163\uffd1\001\002" +
    "\000\004\074\u016a\001\002\000\006\003\u0167\014\u0168\001" +
    "\002\000\026\011\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf" +
    "\101\uffbf\102\uffbf\103\uffbf\104\uffbf\160\uffbf\001\002\000" +
    "\006\003\u015d\010\u015c\001\002\000\010\045\u0146\065\u0147" +
    "\074\u0142\001\002\000\006\003\u0139\065\u013a\001\002\000" +
    "\006\003\u0136\014\u0137\001\002\000\006\003\u0125\065\u0126" +
    "\001\002\000\026\011\uffc8\075\261\076\266\077\273\100" +
    "\267\101\262\102\272\103\264\104\270\160\265\001\002" +
    "\000\006\003\277\065\300\001\002\000\006\003\274\014" +
    "\275\001\002\000\004\014\276\001\002\000\026\011\uffbe" +
    "\075\uffbe\076\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe\103" +
    "\uffbe\104\uffbe\160\uffbe\001\002\000\026\011\uffbd\075\uffbd" +
    "\076\uffbd\077\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd\104" +
    "\uffbd\160\uffbd\001\002\000\004\010\u011d\001\002\000\004" +
    "\160\301\001\002\000\006\003\u0119\045\u011a\001\002\000" +
    "\004\014\303\001\002\000\010\046\307\047\304\160\306" +
    "\001\002\000\032\014\uff5f\050\316\051\317\052\321\053" +
    "\315\054\313\055\314\056\311\057\322\060\320\066\uff5f" +
    "\107\uff5f\001\002\000\004\014\325\001\002\000\032\014" +
    "\uff5f\050\316\051\317\052\321\053\315\054\313\055\314" +
    "\056\311\057\322\060\320\066\uff5f\107\uff5f\001\002\000" +
    "\032\014\uff5f\050\316\051\317\052\321\053\315\054\313" +
    "\055\314\056\311\057\322\060\320\066\uff5f\107\uff5f\001" +
    "\002\000\010\014\uff63\066\uff63\107\uff63\001\002\000\010" +
    "\046\uff58\047\uff58\160\uff58\001\002\000\010\046\307\047" +
    "\304\160\306\001\002\000\010\046\uff5a\047\uff5a\160\uff5a" +
    "\001\002\000\010\046\uff59\047\uff59\160\uff59\001\002\000" +
    "\010\046\uff5b\047\uff5b\160\uff5b\001\002\000\010\046\uff5e" +
    "\047\uff5e\160\uff5e\001\002\000\010\046\uff5d\047\uff5d\160" +
    "\uff5d\001\002\000\010\046\uff56\047\uff56\160\uff56\001\002" +
    "\000\010\046\uff5c\047\uff5c\160\uff5c\001\002\000\010\046" +
    "\uff57\047\uff57\160\uff57\001\002\000\010\014\uff60\066\uff60" +
    "\107\uff60\001\002\000\010\014\uff61\066\uff61\107\uff61\001" +
    "\002\000\020\046\230\047\246\075\250\160\326\161\235" +
    "\162\236\163\237\001\002\000\060\014\uff89\050\316\051" +
    "\317\052\321\053\315\054\313\055\314\056\311\057\322" +
    "\060\320\061\355\062\345\063\350\064\342\065\354\066" +
    "\uff89\067\341\070\353\071\343\072\337\073\347\074\346" +
    "\107\uff89\001\002\000\004\066\330\001\002\000\004\010" +
    "\331\001\002\000\024\075\261\076\266\077\273\100\267" +
    "\101\262\102\272\103\264\104\270\160\265\001\002\000" +
    "\026\011\uffc8\075\261\076\266\077\273\100\267\101\262" +
    "\102\272\103\264\104\270\160\265\001\002\000\026\011" +
    "\uffc8\075\261\076\266\077\273\100\267\101\262\102\272" +
    "\103\264\104\270\160\265\001\002\000\004\011\335\001" +
    "\002\000\026\011\uffc3\075\uffc3\076\uffc3\077\uffc3\100\uffc3" +
    "\101\uffc3\102\uffc3\103\uffc3\104\uffc3\160\uffc3\001\002\000" +
    "\004\011\uffc9\001\002\000\010\075\uff65\160\uff65\161\uff65" +
    "\001\002\000\010\046\307\047\304\160\306\001\002\000" +
    "\010\075\uff68\160\uff68\161\uff68\001\002\000\010\075\uff69" +
    "\160\uff69\161\uff69\001\002\000\010\075\uff66\160\uff66\161" +
    "\uff66\001\002\000\010\075\375\160\377\161\376\001\002" +
    "\000\010\075\uff6b\160\uff6b\161\uff6b\001\002\000\006\003" +
    "\371\160\372\001\002\000\010\075\uff64\160\uff64\161\uff64" +
    "\001\002\000\010\075\uff6a\160\uff6a\161\uff6a\001\002\000" +
    "\010\014\uff97\066\uff97\107\uff97\001\002\000\010\014\uff8d" +
    "\066\uff8d\107\uff8d\001\002\000\010\075\uff67\160\uff67\161" +
    "\uff67\001\002\000\010\066\361\075\356\160\360\001\002" +
    "\000\010\075\uff6c\160\uff6c\161\uff6c\001\002\000\004\074" +
    "\366\001\002\000\010\014\uff8c\066\uff8c\107\uff8c\001\002" +
    "\000\006\015\362\066\363\001\002\000\010\014\uff81\066" +
    "\uff81\107\uff81\001\002\000\010\066\361\075\356\160\360" +
    "\001\002\000\010\014\uff7f\066\uff7f\107\uff7f\001\002\000" +
    "\010\014\uff83\066\uff83\107\uff83\001\002\000\010\014\uff80" +
    "\066\uff80\107\uff80\001\002\000\004\160\367\001\002\000" +
    "\006\015\362\066\363\001\002\000\010\014\uff82\066\uff82" +
    "\107\uff82\001\002\000\004\014\374\001\002\000\056\014" +
    "\uff89\050\316\051\317\052\321\053\315\054\313\055\314" +
    "\056\311\057\322\060\320\061\355\062\345\063\350\064" +
    "\342\065\354\066\uff89\067\341\070\353\071\343\072\337" +
    "\073\347\107\uff89\001\002\000\010\014\uff8f\066\uff8f\107" +
    "\uff8f\001\002\000\010\014\uff8e\066\uff8e\107\uff8e\001\002" +
    "\000\004\074\u0113\001\002\000\034\014\uff7a\061\u010d\062" +
    "\u0108\063\u0105\064\u010c\065\u010e\066\u010f\067\u0107\070\u0106" +
    "\071\u0103\072\u0109\073\u010a\107\uff7a\001\002\000\036\014" +
    "\uff78\061\uff78\062\uff78\063\uff78\064\uff78\065\uff78\066\uff78" +
    "\067\uff78\070\uff78\071\uff78\072\uff78\073\uff78\074\u0101\107" +
    "\uff78\001\002\000\010\014\uff8b\066\uff8b\107\uff8b\001\002" +
    "\000\004\160\u0111\001\002\000\034\014\uff7a\061\u010d\062" +
    "\u0108\063\u0105\064\u010c\065\u010e\066\u010f\067\u0107\070\u0106" +
    "\071\u0103\072\u0109\073\u010a\107\uff7a\001\002\000\010\075" +
    "\uff6f\160\uff6f\161\uff6f\001\002\000\010\075\375\160\377" +
    "\161\376\001\002\000\010\075\uff75\160\uff75\161\uff75\001" +
    "\002\000\010\075\uff70\160\uff70\161\uff70\001\002\000\010" +
    "\075\uff71\160\uff71\161\uff71\001\002\000\010\075\uff76\160" +
    "\uff76\161\uff76\001\002\000\010\075\uff6e\160\uff6e\161\uff6e" +
    "\001\002\000\010\075\uff6d\160\uff6d\161\uff6d\001\002\000" +
    "\010\014\uff7d\066\uff7d\107\uff7d\001\002\000\010\075\uff74" +
    "\160\uff74\161\uff74\001\002\000\010\075\uff77\160\uff77\161" +
    "\uff77\001\002\000\010\075\uff73\160\uff73\161\uff73\001\002" +
    "\000\010\075\uff72\160\uff72\161\uff72\001\002\000\010\014" +
    "\uff7b\066\uff7b\107\uff7b\001\002\000\034\014\uff79\061\uff79" +
    "\062\uff79\063\uff79\064\uff79\065\uff79\066\uff79\067\uff79\070" +
    "\uff79\071\uff79\072\uff79\073\uff79\107\uff79\001\002\000\010" +
    "\014\uff7e\066\uff7e\107\uff7e\001\002\000\004\160\u0114\001" +
    "\002\000\036\014\uff78\061\uff78\062\uff78\063\uff78\064\uff78" +
    "\065\uff78\066\uff78\067\uff78\070\uff78\071\uff78\072\uff78\073" +
    "\uff78\074\u0101\107\uff78\001\002\000\034\014\uff7a\061\u010d" +
    "\062\u0108\063\u0105\064\u010c\065\u010e\066\u010f\067\u0107\070" +
    "\u0106\071\u0103\072\u0109\073\u010a\107\uff7a\001\002\000\010" +
    "\014\uff7c\066\uff7c\107\uff7c\001\002\000\010\014\uff8a\066" +
    "\uff8a\107\uff8a\001\002\000\010\014\uff62\066\uff62\107\uff62" +
    "\001\002\000\004\014\u011c\001\002\000\020\046\230\047" +
    "\246\075\250\160\326\161\235\162\236\163\237\001\002" +
    "\000\004\014\uffaa\001\002\000\004\014\uffa9\001\002\000" +
    "\026\011\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2\101\uffc2" +
    "\102\uffc2\103\uffc2\104\uffc2\160\uffc2\001\002\000\004\011" +
    "\u011f\001\002\000\004\076\u0120\001\002\000\004\065\u0121" +
    "\001\002\000\010\046\307\047\304\160\306\001\002\000" +
    "\004\066\u0123\001\002\000\004\014\u0124\001\002\000\032" +
    "\046\uffd2\047\uffd2\075\uffd2\076\uffd2\077\uffd2\102\uffd2\103" +
    "\uffd2\104\uffd2\160\uffd2\161\uffd2\162\uffd2\163\uffd2\001\002" +
    "\000\004\010\u0135\001\002\000\010\046\307\047\304\160" +
    "\306\001\002\000\004\066\u0128\001\002\000\004\010\u0129" +
    "\001\002\000\024\075\261\076\266\077\273\100\267\101" +
    "\262\102\272\103\264\104\270\160\265\001\002\000\026" +
    "\011\uffc8\075\261\076\266\077\273\100\267\101\262\102" +
    "\272\103\264\104\270\160\265\001\002\000\004\011\u012c" +
    "\001\002\000\030\011\uffaf\075\uffaf\076\uffaf\077\uffaf\100" +
    "\uffaf\101\uffaf\102\uffaf\103\uffaf\104\uffaf\105\u012e\160\uffaf" +
    "\001\002\000\026\011\uffb3\075\uffb3\076\uffb3\077\uffb3\100" +
    "\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3\160\uffb3\001\002" +
    "\000\006\003\u0130\010\u012f\001\002\000\024\075\261\076" +
    "\266\077\273\100\267\101\262\102\272\103\264\104\270" +
    "\160\265\001\002\000\004\011\u0131\001\002\000\026\011" +
    "\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0" +
    "\103\uffb0\104\uffb0\160\uffb0\001\002\000\026\011\uffc8\075" +
    "\261\076\266\077\273\100\267\101\262\102\272\103\264" +
    "\104\270\160\265\001\002\000\004\011\u0134\001\002\000" +
    "\026\011\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1" +
    "\102\uffb1\103\uffb1\104\uffb1\160\uffb1\001\002\000\026\011" +
    "\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\102\uffb2" +
    "\103\uffb2\104\uffb2\160\uffb2\001\002\000\004\014\u0138\001" +
    "\002\000\026\011\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc" +
    "\101\uffbc\102\uffbc\103\uffbc\104\uffbc\160\uffbc\001\002\000" +
    "\026\011\uffbb\075\uffbb\076\uffbb\077\uffbb\100\uffbb\101\uffbb" +
    "\102\uffbb\103\uffbb\104\uffbb\160\uffbb\001\002\000\004\010" +
    "\u0141\001\002\000\010\046\307\047\304\160\306\001\002" +
    "\000\004\066\u013c\001\002\000\004\010\u013d\001\002\000" +
    "\024\075\261\076\266\077\273\100\267\101\262\102\272" +
    "\103\264\104\270\160\265\001\002\000\026\011\uffc8\075" +
    "\261\076\266\077\273\100\267\101\262\102\272\103\264" +
    "\104\270\160\265\001\002\000\004\011\u0140\001\002\000" +
    "\026\011\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5" +
    "\102\uffc5\103\uffc5\104\uffc5\160\uffc5\001\002\000\026\011" +
    "\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4\102\uffc4" +
    "\103\uffc4\104\uffc4\160\uffc4\001\002\000\004\160\u015a\001" +
    "\002\000\026\011\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7" +
    "\101\uffc7\102\uffc7\103\uffc7\104\uffc7\160\uffc7\001\002\000" +
    "\026\011\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5" +
    "\102\uffb5\103\uffb5\104\uffb5\160\uffb5\001\002\000\026\011" +
    "\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7" +
    "\103\uffb7\104\uffb7\160\uffb7\001\002\000\024\003\u014e\046" +
    "\230\047\246\065\u0150\075\250\160\326\161\235\162\236" +
    "\163\237\001\002\000\004\003\u0149\001\002\000\026\011" +
    "\uffb6\075\uffb6\076\uffb6\077\uffb6\100\uffb6\101\uffb6\102\uffb6" +
    "\103\uffb6\104\uffb6\160\uffb6\001\002\000\004\014\u014d\001" +
    "\002\000\004\066\u014b\001\002\000\004\014\u014c\001\002" +
    "\000\026\011\uffac\075\uffac\076\uffac\077\uffac\100\uffac\101" +
    "\uffac\102\uffac\103\uffac\104\uffac\160\uffac\001\002\000\026" +
    "\011\uffab\075\uffab\076\uffab\077\uffab\100\uffab\101\uffab\102" +
    "\uffab\103\uffab\104\uffab\160\uffab\001\002\000\004\014\u0159" +
    "\001\002\000\004\014\u0158\001\002\000\010\046\307\047" +
    "\304\160\306\001\002\000\004\066\u0152\001\002\000\004" +
    "\106\u0153\001\002\000\020\046\230\047\246\075\250\160" +
    "\326\161\235\162\236\163\237\001\002\000\004\107\u0155" +
    "\001\002\000\020\046\230\047\246\075\250\160\326\161" +
    "\235\162\236\163\237\001\002\000\004\014\u0157\001\002" +
    "\000\026\011\uffb4\075\uffb4\076\uffb4\077\uffb4\100\uffb4\101" +
    "\uffb4\102\uffb4\103\uffb4\104\uffb4\160\uffb4\001\002\000\026" +
    "\011\uffae\075\uffae\076\uffae\077\uffae\100\uffae\101\uffae\102" +
    "\uffae\103\uffae\104\uffae\160\uffae\001\002\000\026\011\uffad" +
    "\075\uffad\076\uffad\077\uffad\100\uffad\101\uffad\102\uffad\103" +
    "\uffad\104\uffad\160\uffad\001\002\000\006\045\u0146\065\u0147" +
    "\001\002\000\026\011\uffb8\075\uffb8\076\uffb8\077\uffb8\100" +
    "\uffb8\101\uffb8\102\uffb8\103\uffb8\104\uffb8\160\uffb8\001\002" +
    "\000\024\075\261\076\266\077\273\100\267\101\262\102" +
    "\272\103\264\104\270\160\265\001\002\000\004\011\u015e" +
    "\001\002\000\026\011\uffc0\075\uffc0\076\uffc0\077\uffc0\100" +
    "\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0\160\uffc0\001\002" +
    "\000\026\011\uffc8\075\261\076\266\077\273\100\267\101" +
    "\262\102\272\103\264\104\270\160\265\001\002\000\004" +
    "\011\u0161\001\002\000\004\076\u0162\001\002\000\004\065" +
    "\u0163\001\002\000\010\046\307\047\304\160\306\001\002" +
    "\000\004\066\u0165\001\002\000\004\014\u0166\001\002\000" +
    "\026\011\uffc1\075\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1" +
    "\102\uffc1\103\uffc1\104\uffc1\160\uffc1\001\002\000\004\014" +
    "\u0169\001\002\000\026\011\uffba\075\uffba\076\uffba\077\uffba" +
    "\100\uffba\101\uffba\102\uffba\103\uffba\104\uffba\160\uffba\001" +
    "\002\000\026\011\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9" +
    "\101\uffb9\102\uffb9\103\uffb9\104\uffb9\160\uffb9\001\002\000" +
    "\004\160\u016b\001\002\000\004\045\u016c\001\002\000\020" +
    "\046\230\047\246\075\250\160\326\161\235\162\236\163" +
    "\237\001\002\000\004\014\u016e\001\002\000\026\011\uffc6" +
    "\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6\103" +
    "\uffc6\104\uffc6\160\uffc6\001\002\000\004\160\u0171\001\002" +
    "\000\010\014\uff96\066\uff96\107\uff96\001\002\000\056\014" +
    "\uff84\050\316\051\317\052\321\053\315\054\313\055\314" +
    "\056\311\057\322\060\320\061\355\062\345\063\350\064" +
    "\342\065\u0175\066\uff84\067\341\070\353\071\343\072\337" +
    "\073\347\107\uff84\001\002\000\010\046\307\047\304\160" +
    "\306\001\002\000\010\075\375\160\377\161\376\001\002" +
    "\000\010\014\uff88\066\uff88\107\uff88\001\002\000\010\066" +
    "\361\075\356\160\360\001\002\000\010\014\uff87\066\uff87" +
    "\107\uff87\001\002\000\010\014\uff86\066\uff86\107\uff86\001" +
    "\002\000\010\014\uff85\066\uff85\107\uff85\001\002\000\010" +
    "\014\uff91\066\uff91\107\uff91\001\002\000\004\010\u0182\001" +
    "\002\000\010\046\307\047\304\160\306\001\002\000\004" +
    "\066\u017d\001\002\000\004\010\u017e\001\002\000\024\075" +
    "\261\076\266\077\273\100\267\101\262\102\272\103\264" +
    "\104\270\160\265\001\002\000\026\011\uffc8\075\261\076" +
    "\266\077\273\100\267\101\262\102\272\103\264\104\270" +
    "\160\265\001\002\000\004\011\u0181\001\002\000\032\046" +
    "\uffd6\047\uffd6\075\uffd6\076\uffd6\077\uffd6\102\uffd6\103\uffd6" +
    "\104\uffd6\160\uffd6\161\uffd6\162\uffd6\163\uffd6\001\002\000" +
    "\032\046\uffd5\047\uffd5\075\uffd5\076\uffd5\077\uffd5\102\uffd5" +
    "\103\uffd5\104\uffd5\160\uffd5\161\uffd5\162\uffd5\163\uffd5\001" +
    "\002\000\004\011\u018f\001\002\000\004\160\301\001\002" +
    "\000\004\014\u0186\001\002\000\010\046\307\047\304\160" +
    "\306\001\002\000\004\014\u0188\001\002\000\020\046\230" +
    "\047\246\075\250\160\326\161\235\162\236\163\237\001" +
    "\002\000\004\066\u018a\001\002\000\004\010\u018b\001\002" +
    "\000\024\075\261\076\266\077\273\100\267\101\262\102" +
    "\272\103\264\104\270\160\265\001\002\000\026\011\uffc8" +
    "\075\261\076\266\077\273\100\267\101\262\102\272\103" +
    "\264\104\270\160\265\001\002\000\004\011\u018e\001\002" +
    "\000\032\046\uffd4\047\uffd4\075\uffd4\076\uffd4\077\uffd4\102" +
    "\uffd4\103\uffd4\104\uffd4\160\uffd4\161\uffd4\162\uffd4\163\uffd4" +
    "\001\002\000\032\046\uffd3\047\uffd3\075\uffd3\076\uffd3\077" +
    "\uffd3\102\uffd3\103\uffd3\104\uffd3\160\uffd3\161\uffd3\162\uffd3" +
    "\163\uffd3\001\002\000\006\003\371\160\u01a1\001\002\000" +
    "\022\046\230\047\246\065\u0196\075\250\160\326\161\235" +
    "\162\236\163\237\001\002\000\032\046\uffe1\047\uffe1\075" +
    "\uffe1\076\uffe1\077\uffe1\102\uffe1\103\uffe1\104\uffe1\160\uffe1" +
    "\161\uffe1\162\uffe1\163\uffe1\001\002\000\032\046\uffe2\047" +
    "\uffe2\075\uffe2\076\uffe2\077\uffe2\102\uffe2\103\uffe2\104\uffe2" +
    "\160\uffe2\161\uffe2\162\uffe2\163\uffe2\001\002\000\032\046" +
    "\uffe6\047\uffe6\075\uffe6\076\uffe6\077\uffe6\102\uffe6\103\uffe6" +
    "\104\uffe6\160\uffe6\161\uffe6\162\uffe6\163\uffe6\001\002\000" +
    "\004\014\u01a0\001\002\000\012\003\u0197\046\307\047\304" +
    "\160\306\001\002\000\004\014\u019f\001\002\000\004\066" +
    "\u0199\001\002\000\004\106\u019a\001\002\000\020\046\230" +
    "\047\246\075\250\160\326\161\235\162\236\163\237\001" +
    "\002\000\004\107\u019c\001\002\000\020\046\230\047\246" +
    "\075\250\160\326\161\235\162\236\163\237\001\002\000" +
    "\004\014\u019e\001\002\000\032\046\uffcb\047\uffcb\075\uffcb" +
    "\076\uffcb\077\uffcb\102\uffcb\103\uffcb\104\uffcb\160\uffcb\161" +
    "\uffcb\162\uffcb\163\uffcb\001\002\000\032\046\uffca\047\uffca" +
    "\075\uffca\076\uffca\077\uffca\102\uffca\103\uffca\104\uffca\160" +
    "\uffca\161\uffca\162\uffca\163\uffca\001\002\000\032\046\uffa8" +
    "\047\uffa8\075\uffa8\076\uffa8\077\uffa8\102\uffa8\103\uffa8\104" +
    "\uffa8\160\uffa8\161\uffa8\162\uffa8\163\uffa8\001\002\000\054" +
    "\014\uff89\045\u01a2\050\316\051\317\052\321\053\315\054" +
    "\313\055\314\056\311\057\322\060\320\061\355\062\345" +
    "\063\350\064\342\065\354\067\341\070\353\071\343\072" +
    "\337\073\347\001\002\000\022\046\230\047\246\065\u0196" +
    "\075\250\160\326\161\235\162\236\163\237\001\002\000" +
    "\032\046\uffe5\047\uffe5\075\uffe5\076\uffe5\077\uffe5\102\uffe5" +
    "\103\uffe5\104\uffe5\160\uffe5\161\uffe5\162\uffe5\163\uffe5\001" +
    "\002\000\032\046\uffe4\047\uffe4\075\uffe4\076\uffe4\077\uffe4" +
    "\102\uffe4\103\uffe4\104\uffe4\160\uffe4\161\uffe4\162\uffe4\163" +
    "\uffe4\001\002\000\010\014\uff90\066\uff90\107\uff90\001\002" +
    "\000\004\077\uffe8\001\002\000\020\046\230\047\246\075" +
    "\250\160\326\161\235\162\236\163\237\001\002\000\004" +
    "\014\u01a9\001\002\000\004\011\u01aa\001\002\000\006\011" +
    "\ufff3\111\ufff3\001\002\000\004\011\u01bb\001\002\000\010" +
    "\046\307\047\304\160\306\001\002\000\004\066\u01ae\001" +
    "\002\000\004\010\u01af\001\002\000\024\075\261\076\266" +
    "\077\273\100\267\101\262\102\272\103\264\104\270\160" +
    "\265\001\002\000\026\011\uffc8\075\261\076\266\077\273" +
    "\100\267\101\262\102\272\103\264\104\270\160\265\001" +
    "\002\000\004\011\u01b2\001\002\000\034\046\uffcc\047\uffcc" +
    "\075\uffcc\076\uffcc\077\uffcc\102\uffcc\103\uffcc\104\uffcc\105" +
    "\u01b3\160\uffcc\161\uffcc\162\uffcc\163\uffcc\001\002\000\006" +
    "\003\u01b6\010\u01b5\001\002\000\032\046\uffd0\047\uffd0\075" +
    "\uffd0\076\uffd0\077\uffd0\102\uffd0\103\uffd0\104\uffd0\160\uffd0" +
    "\161\uffd0\162\uffd0\163\uffd0\001\002\000\024\075\261\076" +
    "\266\077\273\100\267\101\262\102\272\103\264\104\270" +
    "\160\265\001\002\000\004\011\u01b7\001\002\000\032\046" +
    "\uffcd\047\uffcd\075\uffcd\076\uffcd\077\uffcd\102\uffcd\103\uffcd" +
    "\104\uffcd\160\uffcd\161\uffcd\162\uffcd\163\uffcd\001\002\000" +
    "\026\011\uffc8\075\261\076\266\077\273\100\267\101\262" +
    "\102\272\103\264\104\270\160\265\001\002\000\004\011" +
    "\u01ba\001\002\000\032\046\uffce\047\uffce\075\uffce\076\uffce" +
    "\077\uffce\102\uffce\103\uffce\104\uffce\160\uffce\161\uffce\162" +
    "\uffce\163\uffce\001\002\000\032\046\uffcf\047\uffcf\075\uffcf" +
    "\076\uffcf\077\uffcf\102\uffcf\103\uffcf\104\uffcf\160\uffcf\161" +
    "\uffcf\162\uffcf\163\uffcf\001\002\000\010\014\uff92\066\uff92" +
    "\107\uff92\001\002\000\032\046\uffe0\047\uffe0\075\uffe0\076" +
    "\uffe0\077\uffe0\102\uffe0\103\uffe0\104\uffe0\160\uffe0\161\uffe0" +
    "\162\uffe0\163\uffe0\001\002\000\004\160\u01bf\001\002\000" +
    "\006\015\207\066\ufff0\001\002\000\004\066\ufff1\001\002" +
    "\000\006\011\ufff2\111\ufff2\001\002\000\004\011\ufff9\001" +
    "\002\000\004\014\u01cd\001\002\000\010\043\131\044\132" +
    "\160\uff98\001\002\000\004\160\u01c6\001\002\000\006\014" +
    "\u01c8\045\u01c7\001\002\000\020\046\230\047\246\075\250" +
    "\160\326\161\235\162\236\163\237\001\002\000\214\011" +
    "\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0" +
    "\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032" +
    "\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0" +
    "\046\uffa0\047\uffa0\075\uffa0\076\uffa0\077\uffa0\102\uffa0\103" +
    "\uffa0\104\uffa0\110\uffa0\111\uffa0\115\uffa0\116\uffa0\117\uffa0" +
    "\120\uffa0\121\uffa0\122\uffa0\123\uffa0\124\uffa0\125\uffa0\126" +
    "\uffa0\127\uffa0\130\uffa0\131\uffa0\132\uffa0\133\uffa0\134\uffa0" +
    "\135\uffa0\136\uffa0\137\uffa0\140\uffa0\141\uffa0\142\uffa0\143" +
    "\uffa0\144\uffa0\145\uffa0\146\uffa0\147\uffa0\150\uffa0\151\uffa0" +
    "\152\uffa0\153\uffa0\154\uffa0\155\uffa0\156\uffa0\157\uffa0\160" +
    "\uffa0\161\uffa0\162\uffa0\163\uffa0\001\002\000\214\011\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024" +
    "\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2" +
    "\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\046" +
    "\uffa2\047\uffa2\075\uffa2\076\uffa2\077\uffa2\102\uffa2\103\uffa2" +
    "\104\uffa2\110\uffa2\111\uffa2\115\uffa2\116\uffa2\117\uffa2\120" +
    "\uffa2\121\uffa2\122\uffa2\123\uffa2\124\uffa2\125\uffa2\126\uffa2" +
    "\127\uffa2\130\uffa2\131\uffa2\132\uffa2\133\uffa2\134\uffa2\135" +
    "\uffa2\136\uffa2\137\uffa2\140\uffa2\141\uffa2\142\uffa2\143\uffa2" +
    "\144\uffa2\145\uffa2\146\uffa2\147\uffa2\150\uffa2\151\uffa2\152" +
    "\uffa2\153\uffa2\154\uffa2\155\uffa2\156\uffa2\157\uffa2\160\uffa2" +
    "\161\uffa2\162\uffa2\163\uffa2\001\002\000\004\014\u01cb\001" +
    "\002\000\214\011\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f" +
    "\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030" +
    "\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f" +
    "\037\uff9f\040\uff9f\046\uff9f\047\uff9f\075\uff9f\076\uff9f\077" +
    "\uff9f\102\uff9f\103\uff9f\104\uff9f\110\uff9f\111\uff9f\115\uff9f" +
    "\116\uff9f\117\uff9f\120\uff9f\121\uff9f\122\uff9f\123\uff9f\124" +
    "\uff9f\125\uff9f\126\uff9f\127\uff9f\130\uff9f\131\uff9f\132\uff9f" +
    "\133\uff9f\134\uff9f\135\uff9f\136\uff9f\137\uff9f\140\uff9f\141" +
    "\uff9f\142\uff9f\143\uff9f\144\uff9f\145\uff9f\146\uff9f\147\uff9f" +
    "\150\uff9f\151\uff9f\152\uff9f\153\uff9f\154\uff9f\155\uff9f\156" +
    "\uff9f\157\uff9f\160\uff9f\161\uff9f\162\uff9f\163\uff9f\001\002" +
    "\000\004\014\uff9e\001\002\000\214\011\uffa1\016\uffa1\017" +
    "\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1" +
    "\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034" +
    "\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\046\uffa1\047\uffa1" +
    "\075\uffa1\076\uffa1\077\uffa1\102\uffa1\103\uffa1\104\uffa1\110" +
    "\uffa1\111\uffa1\115\uffa1\116\uffa1\117\uffa1\120\uffa1\121\uffa1" +
    "\122\uffa1\123\uffa1\124\uffa1\125\uffa1\126\uffa1\127\uffa1\130" +
    "\uffa1\131\uffa1\132\uffa1\133\uffa1\134\uffa1\135\uffa1\136\uffa1" +
    "\137\uffa1\140\uffa1\141\uffa1\142\uffa1\143\uffa1\144\uffa1\145" +
    "\uffa1\146\uffa1\147\uffa1\150\uffa1\151\uffa1\152\uffa1\153\uffa1" +
    "\154\uffa1\155\uffa1\156\uffa1\157\uffa1\160\uffa1\161\uffa1\162" +
    "\uffa1\163\uffa1\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01cc\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\004\064\005\051\006\044\007\067\011\076\014" +
    "\102\016\023\021\043\067\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\u01c3\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\u01c1\006\044\007\067\014\102\016\023\021" +
    "\043\067\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\152\005\051\006\044" +
    "\007\067\011\076\014\102\016\023\021\043\067\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\151\014\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\121\007\067\014\102\067\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\125\001\001\000" +
    "\004\017\127\001\001\000\002\001\001\000\004\020\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\135\070\136\001\001" +
    "\000\004\017\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\135\070\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\140\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\004\175\005" +
    "\051\006\044\007\067\011\076\014\102\016\023\021\043" +
    "\067\107\001\001\000\002\001\001\000\004\140\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\204\001\001\000\002\001" +
    "\001\000\004\075\207\001\001\000\004\016\u01bd\001\001" +
    "\000\002\001\001\000\004\076\212\001\001\000\002\001" +
    "\001\000\004\077\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\023\021\225\074" +
    "\226\001\001\000\010\016\023\021\225\074\u01bc\001\001" +
    "\000\030\013\252\026\237\046\246\050\231\057\251\061" +
    "\250\062\253\073\233\100\232\131\241\134\240\001\001" +
    "\000\006\034\311\036\u01bb\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\013\252\026\237" +
    "\046\246\050\231\057\251\061\250\062\253\073\233\100" +
    "\u01a5\131\241\134\240\001\001\000\006\031\u0103\035\u01a4" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\034\337" +
    "\105\350\130\343\136\351\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\034\311\036\u0178\001\001\000\002" +
    "\001\001\000\004\106\u016f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\051\270\071\262\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\053\u0147\054" +
    "\u0142\055\u0143\103\u0144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\051\332\056\u011d\071" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\060\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\304\001\001\000\006\034\311\036" +
    "\u0117\001\001\000\002\001\001\000\006\034\311\036\323" +
    "\001\001\000\006\034\311\036\307\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\322\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\026\326\046\246\131\241\134\240\001\001\000\012" +
    "\034\337\105\350\130\343\136\351\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\051\331\071\262\001\001" +
    "\000\010\051\332\056\333\071\262\001\001\000\010\051" +
    "\332\056\335\071\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\u0116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\377\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\132" +
    "\356\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\133\363\001\001\000\002\001\001\000" +
    "\004\132\364\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\133\367\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\034\337" +
    "\130\343\136\372\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\u0103\035\u0111\001\001" +
    "\000\004\135\u0101\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\u0103\035\u010a\001\001\000\002\001\001" +
    "\000\004\027\u010f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\135\u0114\001\001\000\006\031\u0103\035\u0115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\026\u011a\046\246\131\241" +
    "\134\240\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\u0121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\u0126\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\051\u0129\071\262\001\001\000\010\051\332\056\u012a" +
    "\071\262\001\001\000\002\001\001\000\004\072\u012c\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\051\u0131" +
    "\071\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\051\332\056\u0132\071\262\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\u013a\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\051\u013d\071\262\001\001\000\010\051\332\056\u013e" +
    "\071\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\026\u014e\046\246\131" +
    "\241\134\240\001\001\000\004\041\u0149\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\u0150\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\026\u0153\046\246\131\241" +
    "\134\240\001\001\000\002\001\001\000\012\026\u0155\046" +
    "\246\131\241\134\240\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\053" +
    "\u0147\055\u0143\103\u015a\001\001\000\002\001\001\000\006" +
    "\051\u015e\071\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\051\332\056\u015f\071\262\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\u0163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\026\u016c" +
    "\046\246\131\241\134\240\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\034\u0171\120\u0173\130\u0172\001\001\000\004\032\u0177\001" +
    "\001\000\004\027\u0176\001\001\000\002\001\001\000\004" +
    "\132\u0175\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\u017b\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\051\u017e\071\262\001\001\000\010\051\332\056\u017f" +
    "\071\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\u0184\001\001" +
    "\000\002\001\001\000\004\032\u0186\001\001\000\002\001" +
    "\001\000\012\026\u0188\046\246\131\241\134\240\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\051\u018b\071" +
    "\262\001\001\000\010\051\332\056\u018c\071\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\026\u0194\046\246\064\u0191\102\u0192" +
    "\104\u0193\131\241\134\240\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\u0197\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\026\u019a\046\246\131\241\134\240" +
    "\001\001\000\002\001\001\000\012\026\u019c\046\246\131" +
    "\241\134\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\034\337\130" +
    "\343\136\372\001\001\000\020\026\u0194\046\246\064\u0191" +
    "\102\u0192\104\u01a2\131\241\134\240\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\026\u01a7\046\246\131\241\134\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\u01ac\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\051\u01af\071\262\001\001\000\010" +
    "\051\332\056\u01b0\071\262\001\001\000\002\001\001\000" +
    "\004\063\u01b3\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\051\u01b7\071\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\051\332\056\u01b8\071\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\075\u01bf\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u01c4\001\001" +
    "\000\002\001\001\000\006\023\u01c9\047\u01c8\001\001\000" +
    "\012\026\u01cb\046\246\131\241\134\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static LinkedList<TError> TablaES = new LinkedList<TError>(); 

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.left;
        int columna = s.right;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.left;
        int columna = s.right;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
     
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico$actions {



  private final analisis_sintactico parser;

  /** Constructor */
  CUP$analisis_sintactico$actions(analisis_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action_part00000000(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico$parser.done_parsing();
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= pragma solidity techo numero numero punto_coma contract ident O_Parent_L BODY_CONTRACT C_Parent_L INICIO_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= pragma error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO_S ::= contract ident O_Parent_L BODY_CONTRACT C_Parent_L INICIO_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_S",94, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO_S ::= contract error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_S",94, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_S",94, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BODY_CONTRACT ::= EN BODY_CONTRACT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BODY_CONTRACT ::= BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BODY_CONTRACT_P ::= VAR_CONTRACT BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BODY_CONTRACT_P ::= BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BODY_CONTRACT_PP ::= STRUCTURE BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BODY_CONTRACT_PP ::= BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BODY_CONTRACT_PPP ::= FUNC BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BODY_CONTRACT_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNC ::= functionSoli ident O_Parent_R TIPO ident FUNC_PARAM C_Parent_R FUNC_MOD FUNC_RETURNS O_Parent_L CUERPO_ASSIGN CUERPO_M returnSoli EXP punto_coma C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-15)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNC ::= functionSoli error O_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNC_PARAM ::= coma TIPO ident FUNC_PARAM 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNC_PARAM ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNC_MOD ::= payableSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNC_MOD ::= privateSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNC_MOD ::= publicSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNC_MOD ::= internalSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNC_MOD ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNC_RETURNS ::= returns O_Parent_R TIPO ident C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_RETURNS",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNC_RETURNS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_RETURNS",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPO_M ::= CUERPO CUERPO_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPO_M ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CUERPO ::= ident igual CUERPO_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPO ::= ident punto ident igual CUERPO_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPO ::= EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPO ::= STRU 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPO_P ::= ASSIGN_NOT_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_P",66, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUERPO_P ::= STRU_IF_LINE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_P",66, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CUERPO_ASSIGN ::= VAR_CONTRACT CUERPO_ASSIGN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN",58, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CUERPO_ASSIGN ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN",58, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // STRUCTURE ::= structSoli ident O_Parent_L TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // STRUCTURE ::= structSoli error O_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // STRUCTURE_VAR ::= TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // STRUCTURE_VAR ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // STRU ::= STRU_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // STRU ::= STRU_FOR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // STRU ::= STRU_DO_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STRU ::= STRU_IF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STRU_WHILE ::= whileSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_WHILE",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STRU_WHILE ::= whileSoli error O_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_WHILE",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STRU_FOR ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_FOR",45, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // STRU_FOR ::= forSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_FOR",45, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STRU_DO_WHILE ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_DO_WHILE",47, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STRU_DO_WHILE ::= doSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_DO_WHILE",47, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STRU_IF ::= ifSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L STRU_ELSE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF",48, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STRU_IF ::= ifSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF",48, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STRU_ELSE ::= elseSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STRU_ELSE ::= elseSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STRU_ELSE ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // STRU_IF_LINE ::= O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP punto_punto EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_LINE",50, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STRU_IF_LINE ::= O_Parent_R error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_LINE",50, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BODY_SENT_M ::= BODY_SENT BODY_SENT_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BODY_SENT_M ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BODY_SENT ::= ident BODY_SENT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BODY_SENT ::= thisSoli punto ident igual EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BODY_SENT ::= whileSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BODY_SENT ::= whileSoli error O_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BODY_SENT ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BODY_SENT ::= forSoli error O_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BODY_SENT ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BODY_SENT ::= doSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BODY_SENT ::= STRU_IF_ELSE_IN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BODY_SENT ::= returnSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BODY_SENT ::= returnSoli error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BODY_SENT ::= breakSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BODY_SENT ::= breakSoli error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BODY_SENT ::= continueSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BODY_SENT ::= continueSoli error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // BODY_SENT_P ::= punto ident BODY_SENT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BODY_SENT_P ::= BODY_SENT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BODY_SENT_PP ::= BODY_ASSIGN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BODY_SENT_PP ::= BODY_FUN_CALL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BODY_SENT_PP ::= igual O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP punto_punto EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // STRU_IF_ELSE_IN ::= ifSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L STRU_ELSE_IN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_ELSE_IN",55, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // STRU_IF_ELSE_IN ::= ifSoli error O_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_ELSE_IN",55, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // STRU_ELSE_IN ::= elseSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // STRU_ELSE_IN ::= elseSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // STRU_ELSE_IN ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // BODY_ASSIGN ::= igual EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_ASSIGN",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // BODY_ASSIGN ::= igual error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_ASSIGN",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // BODY_FUN_CALL ::= O_Parent_R FUNC_CALL_PARAMS C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_FUN_CALL",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // BODY_FUN_CALL ::= O_Parent_R error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_FUN_CALL",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FOR_VAR ::= ident igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FOR_VAR",46, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FOR_VAR ::= ident error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FOR_VAR",46, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ASSIGN_NOT_VAR ::= EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ASSIGN_NOT_VAR",64, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EN ::= enumSoli ident O_Parent_L ident EN_IDENT C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EN ::= enumSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EN_IDENT ::= coma ident EN_IDENT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EN_IDENT ::= coma error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EN_IDENT ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VAR_CONTRACT ::= TIPO VAR_ARR VAR_ACCESS ident VAR_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VAR_CONTRACT ::= TIPO error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VAR_CONTRACT_P ::= punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VAR_CONTRACT_P ::= VAR_CONTRACT_C punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VAR_CONTRACT_C ::= igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_C",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VAR_ARR ::= O_Parent_C C_Parent_C 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VAR_ARR ::= O_Parent_C error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VAR_ARR ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VAR_ACCESS ::= publicSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VAR_ACCESS ::= privateSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VAR_ACCESS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP ::= ident EXP_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXP ::= thisSoli EXP_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXP ::= BODY_LIT_TF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXP ::= ARIT_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXP ::= BOOL_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // BOOL_GATE ::= trueSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BOOL_GATE",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // BOOL_GATE ::= falseSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BOOL_GATE",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ARIT_GATE ::= numero OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARIT_GATE",90, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXP_P ::= punto ident EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P",67, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXP_P ::= punto error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P",67, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXP_P ::= EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P",67, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXP_P_S ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXP_P_S ::= OP_EXCL OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXP_P_S ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXP_P_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXP_PP ::= punto ident EXP_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PP",68, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXP_PPP ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXP_PPP ::= OP_EXCL OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXP_PPP ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXP_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // FUNC_CALL_CASE ::= ident FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // FUNC_CALL_CASE ::= thisSoli punto ident FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // FUNC_CALL_CASE ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // FUNC_CALL_CASE_P ::= coma FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE_P",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // FUNC_CALL_CASE_P ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE_P",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OP_ARIT ::= numero OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OP_ARIT ::= ident OP_ARIT_Parent OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OP_ARIT ::= thisSoli punto ident OP_ARIT_Parent OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OP_ARIT_P ::= OP OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OP_ARIT_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OP_ARIT_Parent ::= punto ident 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_Parent",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OP_ARIT_Parent ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_Parent",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OP ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OP ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OP ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OP ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OP ::= O_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OP ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OP ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OP ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OP ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OP ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OP ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OP_EXCL ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OP_EXCL ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OP_EXCL ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OP_EXCL ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OP_EXCL ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OP_EXCL ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OP_EXCL ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // OP_EXCL ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // OP_EXCL ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // OP_BOOL ::= trueSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // OP_BOOL ::= falseSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // OP_BOOL ::= ident OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // OP_BOOL_P ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // OP_BOOL_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // OP_OP_BOOL ::= igual_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // OP_OP_BOOL ::= mayor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // OP_OP_BOOL ::= mayor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // OP_OP_BOOL ::= menor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // OP_OP_BOOL ::= menor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // OP_OP_BOOL ::= diferente 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // OP_OP_BOOL ::= op_or 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // OP_OP_BOOL ::= op_and 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // OP_OP_BOOL ::= negacion 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // BODY_LIT_TF ::= numero_HEX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // BODY_LIT_TF ::= stringSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // TIPO ::= bool 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // TIPO ::= byteSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // TIPO ::= bytes 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // TIPO ::= string 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // TIPO ::= uint 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // TIPO ::= uint_O 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // TIPO ::= uint_DS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // TIPO ::= uint_TD 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // TIPO ::= uint_SC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // TIPO ::= uint_CVO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // TIPO ::= uint_DCS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // TIPO ::= intSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // TIPO ::= int_O 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // TIPO ::= int_DS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // TIPO ::= int_TD 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // TIPO ::= int_SC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // TIPO ::= int_CVO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // TIPO ::= int_DCS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // TIPO ::= address 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // TIPO ::= address_payable 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // TIPO ::= charss 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // TIPO ::= ufixedSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // TIPO ::= B_I 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // TIPO ::= B_II 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // TIPO ::= B_III 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // TIPO ::= B_IV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // TIPO ::= B_V 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // TIPO ::= B_VI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // TIPO ::= B_VII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // TIPO ::= B_IIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // TIPO ::= B_IX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // TIPO ::= B_X 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // TIPO ::= B_XI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // TIPO ::= B_XII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // TIPO ::= B_XIII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // TIPO ::= B_XIV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // TIPO ::= B_XV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // TIPO ::= B_XVI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // TIPO ::= B_XVII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // TIPO ::= B_XIIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // TIPO ::= B_XIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // TIPO ::= B_XX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // TIPO ::= B_XXI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // TIPO ::= B_XXII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // TIPO ::= B_XXIII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // TIPO ::= B_XXIV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // TIPO ::= B_XXV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // TIPO ::= B_XXVI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // TIPO ::= B_XXVII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // TIPO ::= B_XXIIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // TIPO ::= B_XXIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // TIPO ::= B_XXX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // TIPO ::= B_XXXI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // TIPO ::= B_XXXII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$analisis_sintactico$do_action_part00000000(
                               CUP$analisis_sintactico$act_num,
                               CUP$analisis_sintactico$parser,
                               CUP$analisis_sintactico$stack,
                               CUP$analisis_sintactico$top);
    }
}

}
