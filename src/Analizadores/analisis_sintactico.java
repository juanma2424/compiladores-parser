
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symb.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\323\000\002\002\004\000\002\002\016\000\002\140" +
    "\010\000\002\140\002\000\002\004\004\000\002\004\003" +
    "\000\002\005\004\000\002\005\003\000\002\006\004\000" +
    "\002\006\003\000\002\007\004\000\002\007\002\000\002" +
    "\014\021\000\002\014\005\000\002\075\006\000\002\075" +
    "\002\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\076\003\000\002\076\002\000\002\077\007\000" +
    "\002\077\002\000\002\100\004\000\002\100\002\000\002" +
    "\141\007\000\002\141\003\000\002\073\005\000\002\073" +
    "\007\000\002\073\004\000\002\073\003\000\002\104\003" +
    "\000\002\104\003\000\002\142\004\000\002\142\003\000" +
    "\002\143\003\000\002\143\003\000\002\067\014\000\002" +
    "\067\005\000\002\067\006\000\002\070\010\000\002\070" +
    "\002\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\050\012\000\002\057\016\000" +
    "\002\061\014\000\002\062\013\000\002\063\007\000\002" +
    "\063\002\000\002\064\012\000\002\056\004\000\002\056" +
    "\002\000\002\051\004\000\002\051\010\000\002\051\012" +
    "\000\002\051\016\000\002\051\014\000\002\051\003\000" +
    "\002\051\004\000\002\051\004\000\002\051\004\000\002" +
    "\054\005\000\002\054\003\000\002\103\003\000\002\103" +
    "\003\000\002\103\013\000\002\071\013\000\002\072\007" +
    "\000\002\072\002\000\002\053\005\000\002\055\006\000" +
    "\002\060\005\000\002\102\004\000\002\011\010\000\002" +
    "\011\005\000\002\015\005\000\002\015\002\000\002\021" +
    "\007\000\002\021\005\000\002\047\003\000\002\047\004" +
    "\000\002\023\004\000\002\017\004\000\002\017\002\000" +
    "\002\020\003\000\002\020\003\000\002\020\002\000\002" +
    "\026\004\000\002\026\004\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\131\004\000\002\131\004" +
    "\000\002\134\004\000\002\105\005\000\002\105\003\000" +
    "\002\136\004\000\002\136\004\000\002\136\004\000\002" +
    "\136\002\000\002\106\005\000\002\120\004\000\002\120" +
    "\004\000\002\120\004\000\002\120\002\000\002\132\004" +
    "\000\002\132\006\000\002\132\003\000\002\133\004\000" +
    "\002\133\003\000\002\027\004\000\002\027\005\000\002" +
    "\027\007\000\002\035\004\000\002\035\002\000\002\135" +
    "\004\000\002\135\002\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\130" +
    "\003\000\002\130\003\000\002\130\003\000\002\130\003" +
    "\000\002\130\003\000\002\130\003\000\002\130\003\000" +
    "\002\130\003\000\002\130\003\000\002\032\004\000\002" +
    "\032\004\000\002\032\004\000\002\036\004\000\002\036" +
    "\002\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\046\003\000\002\046\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01aa\000\004\004\004\001\002\000\004\005\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\006\010\001\002\000\004\161\011\001\002\000" +
    "\004\161\012\001\002\000\004\014\013\001\002\000\004" +
    "\007\014\001\002\000\004\160\015\001\002\000\004\010" +
    "\016\001\002\000\166\011\ufff6\013\073\016\020\017\022" +
    "\020\037\021\104\022\063\023\116\024\111\025\034\026" +
    "\105\027\106\030\030\031\032\032\075\033\065\034\114" +
    "\035\072\036\077\037\110\040\067\110\103\111\054\115" +
    "\062\116\042\117\113\120\066\121\061\122\112\123\046" +
    "\124\056\125\041\126\047\127\102\130\045\131\051\132" +
    "\071\133\031\134\025\135\017\136\057\137\115\140\074" +
    "\141\117\142\120\143\053\144\040\145\050\146\033\147" +
    "\036\150\026\151\027\152\100\153\021\154\035\155\024" +
    "\156\060\157\055\001\002\000\014\003\uff41\041\uff41\043" +
    "\uff41\044\uff41\160\uff41\001\002\000\014\003\uff64\041\uff64" +
    "\043\uff64\044\uff64\160\uff64\001\002\000\014\003\uff33\041" +
    "\uff33\043\uff33\044\uff33\160\uff33\001\002\000\014\003\uff63" +
    "\041\uff63\043\uff63\044\uff63\160\uff63\001\002\000\014\003" +
    "\u01a2\041\130\043\uffab\044\uffab\160\uffab\001\002\000\014" +
    "\003\uff31\041\uff31\043\uff31\044\uff31\160\uff31\001\002\000" +
    "\014\003\uff42\041\uff42\043\uff42\044\uff42\160\uff42\001\002" +
    "\000\014\003\uff36\041\uff36\043\uff36\044\uff36\160\uff36\001" +
    "\002\000\014\003\uff35\041\uff35\043\uff35\044\uff35\160\uff35" +
    "\001\002\000\014\003\uff59\041\uff59\043\uff59\044\uff59\160" +
    "\uff59\001\002\000\014\003\uff43\041\uff43\043\uff43\044\uff43" +
    "\160\uff43\001\002\000\014\003\uff58\041\uff58\043\uff58\044" +
    "\uff58\160\uff58\001\002\000\014\003\uff38\041\uff38\043\uff38" +
    "\044\uff38\160\uff38\001\002\000\014\003\uff5c\041\uff5c\043" +
    "\uff5c\044\uff5c\160\uff5c\001\002\000\014\003\uff32\041\uff32" +
    "\043\uff32\044\uff32\160\uff32\001\002\000\014\003\uff37\041" +
    "\uff37\043\uff37\044\uff37\160\uff37\001\002\000\014\003\uff62" +
    "\041\uff62\043\uff62\044\uff62\160\uff62\001\002\000\014\003" +
    "\uff3a\041\uff3a\043\uff3a\044\uff3a\160\uff3a\001\002\000\014" +
    "\003\uff49\041\uff49\043\uff49\044\uff49\160\uff49\001\002\000" +
    "\014\003\uff61\041\uff61\043\uff61\044\uff61\160\uff61\001\002" +
    "\000\164\011\ufff6\016\020\017\022\020\037\021\104\022" +
    "\063\023\116\024\111\025\034\026\105\027\106\030\030" +
    "\031\032\032\075\033\065\034\114\035\072\036\077\037" +
    "\110\040\067\110\103\111\054\115\062\116\042\117\113" +
    "\120\066\121\061\122\112\123\046\124\056\125\041\126" +
    "\047\127\102\130\045\131\051\132\071\133\031\134\025" +
    "\135\017\136\057\137\115\140\074\141\117\142\120\143" +
    "\053\144\040\145\050\146\033\147\036\150\026\151\027" +
    "\152\100\153\021\154\035\155\024\156\060\157\055\001" +
    "\002\000\004\011\ufffa\001\002\000\014\003\uff46\041\uff46" +
    "\043\uff46\044\uff46\160\uff46\001\002\000\014\003\uff4b\041" +
    "\uff4b\043\uff4b\044\uff4b\160\uff4b\001\002\000\014\003\uff48" +
    "\041\uff48\043\uff48\044\uff48\160\uff48\001\002\000\014\003" +
    "\uff39\041\uff39\043\uff39\044\uff39\160\uff39\001\002\000\014" +
    "\003\uff45\041\uff45\043\uff45\044\uff45\160\uff45\001\002\000" +
    "\004\011\ufffc\001\002\000\014\003\uff3b\041\uff3b\043\uff3b" +
    "\044\uff3b\160\uff3b\001\002\000\006\003\175\160\176\001" +
    "\002\000\014\003\uff2f\041\uff2f\043\uff2f\044\uff2f\160\uff2f" +
    "\001\002\000\014\003\uff4a\041\uff4a\043\uff4a\044\uff4a\160" +
    "\uff4a\001\002\000\014\003\uff40\041\uff40\043\uff40\044\uff40" +
    "\160\uff40\001\002\000\014\003\uff30\041\uff30\043\uff30\044" +
    "\uff30\160\uff30\001\002\000\014\003\uff4d\041\uff4d\043\uff4d" +
    "\044\uff4d\160\uff4d\001\002\000\014\003\uff50\041\uff50\043" +
    "\uff50\044\uff50\160\uff50\001\002\000\014\003\uff5f\041\uff5f" +
    "\043\uff5f\044\uff5f\160\uff5f\001\002\000\004\011\165\001" +
    "\002\000\014\003\uff56\041\uff56\043\uff56\044\uff56\160\uff56" +
    "\001\002\000\014\003\uff4e\041\uff4e\043\uff4e\044\uff4e\160" +
    "\uff4e\001\002\000\014\003\uff51\041\uff51\043\uff51\044\uff51" +
    "\160\uff51\001\002\000\004\011\ufff8\001\002\000\014\003" +
    "\uff44\041\uff44\043\uff44\044\uff44\160\uff44\001\002\000\014" +
    "\003\uff54\041\uff54\043\uff54\044\uff54\160\uff54\001\002\000" +
    "\006\003\153\160\154\001\002\000\014\003\uff3e\041\uff3e" +
    "\043\uff3e\044\uff3e\160\uff3e\001\002\000\014\003\uff57\041" +
    "\uff57\043\uff57\044\uff57\160\uff57\001\002\000\166\011\ufff6" +
    "\013\073\016\020\017\022\020\037\021\104\022\063\023" +
    "\116\024\111\025\034\026\105\027\106\030\030\031\032" +
    "\032\075\033\065\034\114\035\072\036\077\037\110\040" +
    "\067\110\103\111\054\115\062\116\042\117\113\120\066" +
    "\121\061\122\112\123\046\124\056\125\041\126\047\127" +
    "\102\130\045\131\051\132\071\133\031\134\025\135\017" +
    "\136\057\137\115\140\074\141\117\142\120\143\053\144" +
    "\040\145\050\146\033\147\036\150\026\151\027\152\100" +
    "\153\021\154\035\155\024\156\060\157\055\001\002\000" +
    "\014\003\uff53\041\uff53\043\uff53\044\uff53\160\uff53\001\002" +
    "\000\014\003\uff34\041\uff34\043\uff34\044\uff34\160\uff34\001" +
    "\002\000\006\011\ufff6\111\054\001\002\000\014\003\uff47" +
    "\041\uff47\043\uff47\044\uff47\160\uff47\001\002\000\006\003" +
    "\122\160\123\001\002\000\014\003\uff60\041\uff60\043\uff60" +
    "\044\uff60\160\uff60\001\002\000\014\003\uff5b\041\uff5b\043" +
    "\uff5b\044\uff5b\160\uff5b\001\002\000\014\003\uff5a\041\uff5a" +
    "\043\uff5a\044\uff5a\160\uff5a\001\002\000\010\011\ufff6\110" +
    "\103\111\054\001\002\000\014\003\uff52\041\uff52\043\uff52" +
    "\044\uff52\160\uff52\001\002\000\014\003\uff5d\041\uff5d\043" +
    "\uff5d\044\uff5d\160\uff5d\001\002\000\014\003\uff4c\041\uff4c" +
    "\043\uff4c\044\uff4c\160\uff4c\001\002\000\014\003\uff4f\041" +
    "\uff4f\043\uff4f\044\uff4f\160\uff4f\001\002\000\014\003\uff55" +
    "\041\uff55\043\uff55\044\uff55\160\uff55\001\002\000\014\003" +
    "\uff3f\041\uff3f\043\uff3f\044\uff3f\160\uff3f\001\002\000\014" +
    "\003\uff5e\041\uff5e\043\uff5e\044\uff5e\160\uff5e\001\002\000" +
    "\014\003\uff3d\041\uff3d\043\uff3d\044\uff3d\160\uff3d\001\002" +
    "\000\014\003\uff3c\041\uff3c\043\uff3c\044\uff3c\160\uff3c\001" +
    "\002\000\004\011\ufff9\001\002\000\004\011\150\001\002" +
    "\000\006\003\125\010\124\001\002\000\156\016\020\017" +
    "\022\020\037\021\104\022\063\023\116\024\111\025\034" +
    "\026\105\027\106\030\030\031\032\032\075\033\065\034" +
    "\114\035\072\036\077\037\110\040\067\115\062\116\042" +
    "\117\113\120\066\121\061\122\112\123\046\124\056\125" +
    "\041\126\047\127\102\130\045\131\051\132\071\133\031" +
    "\134\025\135\017\136\057\137\115\140\074\141\117\142" +
    "\120\143\053\144\040\145\050\146\033\147\036\150\026" +
    "\151\027\152\100\153\021\154\035\155\024\156\060\157" +
    "\055\001\002\000\004\011\126\001\002\000\010\011\uffda" +
    "\110\uffda\111\uffda\001\002\000\012\041\130\043\uffab\044" +
    "\uffab\160\uffab\001\002\000\004\042\147\001\002\000\010" +
    "\043\132\044\133\160\uffa8\001\002\000\004\160\uffaa\001" +
    "\002\000\004\160\uffa9\001\002\000\004\160\135\001\002" +
    "\000\004\014\136\001\002\000\160\011\uffd8\016\020\017" +
    "\022\020\037\021\104\022\063\023\116\024\111\025\034" +
    "\026\105\027\106\030\030\031\032\032\075\033\065\034" +
    "\114\035\072\036\077\037\110\040\067\115\062\116\042" +
    "\117\113\120\066\121\061\122\112\123\046\124\056\125" +
    "\041\126\047\127\102\130\045\131\051\132\071\133\031" +
    "\134\025\135\017\136\057\137\115\140\074\141\117\142" +
    "\120\143\053\144\040\145\050\146\033\147\036\150\026" +
    "\151\027\152\100\153\021\154\035\155\024\156\060\157" +
    "\055\001\002\000\012\041\130\043\uffab\044\uffab\160\uffab" +
    "\001\002\000\004\011\141\001\002\000\010\011\uffdc\110" +
    "\uffdc\111\uffdc\001\002\000\010\043\132\044\133\160\uffa8" +
    "\001\002\000\004\160\144\001\002\000\004\014\145\001" +
    "\002\000\160\011\uffd8\016\020\017\022\020\037\021\104" +
    "\022\063\023\116\024\111\025\034\026\105\027\106\030" +
    "\030\031\032\032\075\033\065\034\114\035\072\036\077" +
    "\037\110\040\067\115\062\116\042\117\113\120\066\121" +
    "\061\122\112\123\046\124\056\125\041\126\047\127\102" +
    "\130\045\131\051\132\071\133\031\134\025\135\017\136" +
    "\057\137\115\140\074\141\117\142\120\143\053\144\040" +
    "\145\050\146\033\147\036\150\026\151\027\152\100\153" +
    "\021\154\035\155\024\156\060\157\055\001\002\000\004" +
    "\011\uffd9\001\002\000\010\043\uffac\044\uffac\160\uffac\001" +
    "\002\000\010\011\uffdb\110\uffdb\111\uffdb\001\002\000\004" +
    "\011\ufff7\001\002\000\004\011\ufffd\001\002\000\004\011" +
    "\164\001\002\000\004\010\155\001\002\000\004\160\156" +
    "\001\002\000\006\011\uffb2\015\157\001\002\000\004\160" +
    "\162\001\002\000\004\011\161\001\002\000\166\011\uffb5" +
    "\013\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5" +
    "\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040" +
    "\uffb5\110\uffb5\111\uffb5\115\uffb5\116\uffb5\117\uffb5\120\uffb5" +
    "\121\uffb5\122\uffb5\123\uffb5\124\uffb5\125\uffb5\126\uffb5\127" +
    "\uffb5\130\uffb5\131\uffb5\132\uffb5\133\uffb5\134\uffb5\135\uffb5" +
    "\136\uffb5\137\uffb5\140\uffb5\141\uffb5\142\uffb5\143\uffb5\144" +
    "\uffb5\145\uffb5\146\uffb5\147\uffb5\150\uffb5\151\uffb5\152\uffb5" +
    "\153\uffb5\154\uffb5\155\uffb5\156\uffb5\157\uffb5\001\002\000" +
    "\006\011\uffb2\015\157\001\002\000\004\011\uffb3\001\002" +
    "\000\166\011\uffb4\013\uffb4\016\uffb4\017\uffb4\020\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036" +
    "\uffb4\037\uffb4\040\uffb4\110\uffb4\111\uffb4\115\uffb4\116\uffb4" +
    "\117\uffb4\120\uffb4\121\uffb4\122\uffb4\123\uffb4\124\uffb4\125" +
    "\uffb4\126\uffb4\127\uffb4\130\uffb4\131\uffb4\132\uffb4\133\uffb4" +
    "\134\uffb4\135\uffb4\136\uffb4\137\uffb4\140\uffb4\141\uffb4\142" +
    "\uffb4\143\uffb4\144\uffb4\145\uffb4\146\uffb4\147\uffb4\150\uffb4" +
    "\151\uffb4\152\uffb4\153\uffb4\154\uffb4\155\uffb4\156\uffb4\157" +
    "\uffb4\001\002\000\006\002\ufffe\007\167\001\002\000\004" +
    "\002\000\001\002\000\004\160\170\001\002\000\004\010" +
    "\171\001\002\000\166\011\ufff6\013\073\016\020\017\022" +
    "\020\037\021\104\022\063\023\116\024\111\025\034\026" +
    "\105\027\106\030\030\031\032\032\075\033\065\034\114" +
    "\035\072\036\077\037\110\040\067\110\103\111\054\115" +
    "\062\116\042\117\113\120\066\121\061\122\112\123\046" +
    "\124\056\125\041\126\047\127\102\130\045\131\051\132" +
    "\071\133\031\134\025\135\017\136\057\137\115\140\074" +
    "\141\117\142\120\143\053\144\040\145\050\146\033\147" +
    "\036\150\026\151\027\152\100\153\021\154\035\155\024" +
    "\156\060\157\055\001\002\000\004\011\173\001\002\000" +
    "\006\002\ufffe\007\167\001\002\000\004\002\uffff\001\002" +
    "\000\004\011\u01a0\001\002\000\004\065\177\001\002\000" +
    "\156\016\020\017\022\020\037\021\104\022\063\023\116" +
    "\024\111\025\034\026\105\027\106\030\030\031\032\032" +
    "\075\033\065\034\114\035\072\036\077\037\110\040\067" +
    "\115\062\116\042\117\113\120\066\121\061\122\112\123" +
    "\046\124\056\125\041\126\047\127\102\130\045\131\051" +
    "\132\071\133\031\134\025\135\017\136\057\137\115\140" +
    "\074\141\117\142\120\143\053\144\040\145\050\146\033" +
    "\147\036\150\026\151\027\152\100\153\021\154\035\155" +
    "\024\156\060\157\055\001\002\000\004\160\201\001\002" +
    "\000\006\015\202\066\ufff2\001\002\000\156\016\020\017" +
    "\022\020\037\021\104\022\063\023\116\024\111\025\034" +
    "\026\105\027\106\030\030\031\032\032\075\033\065\034" +
    "\114\035\072\036\077\037\110\040\067\115\062\116\042" +
    "\117\113\120\066\121\061\122\112\123\046\124\056\125" +
    "\041\126\047\127\102\130\045\131\051\132\071\133\031" +
    "\134\025\135\017\136\057\137\115\140\074\141\117\142" +
    "\120\143\053\144\040\145\050\146\033\147\036\150\026" +
    "\151\027\152\100\153\021\154\035\155\024\156\060\157" +
    "\055\001\002\000\004\066\204\001\002\000\016\010\uffed" +
    "\043\205\044\207\112\211\113\210\114\uffed\001\002\000" +
    "\006\010\uffef\114\uffef\001\002\000\006\010\uffeb\114\213" +
    "\001\002\000\006\010\ufff0\114\ufff0\001\002\000\006\010" +
    "\uffee\114\uffee\001\002\000\006\010\ufff1\114\ufff1\001\002" +
    "\000\004\010\220\001\002\000\004\065\214\001\002\000" +
    "\156\016\020\017\022\020\037\021\104\022\063\023\116" +
    "\024\111\025\034\026\105\027\106\030\030\031\032\032" +
    "\075\033\065\034\114\035\072\036\077\037\110\040\067" +
    "\115\062\116\042\117\113\120\066\121\061\122\112\123" +
    "\046\124\056\125\041\126\047\127\102\130\045\131\051" +
    "\132\071\133\031\134\025\135\017\136\057\137\115\140" +
    "\074\141\117\142\120\143\053\144\040\145\050\146\033" +
    "\147\036\150\026\151\027\152\100\153\021\154\035\155" +
    "\024\156\060\157\055\001\002\000\004\160\216\001\002" +
    "\000\004\066\217\001\002\000\004\010\uffec\001\002\000" +
    "\206\016\020\017\022\020\037\021\104\022\063\023\116" +
    "\024\111\025\034\026\105\027\106\030\030\031\032\032" +
    "\075\033\065\034\114\035\072\036\077\037\110\040\067" +
    "\046\235\047\227\075\246\076\247\077\uffe9\102\225\103" +
    "\230\104\243\115\062\116\042\117\113\120\066\121\061" +
    "\122\112\123\046\124\056\125\041\126\047\127\102\130" +
    "\045\131\051\132\071\133\031\134\025\135\017\136\057" +
    "\137\115\140\074\141\117\142\120\143\053\144\040\145" +
    "\050\146\033\147\036\150\026\151\027\152\100\153\021" +
    "\154\035\155\024\156\060\157\055\160\222\161\241\162" +
    "\226\163\250\001\002\000\004\014\u019c\001\002\000\056" +
    "\014\uff9a\045\u0195\050\264\051\265\052\267\053\263\054" +
    "\261\055\262\056\257\057\270\060\266\061\346\062\336" +
    "\063\341\064\333\065\345\067\332\070\344\071\334\072" +
    "\330\073\340\074\u0194\001\002\000\004\077\u0190\001\002" +
    "\000\206\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\046\uffd5\047\uffd5\075\uffd5\076\uffd5\077\uffd5\102\uffd5" +
    "\103\uffd5\104\uffd5\115\uffd5\116\uffd5\117\uffd5\120\uffd5\121" +
    "\uffd5\122\uffd5\123\uffd5\124\uffd5\125\uffd5\126\uffd5\127\uffd5" +
    "\130\uffd5\131\uffd5\132\uffd5\133\uffd5\134\uffd5\135\uffd5\136" +
    "\uffd5\137\uffd5\140\uffd5\141\uffd5\142\uffd5\143\uffd5\144\uffd5" +
    "\145\uffd5\146\uffd5\147\uffd5\150\uffd5\151\uffd5\152\uffd5\153" +
    "\uffd5\154\uffd5\155\uffd5\156\uffd5\157\uffd5\160\uffd5\161\uffd5" +
    "\162\uffd5\163\uffd5\001\002\000\004\065\u0185\001\002\000" +
    "\010\014\uff66\066\uff66\107\uff66\001\002\000\032\014\uff70" +
    "\050\264\051\265\052\267\053\263\054\261\055\262\056" +
    "\257\057\270\060\266\066\uff70\107\uff70\001\002\000\004" +
    "\010\u017b\001\002\000\206\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036" +
    "\uffe7\037\uffe7\040\uffe7\046\uffe7\047\uffe7\075\uffe7\076\uffe7" +
    "\077\uffe7\102\uffe7\103\uffe7\104\uffe7\115\uffe7\116\uffe7\117" +
    "\uffe7\120\uffe7\121\uffe7\122\uffe7\123\uffe7\124\uffe7\125\uffe7" +
    "\126\uffe7\127\uffe7\130\uffe7\131\uffe7\132\uffe7\133\uffe7\134" +
    "\uffe7\135\uffe7\136\uffe7\137\uffe7\140\uffe7\141\uffe7\142\uffe7" +
    "\143\uffe7\144\uffe7\145\uffe7\146\uffe7\147\uffe7\150\uffe7\151" +
    "\uffe7\152\uffe7\153\uffe7\154\uffe7\155\uffe7\156\uffe7\157\uffe7" +
    "\160\uffe7\161\uffe7\162\uffe7\163\uffe7\001\002\000\010\014" +
    "\uffa3\066\uffa3\107\uffa3\001\002\000\012\041\130\043\uffab" +
    "\044\uffab\160\uffab\001\002\000\206\016\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\046\uffd6\047\uffd6\075\uffd6" +
    "\076\uffd6\077\uffd6\102\uffd6\103\uffd6\104\uffd6\115\uffd6\116" +
    "\uffd6\117\uffd6\120\uffd6\121\uffd6\122\uffd6\123\uffd6\124\uffd6" +
    "\125\uffd6\126\uffd6\127\uffd6\130\uffd6\131\uffd6\132\uffd6\133" +
    "\uffd6\134\uffd6\135\uffd6\136\uffd6\137\uffd6\140\uffd6\141\uffd6" +
    "\142\uffd6\143\uffd6\144\uffd6\145\uffd6\146\uffd6\147\uffd6\150" +
    "\uffd6\151\uffd6\152\uffd6\153\uffd6\154\uffd6\155\uffd6\156\uffd6" +
    "\157\uffd6\160\uffd6\161\uffd6\162\uffd6\163\uffd6\001\002\000" +
    "\032\014\uff70\050\264\051\265\052\267\053\263\054\261" +
    "\055\262\056\257\057\270\060\266\066\uff70\107\uff70\001" +
    "\002\000\010\014\uffa5\066\uffa5\107\uffa5\001\002\000\206" +
    "\016\020\017\022\020\037\021\104\022\063\023\116\024" +
    "\111\025\034\026\105\027\106\030\030\031\032\032\075" +
    "\033\065\034\114\035\072\036\077\037\110\040\067\046" +
    "\235\047\227\075\246\076\247\077\uffe9\102\225\103\230" +
    "\104\243\115\062\116\042\117\113\120\066\121\061\122" +
    "\112\123\046\124\056\125\041\126\047\127\102\130\045" +
    "\131\051\132\071\133\031\134\025\135\017\136\057\137" +
    "\115\140\074\141\117\142\120\143\053\144\040\145\050" +
    "\146\033\147\036\150\026\151\027\152\100\153\021\154" +
    "\035\155\024\156\060\157\055\160\222\161\241\162\226" +
    "\163\250\001\002\000\010\014\uffa4\066\uffa4\107\uffa4\001" +
    "\002\000\034\014\uff8b\061\u0104\062\377\063\374\064\u0103" +
    "\065\u0105\066\u0106\067\376\070\375\071\372\072\u0100\073" +
    "\u0101\107\uff8b\001\002\000\206\016\uffd7\017\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027" +
    "\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\046\uffd7\047\uffd7\075\uffd7\076" +
    "\uffd7\077\uffd7\102\uffd7\103\uffd7\104\uffd7\115\uffd7\116\uffd7" +
    "\117\uffd7\120\uffd7\121\uffd7\122\uffd7\123\uffd7\124\uffd7\125" +
    "\uffd7\126\uffd7\127\uffd7\130\uffd7\131\uffd7\132\uffd7\133\uffd7" +
    "\134\uffd7\135\uffd7\136\uffd7\137\uffd7\140\uffd7\141\uffd7\142" +
    "\uffd7\143\uffd7\144\uffd7\145\uffd7\146\uffd7\147\uffd7\150\uffd7" +
    "\151\uffd7\152\uffd7\153\uffd7\154\uffd7\155\uffd7\156\uffd7\157" +
    "\uffd7\160\uffd7\161\uffd7\162\uffd7\163\uffd7\001\002\000\004" +
    "\065\u0158\001\002\000\206\016\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\046\uffe3\047\uffe3\075\uffe3\076\uffe3" +
    "\077\uffe3\102\uffe3\103\uffe3\104\uffe3\115\uffe3\116\uffe3\117" +
    "\uffe3\120\uffe3\121\uffe3\122\uffe3\123\uffe3\124\uffe3\125\uffe3" +
    "\126\uffe3\127\uffe3\130\uffe3\131\uffe3\132\uffe3\133\uffe3\134" +
    "\uffe3\135\uffe3\136\uffe3\137\uffe3\140\uffe3\141\uffe3\142\uffe3" +
    "\143\uffe3\144\uffe3\145\uffe3\146\uffe3\147\uffe3\150\uffe3\151" +
    "\uffe3\152\uffe3\153\uffe3\154\uffe3\155\uffe3\156\uffe3\157\uffe3" +
    "\160\uffe3\161\uffe3\162\uffe3\163\uffe3\001\002\000\206\016" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\046\uffd4" +
    "\047\uffd4\075\uffd4\076\uffd4\077\uffd4\102\uffd4\103\uffd4\104" +
    "\uffd4\115\uffd4\116\uffd4\117\uffd4\120\uffd4\121\uffd4\122\uffd4" +
    "\123\uffd4\124\uffd4\125\uffd4\126\uffd4\127\uffd4\130\uffd4\131" +
    "\uffd4\132\uffd4\133\uffd4\134\uffd4\135\uffd4\136\uffd4\137\uffd4" +
    "\140\uffd4\141\uffd4\142\uffd4\143\uffd4\144\uffd4\145\uffd4\146" +
    "\uffd4\147\uffd4\150\uffd4\151\uffd4\152\uffd4\153\uffd4\154\uffd4" +
    "\155\uffd4\156\uffd4\157\uffd4\160\uffd4\161\uffd4\162\uffd4\163" +
    "\uffd4\001\002\000\004\074\u014e\001\002\000\004\065\251" +
    "\001\002\000\010\014\uff65\066\uff65\107\uff65\001\002\000" +
    "\010\046\255\047\252\160\254\001\002\000\032\014\uff70" +
    "\050\264\051\265\052\267\053\263\054\261\055\262\056" +
    "\257\057\270\060\266\066\uff70\107\uff70\001\002\000\004" +
    "\066\273\001\002\000\032\014\uff70\050\264\051\265\052" +
    "\267\053\263\054\261\055\262\056\257\057\270\060\266" +
    "\066\uff70\107\uff70\001\002\000\032\014\uff70\050\264\051" +
    "\265\052\267\053\263\054\261\055\262\056\257\057\270" +
    "\060\266\066\uff70\107\uff70\001\002\000\010\014\uff74\066" +
    "\uff74\107\uff74\001\002\000\010\046\uff69\047\uff69\160\uff69" +
    "\001\002\000\010\046\255\047\252\160\254\001\002\000" +
    "\010\046\uff6b\047\uff6b\160\uff6b\001\002\000\010\046\uff6a" +
    "\047\uff6a\160\uff6a\001\002\000\010\046\uff6c\047\uff6c\160" +
    "\uff6c\001\002\000\010\046\uff6f\047\uff6f\160\uff6f\001\002" +
    "\000\010\046\uff6e\047\uff6e\160\uff6e\001\002\000\010\046" +
    "\uff67\047\uff67\160\uff67\001\002\000\010\046\uff6d\047\uff6d" +
    "\160\uff6d\001\002\000\010\046\uff68\047\uff68\160\uff68\001" +
    "\002\000\010\014\uff71\066\uff71\107\uff71\001\002\000\010" +
    "\014\uff72\066\uff72\107\uff72\001\002\000\004\010\274\001" +
    "\002\000\024\075\275\076\302\077\307\100\303\101\276" +
    "\102\306\103\300\104\304\160\301\001\002\000\004\074" +
    "\u0148\001\002\000\004\014\u0147\001\002\000\026\011\uffc5" +
    "\075\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5\103" +
    "\uffc5\104\uffc5\160\uffc5\001\002\000\004\010\u013e\001\002" +
    "\000\010\045\u012c\065\u012d\074\u0128\001\002\000\004\065" +
    "\u0121\001\002\000\004\014\u0120\001\002\000\004\065\u0113" +
    "\001\002\000\026\011\uffcb\075\275\076\302\077\307\100" +
    "\303\101\276\102\306\103\300\104\304\160\301\001\002" +
    "\000\004\065\311\001\002\000\004\014\310\001\002\000" +
    "\026\011\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4" +
    "\102\uffc4\103\uffc4\104\uffc4\160\uffc4\001\002\000\004\160" +
    "\312\001\002\000\004\045\u010f\001\002\000\004\014\314" +
    "\001\002\000\010\046\255\047\252\160\254\001\002\000" +
    "\004\014\316\001\002\000\020\046\235\047\227\075\246" +
    "\160\317\161\241\162\226\163\250\001\002\000\060\014" +
    "\uff9a\050\264\051\265\052\267\053\263\054\261\055\262" +
    "\056\257\057\270\060\266\061\346\062\336\063\341\064" +
    "\333\065\345\066\uff9a\067\332\070\344\071\334\072\330" +
    "\073\340\074\337\107\uff9a\001\002\000\004\066\321\001" +
    "\002\000\004\010\322\001\002\000\024\075\275\076\302" +
    "\077\307\100\303\101\276\102\306\103\300\104\304\160" +
    "\301\001\002\000\026\011\uffcb\075\275\076\302\077\307" +
    "\100\303\101\276\102\306\103\300\104\304\160\301\001" +
    "\002\000\026\011\uffcb\075\275\076\302\077\307\100\303" +
    "\101\276\102\306\103\300\104\304\160\301\001\002\000" +
    "\004\011\326\001\002\000\026\011\uffc7\075\uffc7\076\uffc7" +
    "\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7\160" +
    "\uffc7\001\002\000\004\011\uffcc\001\002\000\010\075\uff76" +
    "\160\uff76\161\uff76\001\002\000\010\046\255\047\252\160" +
    "\254\001\002\000\010\075\uff79\160\uff79\161\uff79\001\002" +
    "\000\010\075\uff7a\160\uff7a\161\uff7a\001\002\000\010\075" +
    "\uff77\160\uff77\161\uff77\001\002\000\010\075\364\160\366" +
    "\161\365\001\002\000\010\075\uff7c\160\uff7c\161\uff7c\001" +
    "\002\000\004\160\362\001\002\000\010\075\uff75\160\uff75" +
    "\161\uff75\001\002\000\010\075\uff7b\160\uff7b\161\uff7b\001" +
    "\002\000\010\014\uffa7\066\uffa7\107\uffa7\001\002\000\010" +
    "\014\uff9e\066\uff9e\107\uff9e\001\002\000\010\075\uff78\160" +
    "\uff78\161\uff78\001\002\000\010\066\352\075\347\160\351" +
    "\001\002\000\010\075\uff7d\160\uff7d\161\uff7d\001\002\000" +
    "\004\074\357\001\002\000\010\014\uff9d\066\uff9d\107\uff9d" +
    "\001\002\000\006\015\353\066\354\001\002\000\010\014" +
    "\uff92\066\uff92\107\uff92\001\002\000\010\066\352\075\347" +
    "\160\351\001\002\000\010\014\uff90\066\uff90\107\uff90\001" +
    "\002\000\010\014\uff94\066\uff94\107\uff94\001\002\000\010" +
    "\014\uff91\066\uff91\107\uff91\001\002\000\004\160\360\001" +
    "\002\000\006\015\353\066\354\001\002\000\010\014\uff93" +
    "\066\uff93\107\uff93\001\002\000\056\014\uff9a\050\264\051" +
    "\265\052\267\053\263\054\261\055\262\056\257\057\270" +
    "\060\266\061\346\062\336\063\341\064\333\065\345\066" +
    "\uff9a\067\332\070\344\071\334\072\330\073\340\107\uff9a" +
    "\001\002\000\010\014\uff9f\066\uff9f\107\uff9f\001\002\000" +
    "\004\074\u010a\001\002\000\034\014\uff8b\061\u0104\062\377" +
    "\063\374\064\u0103\065\u0105\066\u0106\067\376\070\375\071" +
    "\372\072\u0100\073\u0101\107\uff8b\001\002\000\036\014\uff89" +
    "\061\uff89\062\uff89\063\uff89\064\uff89\065\uff89\066\uff89\067" +
    "\uff89\070\uff89\071\uff89\072\uff89\073\uff89\074\370\107\uff89" +
    "\001\002\000\010\014\uff9c\066\uff9c\107\uff9c\001\002\000" +
    "\004\160\u0108\001\002\000\034\014\uff8b\061\u0104\062\377" +
    "\063\374\064\u0103\065\u0105\066\u0106\067\376\070\375\071" +
    "\372\072\u0100\073\u0101\107\uff8b\001\002\000\010\075\uff80" +
    "\160\uff80\161\uff80\001\002\000\010\075\364\160\366\161" +
    "\365\001\002\000\010\075\uff86\160\uff86\161\uff86\001\002" +
    "\000\010\075\uff81\160\uff81\161\uff81\001\002\000\010\075" +
    "\uff82\160\uff82\161\uff82\001\002\000\010\075\uff87\160\uff87" +
    "\161\uff87\001\002\000\010\075\uff7f\160\uff7f\161\uff7f\001" +
    "\002\000\010\075\uff7e\160\uff7e\161\uff7e\001\002\000\010" +
    "\014\uff8e\066\uff8e\107\uff8e\001\002\000\010\075\uff85\160" +
    "\uff85\161\uff85\001\002\000\010\075\uff88\160\uff88\161\uff88" +
    "\001\002\000\010\075\uff84\160\uff84\161\uff84\001\002\000" +
    "\010\075\uff83\160\uff83\161\uff83\001\002\000\010\014\uff8c" +
    "\066\uff8c\107\uff8c\001\002\000\034\014\uff8a\061\uff8a\062" +
    "\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a" +
    "\071\uff8a\072\uff8a\073\uff8a\107\uff8a\001\002\000\010\014" +
    "\uff8f\066\uff8f\107\uff8f\001\002\000\004\160\u010b\001\002" +
    "\000\036\014\uff89\061\uff89\062\uff89\063\uff89\064\uff89\065" +
    "\uff89\066\uff89\067\uff89\070\uff89\071\uff89\072\uff89\073\uff89" +
    "\074\370\107\uff89\001\002\000\034\014\uff8b\061\u0104\062" +
    "\377\063\374\064\u0103\065\u0105\066\u0106\067\376\070\375" +
    "\071\372\072\u0100\073\u0101\107\uff8b\001\002\000\010\014" +
    "\uff8d\066\uff8d\107\uff8d\001\002\000\010\014\uff9b\066\uff9b" +
    "\107\uff9b\001\002\000\020\046\235\047\227\075\246\160" +
    "\317\161\241\162\226\163\250\001\002\000\004\014\uffb7" +
    "\001\002\000\004\011\u0112\001\002\000\206\016\uffd3\017" +
    "\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\046\uffd3\047\uffd3" +
    "\075\uffd3\076\uffd3\077\uffd3\102\uffd3\103\uffd3\104\uffd3\115" +
    "\uffd3\116\uffd3\117\uffd3\120\uffd3\121\uffd3\122\uffd3\123\uffd3" +
    "\124\uffd3\125\uffd3\126\uffd3\127\uffd3\130\uffd3\131\uffd3\132" +
    "\uffd3\133\uffd3\134\uffd3\135\uffd3\136\uffd3\137\uffd3\140\uffd3" +
    "\141\uffd3\142\uffd3\143\uffd3\144\uffd3\145\uffd3\146\uffd3\147" +
    "\uffd3\150\uffd3\151\uffd3\152\uffd3\153\uffd3\154\uffd3\155\uffd3" +
    "\156\uffd3\157\uffd3\160\uffd3\161\uffd3\162\uffd3\163\uffd3\001" +
    "\002\000\010\046\255\047\252\160\254\001\002\000\004" +
    "\066\u0115\001\002\000\004\010\u0116\001\002\000\024\075" +
    "\275\076\302\077\307\100\303\101\276\102\306\103\300" +
    "\104\304\160\301\001\002\000\026\011\uffcb\075\275\076" +
    "\302\077\307\100\303\101\276\102\306\103\300\104\304" +
    "\160\301\001\002\000\004\011\u0119\001\002\000\030\011" +
    "\uffba\075\uffba\076\uffba\077\uffba\100\uffba\101\uffba\102\uffba" +
    "\103\uffba\104\uffba\105\u011b\160\uffba\001\002\000\026\011" +
    "\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc" +
    "\103\uffbc\104\uffbc\160\uffbc\001\002\000\004\010\u011c\001" +
    "\002\000\024\075\275\076\302\077\307\100\303\101\276" +
    "\102\306\103\300\104\304\160\301\001\002\000\026\011" +
    "\uffcb\075\275\076\302\077\307\100\303\101\276\102\306" +
    "\103\300\104\304\160\301\001\002\000\004\011\u011f\001" +
    "\002\000\026\011\uffbb\075\uffbb\076\uffbb\077\uffbb\100\uffbb" +
    "\101\uffbb\102\uffbb\103\uffbb\104\uffbb\160\uffbb\001\002\000" +
    "\026\011\uffc3\075\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3" +
    "\102\uffc3\103\uffc3\104\uffc3\160\uffc3\001\002\000\010\046" +
    "\255\047\252\160\254\001\002\000\004\066\u0123\001\002" +
    "\000\004\010\u0124\001\002\000\024\075\275\076\302\077" +
    "\307\100\303\101\276\102\306\103\300\104\304\160\301" +
    "\001\002\000\026\011\uffcb\075\275\076\302\077\307\100" +
    "\303\101\276\102\306\103\300\104\304\160\301\001\002" +
    "\000\004\011\u0127\001\002\000\026\011\uffc8\075\uffc8\076" +
    "\uffc8\077\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8" +
    "\160\uffc8\001\002\000\004\160\u013c\001\002\000\026\011" +
    "\uffca\075\uffca\076\uffca\077\uffca\100\uffca\101\uffca\102\uffca" +
    "\103\uffca\104\uffca\160\uffca\001\002\000\026\011\uffbe\075" +
    "\uffbe\076\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe" +
    "\104\uffbe\160\uffbe\001\002\000\026\011\uffc0\075\uffc0\076" +
    "\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0" +
    "\160\uffc0\001\002\000\022\046\235\047\227\065\u0133\075" +
    "\246\160\317\161\241\162\226\163\250\001\002\000\002" +
    "\001\002\000\026\011\uffbf\075\uffbf\076\uffbf\077\uffbf\100" +
    "\uffbf\101\uffbf\102\uffbf\103\uffbf\104\uffbf\160\uffbf\001\002" +
    "\000\004\066\u0130\001\002\000\004\014\u0131\001\002\000" +
    "\026\011\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8\101\uffb8" +
    "\102\uffb8\103\uffb8\104\uffb8\160\uffb8\001\002\000\004\014" +
    "\u013b\001\002\000\010\046\255\047\252\160\254\001\002" +
    "\000\004\066\u0135\001\002\000\004\106\u0136\001\002\000" +
    "\020\046\235\047\227\075\246\160\317\161\241\162\226" +
    "\163\250\001\002\000\004\107\u0138\001\002\000\020\046" +
    "\235\047\227\075\246\160\317\161\241\162\226\163\250" +
    "\001\002\000\004\014\u013a\001\002\000\026\011\uffbd\075" +
    "\uffbd\076\uffbd\077\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd" +
    "\104\uffbd\160\uffbd\001\002\000\026\011\uffb9\075\uffb9\076" +
    "\uffb9\077\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9" +
    "\160\uffb9\001\002\000\006\045\u012c\065\u012d\001\002\000" +
    "\026\011\uffc1\075\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1" +
    "\102\uffc1\103\uffc1\104\uffc1\160\uffc1\001\002\000\024\075" +
    "\275\076\302\077\307\100\303\101\276\102\306\103\300" +
    "\104\304\160\301\001\002\000\026\011\uffcb\075\275\076" +
    "\302\077\307\100\303\101\276\102\306\103\300\104\304" +
    "\160\301\001\002\000\004\011\u0141\001\002\000\004\076" +
    "\u0142\001\002\000\004\065\u0143\001\002\000\010\046\255" +
    "\047\252\160\254\001\002\000\004\066\u0145\001\002\000" +
    "\004\014\u0146\001\002\000\026\011\uffc6\075\uffc6\076\uffc6" +
    "\077\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\160" +
    "\uffc6\001\002\000\026\011\uffc2\075\uffc2\076\uffc2\077\uffc2" +
    "\100\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\160\uffc2\001" +
    "\002\000\004\160\u0149\001\002\000\004\045\u014a\001\002" +
    "\000\020\046\235\047\227\075\246\160\317\161\241\162" +
    "\226\163\250\001\002\000\004\014\u014c\001\002\000\026" +
    "\011\uffc9\075\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9\102" +
    "\uffc9\103\uffc9\104\uffc9\160\uffc9\001\002\000\010\014\uff73" +
    "\066\uff73\107\uff73\001\002\000\004\160\u0150\001\002\000" +
    "\010\014\uffa6\066\uffa6\107\uffa6\001\002\000\056\014\uff95" +
    "\050\264\051\265\052\267\053\263\054\261\055\262\056" +
    "\257\057\270\060\266\061\346\062\336\063\341\064\333" +
    "\065\u0154\066\uff95\067\332\070\344\071\334\072\330\073" +
    "\340\107\uff95\001\002\000\010\046\255\047\252\160\254" +
    "\001\002\000\010\075\364\160\366\161\365\001\002\000" +
    "\010\014\uff99\066\uff99\107\uff99\001\002\000\010\066\352" +
    "\075\347\160\351\001\002\000\010\014\uff98\066\uff98\107" +
    "\uff98\001\002\000\010\014\uff97\066\uff97\107\uff97\001\002" +
    "\000\010\014\uff96\066\uff96\107\uff96\001\002\000\010\046" +
    "\255\047\252\160\254\001\002\000\004\066\u015a\001\002" +
    "\000\004\010\u015b\001\002\000\024\075\275\076\302\077" +
    "\307\100\303\101\276\102\306\103\300\104\304\160\301" +
    "\001\002\000\026\011\uffcb\075\275\076\302\077\307\100" +
    "\303\101\276\102\306\103\300\104\304\160\301\001\002" +
    "\000\004\011\u015e\001\002\000\210\016\uffce\017\uffce\020" +
    "\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\036\uffce\037\uffce\040\uffce\046\uffce\047\uffce\075\uffce" +
    "\076\uffce\077\uffce\102\uffce\103\uffce\104\uffce\105\u015f\115" +
    "\uffce\116\uffce\117\uffce\120\uffce\121\uffce\122\uffce\123\uffce" +
    "\124\uffce\125\uffce\126\uffce\127\uffce\130\uffce\131\uffce\132" +
    "\uffce\133\uffce\134\uffce\135\uffce\136\uffce\137\uffce\140\uffce" +
    "\141\uffce\142\uffce\143\uffce\144\uffce\145\uffce\146\uffce\147" +
    "\uffce\150\uffce\151\uffce\152\uffce\153\uffce\154\uffce\155\uffce" +
    "\156\uffce\157\uffce\160\uffce\161\uffce\162\uffce\163\uffce\001" +
    "\002\000\004\010\u0161\001\002\000\206\016\uffd0\017\uffd0" +
    "\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\040\uffd0\046\uffd0\047\uffd0\075" +
    "\uffd0\076\uffd0\077\uffd0\102\uffd0\103\uffd0\104\uffd0\115\uffd0" +
    "\116\uffd0\117\uffd0\120\uffd0\121\uffd0\122\uffd0\123\uffd0\124" +
    "\uffd0\125\uffd0\126\uffd0\127\uffd0\130\uffd0\131\uffd0\132\uffd0" +
    "\133\uffd0\134\uffd0\135\uffd0\136\uffd0\137\uffd0\140\uffd0\141" +
    "\uffd0\142\uffd0\143\uffd0\144\uffd0\145\uffd0\146\uffd0\147\uffd0" +
    "\150\uffd0\151\uffd0\152\uffd0\153\uffd0\154\uffd0\155\uffd0\156" +
    "\uffd0\157\uffd0\160\uffd0\161\uffd0\162\uffd0\163\uffd0\001\002" +
    "\000\024\075\275\076\302\077\307\100\303\101\276\102" +
    "\306\103\300\104\304\160\301\001\002\000\026\011\uffcb" +
    "\075\275\076\302\077\307\100\303\101\276\102\306\103" +
    "\300\104\304\160\301\001\002\000\004\011\u0164\001\002" +
    "\000\206\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\046\uffcf\047\uffcf\075\uffcf\076\uffcf\077\uffcf\102\uffcf" +
    "\103\uffcf\104\uffcf\115\uffcf\116\uffcf\117\uffcf\120\uffcf\121" +
    "\uffcf\122\uffcf\123\uffcf\124\uffcf\125\uffcf\126\uffcf\127\uffcf" +
    "\130\uffcf\131\uffcf\132\uffcf\133\uffcf\134\uffcf\135\uffcf\136" +
    "\uffcf\137\uffcf\140\uffcf\141\uffcf\142\uffcf\143\uffcf\144\uffcf" +
    "\145\uffcf\146\uffcf\147\uffcf\150\uffcf\151\uffcf\152\uffcf\153" +
    "\uffcf\154\uffcf\155\uffcf\156\uffcf\157\uffcf\160\uffcf\161\uffcf" +
    "\162\uffcf\163\uffcf\001\002\000\010\014\uffa0\066\uffa0\107" +
    "\uffa0\001\002\000\004\077\uffea\001\002\000\010\014\uffa2" +
    "\066\uffa2\107\uffa2\001\002\000\010\043\132\044\133\160" +
    "\uffa8\001\002\000\004\160\u016a\001\002\000\006\014\u016d" +
    "\045\u016c\001\002\000\206\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\046\uffe8\047\uffe8\075\uffe8\076\uffe8" +
    "\077\uffe8\102\uffe8\103\uffe8\104\uffe8\115\uffe8\116\uffe8\117" +
    "\uffe8\120\uffe8\121\uffe8\122\uffe8\123\uffe8\124\uffe8\125\uffe8" +
    "\126\uffe8\127\uffe8\130\uffe8\131\uffe8\132\uffe8\133\uffe8\134" +
    "\uffe8\135\uffe8\136\uffe8\137\uffe8\140\uffe8\141\uffe8\142\uffe8" +
    "\143\uffe8\144\uffe8\145\uffe8\146\uffe8\147\uffe8\150\uffe8\151" +
    "\uffe8\152\uffe8\153\uffe8\154\uffe8\155\uffe8\156\uffe8\157\uffe8" +
    "\160\uffe8\161\uffe8\162\uffe8\163\uffe8\001\002\000\022\046" +
    "\235\047\227\065\u0172\075\246\160\317\161\241\162\226" +
    "\163\250\001\002\000\206\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\046\uffdf\047\uffdf\075\uffdf\076\uffdf" +
    "\077\uffdf\102\uffdf\103\uffdf\104\uffdf\115\uffdf\116\uffdf\117" +
    "\uffdf\120\uffdf\121\uffdf\122\uffdf\123\uffdf\124\uffdf\125\uffdf" +
    "\126\uffdf\127\uffdf\130\uffdf\131\uffdf\132\uffdf\133\uffdf\134" +
    "\uffdf\135\uffdf\136\uffdf\137\uffdf\140\uffdf\141\uffdf\142\uffdf" +
    "\143\uffdf\144\uffdf\145\uffdf\146\uffdf\147\uffdf\150\uffdf\151" +
    "\uffdf\152\uffdf\153\uffdf\154\uffdf\155\uffdf\156\uffdf\157\uffdf" +
    "\160\uffdf\161\uffdf\162\uffdf\163\uffdf\001\002\000\206\016" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\046\uffe0" +
    "\047\uffe0\075\uffe0\076\uffe0\077\uffe0\102\uffe0\103\uffe0\104" +
    "\uffe0\115\uffe0\116\uffe0\117\uffe0\120\uffe0\121\uffe0\122\uffe0" +
    "\123\uffe0\124\uffe0\125\uffe0\126\uffe0\127\uffe0\130\uffe0\131" +
    "\uffe0\132\uffe0\133\uffe0\134\uffe0\135\uffe0\136\uffe0\137\uffe0" +
    "\140\uffe0\141\uffe0\142\uffe0\143\uffe0\144\uffe0\145\uffe0\146" +
    "\uffe0\147\uffe0\150\uffe0\151\uffe0\152\uffe0\153\uffe0\154\uffe0" +
    "\155\uffe0\156\uffe0\157\uffe0\160\uffe0\161\uffe0\162\uffe0\163" +
    "\uffe0\001\002\000\206\016\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\046\uffdd\047\uffdd\075\uffdd\076\uffdd\077" +
    "\uffdd\102\uffdd\103\uffdd\104\uffdd\115\uffdd\116\uffdd\117\uffdd" +
    "\120\uffdd\121\uffdd\122\uffdd\123\uffdd\124\uffdd\125\uffdd\126" +
    "\uffdd\127\uffdd\130\uffdd\131\uffdd\132\uffdd\133\uffdd\134\uffdd" +
    "\135\uffdd\136\uffdd\137\uffdd\140\uffdd\141\uffdd\142\uffdd\143" +
    "\uffdd\144\uffdd\145\uffdd\146\uffdd\147\uffdd\150\uffdd\151\uffdd" +
    "\152\uffdd\153\uffdd\154\uffdd\155\uffdd\156\uffdd\157\uffdd\160" +
    "\uffdd\161\uffdd\162\uffdd\163\uffdd\001\002\000\206\016\uffde" +
    "\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde" +
    "\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\046\uffde\047" +
    "\uffde\075\uffde\076\uffde\077\uffde\102\uffde\103\uffde\104\uffde" +
    "\115\uffde\116\uffde\117\uffde\120\uffde\121\uffde\122\uffde\123" +
    "\uffde\124\uffde\125\uffde\126\uffde\127\uffde\130\uffde\131\uffde" +
    "\132\uffde\133\uffde\134\uffde\135\uffde\136\uffde\137\uffde\140" +
    "\uffde\141\uffde\142\uffde\143\uffde\144\uffde\145\uffde\146\uffde" +
    "\147\uffde\150\uffde\151\uffde\152\uffde\153\uffde\154\uffde\155" +
    "\uffde\156\uffde\157\uffde\160\uffde\161\uffde\162\uffde\163\uffde" +
    "\001\002\000\004\014\u017a\001\002\000\010\046\255\047" +
    "\252\160\254\001\002\000\004\066\u0174\001\002\000\004" +
    "\106\u0175\001\002\000\020\046\235\047\227\075\246\160" +
    "\317\161\241\162\226\163\250\001\002\000\004\107\u0177" +
    "\001\002\000\020\046\235\047\227\075\246\160\317\161" +
    "\241\162\226\163\250\001\002\000\004\014\u0179\001\002" +
    "\000\206\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\046\uffcd\047\uffcd\075\uffcd\076\uffcd\077\uffcd\102\uffcd" +
    "\103\uffcd\104\uffcd\115\uffcd\116\uffcd\117\uffcd\120\uffcd\121" +
    "\uffcd\122\uffcd\123\uffcd\124\uffcd\125\uffcd\126\uffcd\127\uffcd" +
    "\130\uffcd\131\uffcd\132\uffcd\133\uffcd\134\uffcd\135\uffcd\136" +
    "\uffcd\137\uffcd\140\uffcd\141\uffcd\142\uffcd\143\uffcd\144\uffcd" +
    "\145\uffcd\146\uffcd\147\uffcd\150\uffcd\151\uffcd\152\uffcd\153" +
    "\uffcd\154\uffcd\155\uffcd\156\uffcd\157\uffcd\160\uffcd\161\uffcd" +
    "\162\uffcd\163\uffcd\001\002\000\206\016\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\046\uffb6\047\uffb6\075\uffb6" +
    "\076\uffb6\077\uffb6\102\uffb6\103\uffb6\104\uffb6\115\uffb6\116" +
    "\uffb6\117\uffb6\120\uffb6\121\uffb6\122\uffb6\123\uffb6\124\uffb6" +
    "\125\uffb6\126\uffb6\127\uffb6\130\uffb6\131\uffb6\132\uffb6\133" +
    "\uffb6\134\uffb6\135\uffb6\136\uffb6\137\uffb6\140\uffb6\141\uffb6" +
    "\142\uffb6\143\uffb6\144\uffb6\145\uffb6\146\uffb6\147\uffb6\150" +
    "\uffb6\151\uffb6\152\uffb6\153\uffb6\154\uffb6\155\uffb6\156\uffb6" +
    "\157\uffb6\160\uffb6\161\uffb6\162\uffb6\163\uffb6\001\002\000" +
    "\024\075\275\076\302\077\307\100\303\101\276\102\306" +
    "\103\300\104\304\160\301\001\002\000\026\011\uffcb\075" +
    "\275\076\302\077\307\100\303\101\276\102\306\103\300" +
    "\104\304\160\301\001\002\000\004\011\u017e\001\002\000" +
    "\004\076\u017f\001\002\000\004\065\u0180\001\002\000\010" +
    "\046\255\047\252\160\254\001\002\000\004\066\u0182\001" +
    "\002\000\004\014\u0183\001\002\000\206\016\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\040\uffd1\046\uffd1\047\uffd1\075" +
    "\uffd1\076\uffd1\077\uffd1\102\uffd1\103\uffd1\104\uffd1\115\uffd1" +
    "\116\uffd1\117\uffd1\120\uffd1\121\uffd1\122\uffd1\123\uffd1\124" +
    "\uffd1\125\uffd1\126\uffd1\127\uffd1\130\uffd1\131\uffd1\132\uffd1" +
    "\133\uffd1\134\uffd1\135\uffd1\136\uffd1\137\uffd1\140\uffd1\141" +
    "\uffd1\142\uffd1\143\uffd1\144\uffd1\145\uffd1\146\uffd1\147\uffd1" +
    "\150\uffd1\151\uffd1\152\uffd1\153\uffd1\154\uffd1\155\uffd1\156" +
    "\uffd1\157\uffd1\160\uffd1\161\uffd1\162\uffd1\163\uffd1\001\002" +
    "\000\010\014\uffa1\066\uffa1\107\uffa1\001\002\000\004\160" +
    "\312\001\002\000\004\014\u0187\001\002\000\010\046\255" +
    "\047\252\160\254\001\002\000\004\014\u0189\001\002\000" +
    "\020\046\235\047\227\075\246\160\317\161\241\162\226" +
    "\163\250\001\002\000\004\066\u018b\001\002\000\004\010" +
    "\u018c\001\002\000\024\075\275\076\302\077\307\100\303" +
    "\101\276\102\306\103\300\104\304\160\301\001\002\000" +
    "\026\011\uffcb\075\275\076\302\077\307\100\303\101\276" +
    "\102\306\103\300\104\304\160\301\001\002\000\004\011" +
    "\u018f\001\002\000\206\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\046\uffd2\047\uffd2\075\uffd2\076\uffd2\077" +
    "\uffd2\102\uffd2\103\uffd2\104\uffd2\115\uffd2\116\uffd2\117\uffd2" +
    "\120\uffd2\121\uffd2\122\uffd2\123\uffd2\124\uffd2\125\uffd2\126" +
    "\uffd2\127\uffd2\130\uffd2\131\uffd2\132\uffd2\133\uffd2\134\uffd2" +
    "\135\uffd2\136\uffd2\137\uffd2\140\uffd2\141\uffd2\142\uffd2\143" +
    "\uffd2\144\uffd2\145\uffd2\146\uffd2\147\uffd2\150\uffd2\151\uffd2" +
    "\152\uffd2\153\uffd2\154\uffd2\155\uffd2\156\uffd2\157\uffd2\160" +
    "\uffd2\161\uffd2\162\uffd2\163\uffd2\001\002\000\020\046\235" +
    "\047\227\075\246\160\317\161\241\162\226\163\250\001" +
    "\002\000\004\014\u0192\001\002\000\004\011\u0193\001\002" +
    "\000\006\011\ufff5\111\ufff5\001\002\000\004\160\u0199\001" +
    "\002\000\022\046\235\047\227\065\u0172\075\246\160\317" +
    "\161\241\162\226\163\250\001\002\000\206\016\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\046\uffe1\047\uffe1" +
    "\075\uffe1\076\uffe1\077\uffe1\102\uffe1\103\uffe1\104\uffe1\115" +
    "\uffe1\116\uffe1\117\uffe1\120\uffe1\121\uffe1\122\uffe1\123\uffe1" +
    "\124\uffe1\125\uffe1\126\uffe1\127\uffe1\130\uffe1\131\uffe1\132" +
    "\uffe1\133\uffe1\134\uffe1\135\uffe1\136\uffe1\137\uffe1\140\uffe1" +
    "\141\uffe1\142\uffe1\143\uffe1\144\uffe1\145\uffe1\146\uffe1\147" +
    "\uffe1\150\uffe1\151\uffe1\152\uffe1\153\uffe1\154\uffe1\155\uffe1" +
    "\156\uffe1\157\uffe1\160\uffe1\161\uffe1\162\uffe1\163\uffe1\001" +
    "\002\000\206\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\040\uffe2\046\uffe2\047\uffe2\075\uffe2\076\uffe2\077\uffe2\102" +
    "\uffe2\103\uffe2\104\uffe2\115\uffe2\116\uffe2\117\uffe2\120\uffe2" +
    "\121\uffe2\122\uffe2\123\uffe2\124\uffe2\125\uffe2\126\uffe2\127" +
    "\uffe2\130\uffe2\131\uffe2\132\uffe2\133\uffe2\134\uffe2\135\uffe2" +
    "\136\uffe2\137\uffe2\140\uffe2\141\uffe2\142\uffe2\143\uffe2\144" +
    "\uffe2\145\uffe2\146\uffe2\147\uffe2\150\uffe2\151\uffe2\152\uffe2" +
    "\153\uffe2\154\uffe2\155\uffe2\156\uffe2\157\uffe2\160\uffe2\161" +
    "\uffe2\162\uffe2\163\uffe2\001\002\000\206\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\037\uffe6\040\uffe6\046\uffe6\047\uffe6\075" +
    "\uffe6\076\uffe6\077\uffe6\102\uffe6\103\uffe6\104\uffe6\115\uffe6" +
    "\116\uffe6\117\uffe6\120\uffe6\121\uffe6\122\uffe6\123\uffe6\124" +
    "\uffe6\125\uffe6\126\uffe6\127\uffe6\130\uffe6\131\uffe6\132\uffe6" +
    "\133\uffe6\134\uffe6\135\uffe6\136\uffe6\137\uffe6\140\uffe6\141" +
    "\uffe6\142\uffe6\143\uffe6\144\uffe6\145\uffe6\146\uffe6\147\uffe6" +
    "\150\uffe6\151\uffe6\152\uffe6\153\uffe6\154\uffe6\155\uffe6\156" +
    "\uffe6\157\uffe6\160\uffe6\161\uffe6\162\uffe6\163\uffe6\001\002" +
    "\000\054\014\uff9a\045\u019a\050\264\051\265\052\267\053" +
    "\263\054\261\055\262\056\257\057\270\060\266\061\346" +
    "\062\336\063\341\064\333\065\345\067\332\070\344\071" +
    "\334\072\330\073\340\001\002\000\022\046\235\047\227" +
    "\065\u0172\075\246\160\317\161\241\162\226\163\250\001" +
    "\002\000\206\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5" +
    "\040\uffe5\046\uffe5\047\uffe5\075\uffe5\076\uffe5\077\uffe5\102" +
    "\uffe5\103\uffe5\104\uffe5\115\uffe5\116\uffe5\117\uffe5\120\uffe5" +
    "\121\uffe5\122\uffe5\123\uffe5\124\uffe5\125\uffe5\126\uffe5\127" +
    "\uffe5\130\uffe5\131\uffe5\132\uffe5\133\uffe5\134\uffe5\135\uffe5" +
    "\136\uffe5\137\uffe5\140\uffe5\141\uffe5\142\uffe5\143\uffe5\144" +
    "\uffe5\145\uffe5\146\uffe5\147\uffe5\150\uffe5\151\uffe5\152\uffe5" +
    "\153\uffe5\154\uffe5\155\uffe5\156\uffe5\157\uffe5\160\uffe5\161" +
    "\uffe5\162\uffe5\163\uffe5\001\002\000\206\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\037\uffe4\040\uffe4\046\uffe4\047\uffe4\075" +
    "\uffe4\076\uffe4\077\uffe4\102\uffe4\103\uffe4\104\uffe4\115\uffe4" +
    "\116\uffe4\117\uffe4\120\uffe4\121\uffe4\122\uffe4\123\uffe4\124" +
    "\uffe4\125\uffe4\126\uffe4\127\uffe4\130\uffe4\131\uffe4\132\uffe4" +
    "\133\uffe4\134\uffe4\135\uffe4\136\uffe4\137\uffe4\140\uffe4\141" +
    "\uffe4\142\uffe4\143\uffe4\144\uffe4\145\uffe4\146\uffe4\147\uffe4" +
    "\150\uffe4\151\uffe4\152\uffe4\153\uffe4\154\uffe4\155\uffe4\156" +
    "\uffe4\157\uffe4\160\uffe4\161\uffe4\162\uffe4\163\uffe4\001\002" +
    "\000\004\160\u019e\001\002\000\006\015\202\066\ufff2\001" +
    "\002\000\004\066\ufff3\001\002\000\006\011\ufff4\111\ufff4" +
    "\001\002\000\004\011\ufffb\001\002\000\004\014\u01ac\001" +
    "\002\000\010\043\132\044\133\160\uffa8\001\002\000\004" +
    "\160\u01a5\001\002\000\006\014\u01a8\045\u01a6\001\002\000" +
    "\020\046\235\047\227\075\246\160\317\161\241\162\226" +
    "\163\250\001\002\000\164\011\uffb1\016\uffb1\017\uffb1\020" +
    "\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1" +
    "\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\110\uffb1\111\uffb1\115\uffb1" +
    "\116\uffb1\117\uffb1\120\uffb1\121\uffb1\122\uffb1\123\uffb1\124" +
    "\uffb1\125\uffb1\126\uffb1\127\uffb1\130\uffb1\131\uffb1\132\uffb1" +
    "\133\uffb1\134\uffb1\135\uffb1\136\uffb1\137\uffb1\140\uffb1\141" +
    "\uffb1\142\uffb1\143\uffb1\144\uffb1\145\uffb1\146\uffb1\147\uffb1" +
    "\150\uffb1\151\uffb1\152\uffb1\153\uffb1\154\uffb1\155\uffb1\156" +
    "\uffb1\157\uffb1\001\002\000\164\011\uffaf\016\uffaf\017\uffaf" +
    "\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026" +
    "\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf" +
    "\035\uffaf\036\uffaf\037\uffaf\040\uffaf\110\uffaf\111\uffaf\115" +
    "\uffaf\116\uffaf\117\uffaf\120\uffaf\121\uffaf\122\uffaf\123\uffaf" +
    "\124\uffaf\125\uffaf\126\uffaf\127\uffaf\130\uffaf\131\uffaf\132" +
    "\uffaf\133\uffaf\134\uffaf\135\uffaf\136\uffaf\137\uffaf\140\uffaf" +
    "\141\uffaf\142\uffaf\143\uffaf\144\uffaf\145\uffaf\146\uffaf\147" +
    "\uffaf\150\uffaf\151\uffaf\152\uffaf\153\uffaf\154\uffaf\155\uffaf" +
    "\156\uffaf\157\uffaf\001\002\000\004\014\u01aa\001\002\000" +
    "\164\011\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae" +
    "\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031" +
    "\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae" +
    "\040\uffae\110\uffae\111\uffae\115\uffae\116\uffae\117\uffae\120" +
    "\uffae\121\uffae\122\uffae\123\uffae\124\uffae\125\uffae\126\uffae" +
    "\127\uffae\130\uffae\131\uffae\132\uffae\133\uffae\134\uffae\135" +
    "\uffae\136\uffae\137\uffae\140\uffae\141\uffae\142\uffae\143\uffae" +
    "\144\uffae\145\uffae\146\uffae\147\uffae\150\uffae\151\uffae\152" +
    "\uffae\153\uffae\154\uffae\155\uffae\156\uffae\157\uffae\001\002" +
    "\000\004\014\uffad\001\002\000\164\011\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\110\uffb0\111\uffb0" +
    "\115\uffb0\116\uffb0\117\uffb0\120\uffb0\121\uffb0\122\uffb0\123" +
    "\uffb0\124\uffb0\125\uffb0\126\uffb0\127\uffb0\130\uffb0\131\uffb0" +
    "\132\uffb0\133\uffb0\134\uffb0\135\uffb0\136\uffb0\137\uffb0\140" +
    "\uffb0\141\uffb0\142\uffb0\143\uffb0\144\uffb0\145\uffb0\146\uffb0" +
    "\147\uffb0\150\uffb0\151\uffb0\152\uffb0\153\uffb0\154\uffb0\155" +
    "\uffb0\156\uffb0\157\uffb0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01aa\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\063" +
    "\005\051\006\043\007\067\011\075\014\100\016\022\021" +
    "\042\067\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\u01a2\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\u01a0" +
    "\006\043\007\067\014\100\016\022\021\042\067\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\004\151\005\051\006\043\007\067\011\075" +
    "\014\100\016\022\021\042\067\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\150\014\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\120\007\067" +
    "\014\100\067\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\130\001\001\000\002\001\001" +
    "\000\004\020\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\136" +
    "\070\137\001\001\000\004\017\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\136\070\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\140\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\171\005\051\006\043" +
    "\007\067\011\075\014\100\016\022\021\042\067\106\001" +
    "\001\000\002\001\001\000\004\140\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\177\001\001\000\002\001\001\000\004\075\202\001\001" +
    "\000\004\016\u019c\001\001\000\002\001\001\000\004\076" +
    "\205\001\001\000\002\001\001\000\004\077\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\013\243\016\232\026\220\046\235\050\241\057\233" +
    "\061\223\062\244\073\230\100\222\131\231\134\237\141" +
    "\236\001\001\000\002\001\001\000\012\034\330\105\341" +
    "\130\334\136\342\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\034\257" +
    "\036\u0183\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\u0167\001\001\000\002\001\001" +
    "\000\006\034\257\036\u0166\001\001\000\002\001\001\000" +
    "\034\013\243\016\232\026\220\046\235\050\241\057\233" +
    "\061\223\062\244\073\230\100\u0165\131\231\134\237\141" +
    "\236\001\001\000\002\001\001\000\006\031\372\035\u0164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\106\u014e\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\252\001\001\000" +
    "\006\034\257\036\u014c\001\001\000\002\001\001\000\006" +
    "\034\257\036\271\001\001\000\006\034\257\036\255\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\270" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\051\304\071\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\053\u012d\054\u0128\055\u0129" +
    "\103\u012a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\051\323\056\u0110\071\276\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\060\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\314\001\001\000\002\001\001\000\012\026" +
    "\317\046\235\131\231\134\237\001\001\000\012\034\330" +
    "\105\341\130\334\136\342\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\051\322\071\276\001\001\000\010" +
    "\051\323\056\324\071\276\001\001\000\010\051\323\056" +
    "\326\071\276\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\u010d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\366\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\132\347\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\133\354\001\001\000\002\001\001\000\004\132" +
    "\355\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\133\360\001\001\000" +
    "\002\001\001\000\010\034\330\130\334\136\362\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\372\035" +
    "\u0108\001\001\000\004\135\370\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\372\035\u0101\001\001\000" +
    "\002\001\001\000\004\027\u0106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\135\u010b\001\001\000\006\031" +
    "\372\035\u010c\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\026\u010f\046\235\131\231\134\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\u0113\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\051\u0116\071\276\001\001\000\010\051\323\056\u0117" +
    "\071\276\001\001\000\002\001\001\000\004\072\u0119\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\051\u011c" +
    "\071\276\001\001\000\010\051\323\056\u011d\071\276\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\u0121\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\051\u0124\071\276\001\001\000\010\051\323" +
    "\056\u0125\071\276\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\026\u0131\046\235\131\231\134" +
    "\237\001\001\000\004\041\u012e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\u0133\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\026\u0136\046\235\131\231\134" +
    "\237\001\001\000\002\001\001\000\012\026\u0138\046\235" +
    "\131\231\134\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\053\u012d\055\u0129\103\u013c" +
    "\001\001\000\002\001\001\000\006\051\u013e\071\276\001" +
    "\001\000\010\051\323\056\u013f\071\276\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\u0143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\026\u014a\046\235\131\231\134\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\034\u0150\120\u0152" +
    "\130\u0151\001\001\000\004\032\u0156\001\001\000\004\027" +
    "\u0155\001\001\000\002\001\001\000\004\132\u0154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\u0158\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\051\u015b\071\276\001\001\000\010\051\323\056" +
    "\u015c\071\276\001\001\000\002\001\001\000\004\063\u015f" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\051" +
    "\u0161\071\276\001\001\000\010\051\323\056\u0162\071\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\u0168" +
    "\001\001\000\002\001\001\000\004\142\u016a\001\001\000" +
    "\002\001\001\000\020\026\u0170\046\235\064\u016e\102\u016f" +
    "\131\231\134\237\143\u016d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\u0172\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\026\u0175\046\235\131\231\134\237" +
    "\001\001\000\002\001\001\000\012\026\u0177\046\235\131" +
    "\231\134\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\051\u017b\071\276\001\001\000" +
    "\010\051\323\056\u017c\071\276\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\u0180\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\u0185\001\001\000\002\001" +
    "\001\000\004\032\u0187\001\001\000\002\001\001\000\012" +
    "\026\u0189\046\235\131\231\134\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\051\u018c\071\276\001\001" +
    "\000\010\051\323\056\u018d\071\276\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\026\u0190\046\235\131\231" +
    "\134\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\026\u0170\046\235" +
    "\064\u0195\102\u0196\104\u0197\131\231\134\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\034\330\130\334\136\362\001\001\000\020\026\u0170\046" +
    "\235\064\u0195\102\u0196\104\u019a\131\231\134\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\075\u019e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\u01a3\001" +
    "\001\000\002\001\001\000\006\023\u01a8\047\u01a6\001\001" +
    "\000\012\026\u01aa\046\235\131\231\134\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static LinkedList<TError> TablaES = new LinkedList<TError>(); 

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        if(s.value != null){
            String lexema = s.value.toString();
            int fila = s.left;
            int columna = s.right;
            TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
            TablaES.add(datos);
            System.out.println("------ Recuperacion exitosa ------");
            System.out.println("\t\tLexema: "+lexema);
        }
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        if(s.value != null){
            String lexema = s.value.toString();
            int fila = s.left;
            int columna = s.right;
            TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
            TablaES.add(datos);
            System.out.println("------ Error Sintactico irrecuperable ------");
            System.out.println("\t\tLexema: "+lexema);
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico$actions {



  private final analisis_sintactico parser;

  /** Constructor */
  CUP$analisis_sintactico$actions(analisis_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action_part00000000(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico$parser.done_parsing();
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= pragma solidity techo numero numero punto_coma contract ident O_Parent_L BODY_CONTRACT C_Parent_L INICIO_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO_S ::= contract ident O_Parent_L BODY_CONTRACT C_Parent_L INICIO_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_S",94, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_S",94, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BODY_CONTRACT ::= EN BODY_CONTRACT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BODY_CONTRACT ::= BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BODY_CONTRACT_P ::= VAR_CONTRACT BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BODY_CONTRACT_P ::= BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BODY_CONTRACT_PP ::= STRUCTURE BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BODY_CONTRACT_PP ::= BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BODY_CONTRACT_PPP ::= FUNC BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BODY_CONTRACT_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNC ::= functionSoli ident O_Parent_R TIPO ident FUNC_PARAM C_Parent_R FUNC_MOD FUNC_RETURNS O_Parent_L CUERPO_M returnSoli EXP punto_coma C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNC ::= functionSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNC_PARAM ::= coma TIPO ident FUNC_PARAM 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNC_PARAM ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNC_MOD ::= payableSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNC_MOD ::= privateSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNC_MOD ::= publicSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNC_MOD ::= internalSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNC_MOD ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNC_RETURNS ::= returns O_Parent_R TIPO ident C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_RETURNS",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNC_RETURNS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_RETURNS",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO_M ::= CUERPO_MA CUERPO_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO_M ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPO_MA ::= TIPO VAR_ARR VAR_ACCESS ident CUERPO_ASSIGN_F 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_MA",95, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPO_MA ::= CUERPO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_MA",95, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CUERPO ::= ident igual CUERPO_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPO ::= ident punto ident igual CUERPO_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPO ::= EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPO ::= STRU 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPO_P ::= ASSIGN_NOT_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_P",66, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUERPO_P ::= STRU_IF_LINE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_P",66, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CUERPO_ASSIGN_F ::= igual CUERPO_ASSIGN_FP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_F",96, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CUERPO_ASSIGN_F ::= punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_F",96, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CUERPO_ASSIGN_FP ::= ASSIGN_NOT_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_FP",97, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUERPO_ASSIGN_FP ::= STRU_IF_LINE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_FP",97, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // STRUCTURE ::= structSoli ident O_Parent_L TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // STRUCTURE ::= structSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // STRUCTURE ::= structSoli ident error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // STRUCTURE_VAR ::= TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // STRUCTURE_VAR ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STRU ::= STRU_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STRU ::= STRU_FOR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STRU ::= STRU_DO_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STRU ::= STRU_IF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // STRU_WHILE ::= whileSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_WHILE",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STRU_FOR ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_FOR",45, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STRU_DO_WHILE ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_DO_WHILE",47, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STRU_IF ::= ifSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L STRU_ELSE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF",48, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STRU_ELSE ::= elseSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STRU_ELSE ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STRU_IF_LINE ::= O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP punto_punto EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_LINE",50, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BODY_SENT_M ::= BODY_SENT BODY_SENT_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BODY_SENT_M ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BODY_SENT ::= ident BODY_SENT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BODY_SENT ::= thisSoli punto ident igual EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BODY_SENT ::= whileSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BODY_SENT ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BODY_SENT ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BODY_SENT ::= STRU_IF_ELSE_IN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BODY_SENT ::= returnSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BODY_SENT ::= breakSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BODY_SENT ::= continueSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BODY_SENT_P ::= punto ident BODY_SENT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BODY_SENT_P ::= BODY_SENT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BODY_SENT_PP ::= BODY_ASSIGN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BODY_SENT_PP ::= BODY_FUN_CALL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BODY_SENT_PP ::= igual O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP punto_punto EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // STRU_IF_ELSE_IN ::= ifSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L STRU_ELSE_IN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_ELSE_IN",55, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // STRU_ELSE_IN ::= elseSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // STRU_ELSE_IN ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BODY_ASSIGN ::= igual EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_ASSIGN",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // BODY_FUN_CALL ::= O_Parent_R FUNC_CALL_PARAMS C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_FUN_CALL",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FOR_VAR ::= ident igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FOR_VAR",46, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ASSIGN_NOT_VAR ::= EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ASSIGN_NOT_VAR",64, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EN ::= enumSoli ident O_Parent_L ident EN_IDENT C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EN ::= enumSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EN_IDENT ::= coma ident EN_IDENT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EN_IDENT ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VAR_CONTRACT ::= TIPO VAR_ARR VAR_ACCESS ident VAR_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VAR_CONTRACT ::= TIPO error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VAR_CONTRACT_P ::= punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VAR_CONTRACT_P ::= VAR_CONTRACT_C punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VAR_CONTRACT_C ::= igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_C",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VAR_ARR ::= O_Parent_C C_Parent_C 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VAR_ARR ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VAR_ACCESS ::= publicSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VAR_ACCESS ::= privateSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VAR_ACCESS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= ident EXP_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= thisSoli EXP_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= BODY_LIT_TF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= ARIT_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= BOOL_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // BOOL_GATE ::= trueSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BOOL_GATE",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // BOOL_GATE ::= falseSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BOOL_GATE",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ARIT_GATE ::= numero OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARIT_GATE",90, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP_P ::= punto ident EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P",67, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP_P ::= EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P",67, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP_P_S ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP_P_S ::= OP_EXCL OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP_P_S ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP_P_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP_PP ::= punto ident EXP_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PP",68, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP_PPP ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP_PPP ::= OP_EXCL OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXP_PPP ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXP_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FUNC_CALL_CASE ::= ident FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // FUNC_CALL_CASE ::= thisSoli punto ident FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // FUNC_CALL_CASE ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FUNC_CALL_CASE_P ::= coma FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE_P",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FUNC_CALL_CASE_P ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE_P",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OP_ARIT ::= numero OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OP_ARIT ::= ident OP_ARIT_Parent OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OP_ARIT ::= thisSoli punto ident OP_ARIT_Parent OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OP_ARIT_P ::= OP OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OP_ARIT_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OP_ARIT_Parent ::= punto ident 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_Parent",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OP_ARIT_Parent ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_Parent",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OP ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OP ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OP ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OP ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OP ::= O_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OP ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OP ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OP ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OP ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OP ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OP ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OP_EXCL ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OP_EXCL ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OP_EXCL ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OP_EXCL ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OP_EXCL ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OP_EXCL ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OP_EXCL ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OP_EXCL ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OP_EXCL ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OP_BOOL ::= trueSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OP_BOOL ::= falseSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OP_BOOL ::= ident OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OP_BOOL_P ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OP_BOOL_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OP_OP_BOOL ::= igual_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OP_OP_BOOL ::= mayor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OP_OP_BOOL ::= mayor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OP_OP_BOOL ::= menor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OP_OP_BOOL ::= menor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OP_OP_BOOL ::= diferente 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OP_OP_BOOL ::= op_or 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OP_OP_BOOL ::= op_and 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OP_OP_BOOL ::= negacion 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // BODY_LIT_TF ::= numero_HEX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // BODY_LIT_TF ::= stringSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TIPO ::= bool 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // TIPO ::= byteSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // TIPO ::= bytes 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // TIPO ::= string 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // TIPO ::= uint 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // TIPO ::= uint_O 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // TIPO ::= uint_DS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // TIPO ::= uint_TD 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // TIPO ::= uint_SC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // TIPO ::= uint_CVO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // TIPO ::= uint_DCS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // TIPO ::= intSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // TIPO ::= int_O 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // TIPO ::= int_DS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // TIPO ::= int_TD 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // TIPO ::= int_SC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // TIPO ::= int_CVO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // TIPO ::= int_DCS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // TIPO ::= address 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // TIPO ::= address_payable 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // TIPO ::= charss 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // TIPO ::= ufixedSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // TIPO ::= B_I 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // TIPO ::= B_II 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // TIPO ::= B_III 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // TIPO ::= B_IV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // TIPO ::= B_V 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // TIPO ::= B_VI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // TIPO ::= B_VII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // TIPO ::= B_IIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // TIPO ::= B_IX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // TIPO ::= B_X 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // TIPO ::= B_XI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // TIPO ::= B_XII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // TIPO ::= B_XIII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // TIPO ::= B_XIV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // TIPO ::= B_XV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // TIPO ::= B_XVI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // TIPO ::= B_XVII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // TIPO ::= B_XIIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // TIPO ::= B_XIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // TIPO ::= B_XX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // TIPO ::= B_XXI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // TIPO ::= B_XXII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // TIPO ::= B_XXIII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // TIPO ::= B_XXIV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // TIPO ::= B_XXV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // TIPO ::= B_XXVI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // TIPO ::= B_XXVII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // TIPO ::= B_XXIIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // TIPO ::= B_XXIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // TIPO ::= B_XXX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // TIPO ::= B_XXXI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // TIPO ::= B_XXXII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$analisis_sintactico$do_action_part00000000(
                               CUP$analisis_sintactico$act_num,
                               CUP$analisis_sintactico$parser,
                               CUP$analisis_sintactico$stack,
                               CUP$analisis_sintactico$top);
    }
}

}
