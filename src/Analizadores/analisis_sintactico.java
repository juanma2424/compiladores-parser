
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symb.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\227\000\002\002\004\000\002\002\010\000\002\002" +
    "\003\000\002\004\004\000\002\004\003\000\002\005\004" +
    "\000\002\005\003\000\002\006\004\000\002\006\003\000" +
    "\002\007\004\000\002\007\003\000\002\014\022\000\002" +
    "\075\006\000\002\075\003\000\002\076\003\000\002\076" +
    "\003\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\077\007\000\002\100\004\000\002\100\003\000" +
    "\002\073\003\000\002\073\003\000\002\073\003\000\002" +
    "\074\005\000\002\074\003\000\002\067\014\000\002\070" +
    "\010\000\002\070\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\050\014\000\002\057\017\000\002\061\014\000\002" +
    "\062\012\000\002\062\003\000\002\063\007\000\002\063" +
    "\003\000\002\064\013\000\002\056\004\000\002\056\003" +
    "\000\002\051\004\000\002\051\014\000\002\051\017\000" +
    "\002\051\014\000\002\051\003\000\002\051\004\000\002" +
    "\051\004\000\002\051\004\000\002\054\003\000\002\054" +
    "\003\000\002\054\013\000\002\071\012\000\002\071\003" +
    "\000\002\072\007\000\002\052\005\000\002\052\003\000" +
    "\002\053\006\000\002\053\007\000\002\053\004\000\002" +
    "\055\006\000\002\055\010\000\002\060\005\000\002\065" +
    "\004\000\002\066\003\000\002\066\004\000\002\102\005" +
    "\000\002\011\011\000\002\015\005\000\002\015\003\000" +
    "\002\021\007\000\002\047\003\000\002\047\004\000\002" +
    "\023\004\000\002\017\004\000\002\017\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\037\004\000\002\040\006\000\002" +
    "\040\010\000\002\041\004\000\002\041\003\000\002\042" +
    "\005\000\002\042\003\000\002\027\004\000\002\035\005" +
    "\000\002\035\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\032\004" +
    "\000\002\032\004\000\002\036\005\000\002\036\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\043\004" +
    "\000\002\043\004\000\002\044\004\000\002\044\006\000" +
    "\002\044\003\000\002\045\004\000\002\045\006\000\002" +
    "\046\003\000\002\046\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016f\000\006\007\004\012\006\001\002\000\004\115" +
    "\010\001\002\000\004\002\007\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\001\001\002\000\004\010\011\001" +
    "\002\000\060\013\041\016\027\017\050\020\032\021\030" +
    "\022\022\023\025\024\016\025\045\026\014\027\013\030" +
    "\015\031\051\032\046\033\040\034\024\035\034\036\033" +
    "\037\017\040\047\110\036\111\052\120\012\001\002\000" +
    "\010\012\uff7b\041\uff7b\115\uff7b\001\002\000\010\012\uff74" +
    "\041\uff74\115\uff74\001\002\000\010\012\uff75\041\uff75\115" +
    "\uff75\001\002\000\010\012\uff73\041\uff73\115\uff73\001\002" +
    "\000\010\012\uff77\041\uff77\115\uff77\001\002\000\010\012" +
    "\uff6c\041\uff6c\115\uff6c\001\002\000\004\011\ufff9\001\002" +
    "\000\004\011\ufffb\001\002\000\010\012\uff79\041\uff79\115" +
    "\uff79\001\002\000\004\011\ufffd\001\002\000\010\012\uff6f" +
    "\041\uff6f\115\uff6f\001\002\000\010\012\uff78\041\uff78\115" +
    "\uff78\001\002\000\006\012\u0157\041\u0155\001\002\000\010" +
    "\012\uff7e\041\uff7e\115\uff7e\001\002\000\010\012\uff7a\041" +
    "\uff7a\115\uff7a\001\002\000\004\111\052\001\002\000\010" +
    "\012\uff7c\041\uff7c\115\uff7c\001\002\000\010\012\uff6d\041" +
    "\uff6d\115\uff6d\001\002\000\010\012\uff6e\041\uff6e\115\uff6e" +
    "\001\002\000\004\011\ufff7\001\002\000\004\115\u0152\001" +
    "\002\000\006\110\036\111\052\001\002\000\010\012\uff70" +
    "\041\uff70\115\uff70\001\002\000\004\115\u0147\001\002\000" +
    "\004\011\u0145\001\002\000\056\016\027\017\050\020\032" +
    "\021\030\022\022\023\025\024\016\025\045\026\014\027" +
    "\013\030\015\031\051\032\046\033\040\034\024\035\034" +
    "\036\033\037\017\040\047\110\036\111\052\120\012\001" +
    "\002\000\060\013\041\016\027\017\050\020\032\021\030" +
    "\022\022\023\025\024\016\025\045\026\014\027\013\030" +
    "\015\031\051\032\046\033\040\034\024\035\034\036\033" +
    "\037\017\040\047\110\036\111\052\120\012\001\002\000" +
    "\010\012\uff76\041\uff76\115\uff76\001\002\000\010\012\uff71" +
    "\041\uff71\115\uff71\001\002\000\010\012\uff6b\041\uff6b\115" +
    "\uff6b\001\002\000\010\012\uff7d\041\uff7d\115\uff7d\001\002" +
    "\000\010\012\uff72\041\uff72\115\uff72\001\002\000\004\115" +
    "\053\001\002\000\004\065\054\001\002\000\052\016\027" +
    "\017\050\020\032\021\030\022\022\023\025\024\016\025" +
    "\045\026\014\027\013\030\015\031\051\032\046\033\040" +
    "\034\024\035\034\036\033\037\017\040\047\120\012\001" +
    "\002\000\004\115\056\001\002\000\006\012\061\015\057" +
    "\001\002\000\052\016\027\017\050\020\032\021\030\022" +
    "\022\023\025\024\016\025\045\026\014\027\013\030\015" +
    "\031\051\032\046\033\040\034\024\035\034\036\033\037" +
    "\017\040\047\120\012\001\002\000\004\066\062\001\002" +
    "\000\004\066\ufff4\001\002\000\014\012\070\043\063\044" +
    "\065\112\067\113\066\001\002\000\004\114\ufff1\001\002" +
    "\000\004\114\072\001\002\000\004\114\ufff2\001\002\000" +
    "\004\114\ufff0\001\002\000\004\114\ufff3\001\002\000\004" +
    "\114\uffef\001\002\000\004\010\077\001\002\000\004\065" +
    "\073\001\002\000\052\016\027\017\050\020\032\021\030" +
    "\022\022\023\025\024\016\025\045\026\014\027\013\030" +
    "\015\031\051\032\046\033\040\034\024\035\034\036\033" +
    "\037\017\040\047\120\012\001\002\000\004\115\075\001" +
    "\002\000\004\066\076\001\002\000\004\010\uffee\001\002" +
    "\000\054\012\102\016\027\017\050\020\032\021\030\022" +
    "\022\023\025\024\016\025\045\026\014\027\013\030\015" +
    "\031\051\032\046\033\040\034\024\035\034\036\033\037" +
    "\017\040\047\120\012\001\002\000\034\012\141\046\113" +
    "\047\132\075\134\076\131\102\130\103\140\104\112\105" +
    "\120\115\127\116\122\117\123\120\110\001\002\000\004" +
    "\014\103\001\002\000\034\012\uffe7\046\uffe7\047\uffe7\075" +
    "\uffe7\076\uffe7\102\uffe7\103\uffe7\104\uffe7\105\uffe7\115\uffe7" +
    "\116\uffe7\117\uffe7\120\uffe7\001\002\000\054\012\102\016" +
    "\027\017\050\020\032\021\030\022\022\023\025\024\016" +
    "\025\045\026\014\027\013\030\015\031\051\032\046\033" +
    "\040\034\024\035\034\036\033\037\017\040\047\120\012" +
    "\001\002\000\034\012\uffe8\046\uffe8\047\uffe8\075\uffe8\076" +
    "\uffe8\102\uffe8\103\uffe8\104\uffe8\105\uffe8\115\uffe8\116\uffe8" +
    "\117\uffe8\120\uffe8\001\002\000\004\045\u0138\001\002\000" +
    "\034\012\uffeb\046\uffeb\047\uffeb\075\uffeb\076\uffeb\102\uffeb" +
    "\103\uffeb\104\uffeb\105\uffeb\115\uffeb\116\uffeb\117\uffeb\120" +
    "\uffeb\001\002\000\050\012\uffab\014\uffab\046\uffab\047\uffab" +
    "\066\uffab\075\uffab\076\uffab\077\uffab\100\uffab\101\uffab\102" +
    "\uffab\103\uffab\104\uffab\105\uffab\107\uffab\115\uffab\116\uffab" +
    "\117\uffab\120\uffab\001\002\000\050\012\uff7f\014\uff7f\046" +
    "\uff7f\047\uff7f\066\uff7f\075\uff7f\076\uff7f\077\uff7f\100\uff7f" +
    "\101\uff7f\102\uff7f\103\uff7f\104\uff7f\105\uff7f\107\uff7f\115" +
    "\uff7f\116\uff7f\117\uff7f\120\uff7f\001\002\000\050\012\uffad" +
    "\014\uffad\046\uffad\047\uffad\066\uffad\075\uffad\076\uffad\077" +
    "\uffad\100\uffad\101\uffad\102\uffad\103\uffad\104\uffad\105\uffad" +
    "\107\uffad\115\uffad\116\uffad\117\uffad\120\uffad\001\002\000" +
    "\004\065\u0131\001\002\000\026\012\370\050\365\051\366" +
    "\052\371\053\364\054\362\055\363\056\360\057\372\060" +
    "\367\001\002\000\034\012\uffda\046\uffda\047\uffda\075\uffda" +
    "\076\uffda\102\uffda\103\uffda\104\uffda\105\uffda\115\uffda\116" +
    "\uffda\117\uffda\120\uffda\001\002\000\034\012\uffe3\046\uffe3" +
    "\047\uffe3\075\uffe3\076\uffe3\102\uffe3\103\uffe3\104\uffe3\105" +
    "\uffe3\115\uffe3\116\uffe3\117\uffe3\120\uffe3\001\002\000\004" +
    "\077\u012c\001\002\000\034\012\141\046\113\047\132\075" +
    "\134\076\131\102\130\103\140\104\112\105\120\115\127" +
    "\116\122\117\123\120\110\001\002\000\004\010\u0127\001" +
    "\002\000\034\012\uffdf\046\uffdf\047\uffdf\075\uffdf\076\uffdf" +
    "\102\uffdf\103\uffdf\104\uffdf\105\uffdf\115\uffdf\116\uffdf\117" +
    "\uffdf\120\uffdf\001\002\000\032\012\u0106\061\u0107\062\u0101" +
    "\063\376\064\u0104\065\u0108\066\u0109\067\u0100\070\377\071" +
    "\375\072\u0102\073\u0103\001\002\000\050\012\uff80\014\uff80" +
    "\046\uff80\047\uff80\066\uff80\075\uff80\076\uff80\077\uff80\100" +
    "\uff80\101\uff80\102\uff80\103\uff80\104\uff80\105\uff80\107\uff80" +
    "\115\uff80\116\uff80\117\uff80\120\uff80\001\002\000\050\012" +
    "\uffac\014\uffac\046\uffac\047\uffac\066\uffac\075\uffac\076\uffac" +
    "\077\uffac\100\uffac\101\uffac\102\uffac\103\uffac\104\uffac\105" +
    "\uffac\107\uffac\115\uffac\116\uffac\117\uffac\120\uffac\001\002" +
    "\000\050\012\uffaa\014\uffaa\046\uffaa\047\uffaa\066\uffaa\075" +
    "\uffaa\076\uffaa\077\uffaa\100\uffaa\101\uffaa\102\uffaa\103\uffaa" +
    "\104\uffaa\105\uffaa\107\uffaa\115\uffaa\116\uffaa\117\uffaa\120" +
    "\uffaa\001\002\000\034\012\uffea\046\uffea\047\uffea\075\uffea" +
    "\076\uffea\102\uffea\103\uffea\104\uffea\105\uffea\115\uffea\116" +
    "\uffea\117\uffea\120\uffea\001\002\000\012\012\u0123\045\u0122" +
    "\065\203\074\u0121\001\002\000\004\065\u0115\001\002\000" +
    "\004\065\u010c\001\002\000\026\012\370\050\365\051\366" +
    "\052\371\053\364\054\362\055\363\056\360\057\372\060" +
    "\367\001\002\000\050\012\uffae\014\uffae\046\uffae\047\uffae" +
    "\066\uffae\075\uffae\076\uffae\077\uffae\100\uffae\101\uffae\102" +
    "\uffae\103\uffae\104\uffae\105\uffae\107\uffae\115\uffae\116\uffae" +
    "\117\uffae\120\uffae\001\002\000\004\074\352\001\002\000" +
    "\034\012\uffe1\046\uffe1\047\uffe1\075\uffe1\076\uffe1\102\uffe1" +
    "\103\uffe1\104\uffe1\105\uffe1\115\uffe1\116\uffe1\117\uffe1\120" +
    "\uffe1\001\002\000\034\012\uffe2\046\uffe2\047\uffe2\075\uffe2" +
    "\076\uffe2\102\uffe2\103\uffe2\104\uffe2\105\uffe2\115\uffe2\116" +
    "\uffe2\117\uffe2\120\uffe2\001\002\000\034\012\uffe9\046\uffe9" +
    "\047\uffe9\075\uffe9\076\uffe9\102\uffe9\103\uffe9\104\uffe9\105" +
    "\uffe9\115\uffe9\116\uffe9\117\uffe9\120\uffe9\001\002\000\004" +
    "\010\143\001\002\000\036\012\uffd8\046\uffd8\047\uffd8\075" +
    "\uffd8\076\uffd8\077\uffec\102\uffd8\103\uffd8\104\uffd8\105\uffd8" +
    "\115\uffd8\116\uffd8\117\uffd8\120\uffd8\001\002\000\034\012" +
    "\uffe0\046\uffe0\047\uffe0\075\uffe0\076\uffe0\102\uffe0\103\uffe0" +
    "\104\uffe0\105\uffe0\115\uffe0\116\uffe0\117\uffe0\120\uffe0\001" +
    "\002\000\024\076\152\077\157\100\153\101\144\102\156" +
    "\103\150\104\154\105\147\115\151\001\002\000\004\014" +
    "\351\001\002\000\030\012\uffc8\014\uffc8\076\uffc8\077\uffc8" +
    "\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\105\uffc8\115" +
    "\uffc8\001\002\000\030\012\uffd0\014\uffd0\076\uffd0\077\uffd0" +
    "\100\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0\105\uffd0\115" +
    "\uffd0\001\002\000\004\010\345\001\002\000\004\010\334" +
    "\001\002\000\014\045\300\065\277\074\274\075\271\115" +
    "\273\001\002\000\004\065\253\001\002\000\004\014\252" +
    "\001\002\000\004\065\243\001\002\000\026\012\176\076" +
    "\152\077\157\100\153\101\144\102\156\103\150\104\154" +
    "\105\147\115\151\001\002\000\004\065\161\001\002\000" +
    "\004\014\160\001\002\000\030\012\uffcf\014\uffcf\076\uffcf" +
    "\077\uffcf\100\uffcf\101\uffcf\102\uffcf\103\uffcf\104\uffcf\105" +
    "\uffcf\115\uffcf\001\002\000\004\115\162\001\002\000\004" +
    "\045\232\001\002\000\004\014\164\001\002\000\006\046" +
    "\113\047\132\001\002\000\004\014\166\001\002\000\020" +
    "\046\113\047\132\075\134\115\167\116\122\117\123\120" +
    "\110\001\002\000\010\012\206\065\203\074\202\001\002" +
    "\000\004\066\171\001\002\000\004\010\172\001\002\000" +
    "\024\076\152\077\157\100\153\101\144\102\156\103\150" +
    "\104\154\105\147\115\151\001\002\000\004\014\174\001" +
    "\002\000\026\012\176\076\152\077\157\100\153\101\144" +
    "\102\156\103\150\104\154\105\147\115\151\001\002\000" +
    "\026\012\176\076\152\077\157\100\153\101\144\102\156" +
    "\103\150\104\154\105\147\115\151\001\002\000\030\011" +
    "\uffd5\012\uffd5\076\uffd5\077\uffd5\100\uffd5\101\uffd5\102\uffd5" +
    "\103\uffd5\104\uffd5\105\uffd5\115\uffd5\001\002\000\004\011" +
    "\200\001\002\000\030\012\uffd2\014\uffd2\076\uffd2\077\uffd2" +
    "\100\uffd2\101\uffd2\102\uffd2\103\uffd2\104\uffd2\105\uffd2\115" +
    "\uffd2\001\002\000\030\011\uffd6\012\uffd6\076\uffd6\077\uffd6" +
    "\100\uffd6\101\uffd6\102\uffd6\103\uffd6\104\uffd6\105\uffd6\115" +
    "\uffd6\001\002\000\004\115\227\001\002\000\006\012\211" +
    "\115\207\001\002\000\050\012\uffa9\014\uffa9\046\uffa9\047" +
    "\uffa9\066\uffa9\075\uffa9\076\uffa9\077\uffa9\100\uffa9\101\uffa9" +
    "\102\uffa9\103\uffa9\104\uffa9\105\uffa9\107\uffa9\115\uffa9\116" +
    "\uffa9\117\uffa9\120\uffa9\001\002\000\050\012\uff87\014\uff87" +
    "\046\uff87\047\uff87\066\uff87\075\uff87\076\uff87\077\uff87\100" +
    "\uff87\101\uff87\102\uff87\103\uff87\104\uff87\105\uff87\107\uff87" +
    "\115\uff87\116\uff87\117\uff87\120\uff87\001\002\000\050\012" +
    "\uff83\014\uff83\046\uff83\047\uff83\066\uff83\075\uff83\076\uff83" +
    "\077\uff83\100\uff83\101\uff83\102\uff83\103\uff83\104\uff83\105" +
    "\uff83\107\uff83\115\uff83\116\uff83\117\uff83\120\uff83\001\002" +
    "\000\006\012\216\015\214\001\002\000\004\066\212\001" +
    "\002\000\004\066\uffa5\001\002\000\004\014\213\001\002" +
    "\000\050\012\uffa8\014\uffa8\046\uffa8\047\uffa8\066\uffa8\075" +
    "\uffa8\076\uffa8\077\uffa8\100\uffa8\101\uffa8\102\uffa8\103\uffa8" +
    "\104\uffa8\105\uffa8\107\uffa8\115\uffa8\116\uffa8\117\uffa8\120" +
    "\uffa8\001\002\000\004\115\217\001\002\000\004\066\uffa6" +
    "\001\002\000\004\066\uffa3\001\002\000\006\065\203\074" +
    "\220\001\002\000\004\115\222\001\002\000\004\066\uffa4" +
    "\001\002\000\004\065\223\001\002\000\006\012\211\115" +
    "\207\001\002\000\004\066\225\001\002\000\004\014\226" +
    "\001\002\000\050\012\uffa7\014\uffa7\046\uffa7\047\uffa7\066" +
    "\uffa7\075\uffa7\076\uffa7\077\uffa7\100\uffa7\101\uffa7\102\uffa7" +
    "\103\uffa7\104\uffa7\105\uffa7\107\uffa7\115\uffa7\116\uffa7\117" +
    "\uffa7\120\uffa7\001\002\000\052\012\uff85\014\uff85\046\uff85" +
    "\047\uff85\065\230\066\uff85\075\uff85\076\uff85\077\uff85\100" +
    "\uff85\101\uff85\102\uff85\103\uff85\104\uff85\105\uff85\107\uff85" +
    "\115\uff85\116\uff85\117\uff85\120\uff85\001\002\000\010\012" +
    "\211\066\231\115\207\001\002\000\050\012\uff84\014\uff84" +
    "\046\uff84\047\uff84\066\uff84\075\uff84\076\uff84\077\uff84\100" +
    "\uff84\101\uff84\102\uff84\103\uff84\104\uff84\105\uff84\107\uff84" +
    "\115\uff84\116\uff84\117\uff84\120\uff84\001\002\000\020\046" +
    "\113\047\132\075\134\115\167\116\122\117\123\120\110" +
    "\001\002\000\004\014\uffbf\001\002\000\004\011\235\001" +
    "\002\000\004\076\236\001\002\000\004\065\237\001\002" +
    "\000\006\046\113\047\132\001\002\000\004\066\241\001" +
    "\002\000\004\014\242\001\002\000\034\012\uffdc\046\uffdc" +
    "\047\uffdc\075\uffdc\076\uffdc\102\uffdc\103\uffdc\104\uffdc\105" +
    "\uffdc\115\uffdc\116\uffdc\117\uffdc\120\uffdc\001\002\000\006" +
    "\046\113\047\132\001\002\000\004\066\245\001\002\000" +
    "\004\010\246\001\002\000\024\076\152\077\157\100\153" +
    "\101\144\102\156\103\150\104\154\105\147\115\151\001" +
    "\002\000\026\012\176\076\152\077\157\100\153\101\144" +
    "\102\156\103\150\104\154\105\147\115\151\001\002\000" +
    "\004\011\251\001\002\000\030\012\uffc9\014\uffc9\076\uffc9" +
    "\077\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\105" +
    "\uffc9\115\uffc9\001\002\000\030\012\uffce\014\uffce\076\uffce" +
    "\077\uffce\100\uffce\101\uffce\102\uffce\103\uffce\104\uffce\105" +
    "\uffce\115\uffce\001\002\000\006\046\113\047\132\001\002" +
    "\000\004\066\255\001\002\000\004\010\256\001\002\000" +
    "\024\076\152\077\157\100\153\101\144\102\156\103\150" +
    "\104\154\105\147\115\151\001\002\000\004\014\260\001" +
    "\002\000\026\012\176\076\152\077\157\100\153\101\144" +
    "\102\156\103\150\104\154\105\147\115\151\001\002\000" +
    "\026\012\264\076\152\077\157\100\153\101\144\102\156" +
    "\103\150\104\154\105\147\115\151\001\002\000\004\011" +
    "\267\001\002\000\004\014\265\001\002\000\004\011\uffc5" +
    "\001\002\000\026\012\264\076\152\077\157\100\153\101" +
    "\144\102\156\103\150\104\154\105\147\115\151\001\002" +
    "\000\004\011\uffc6\001\002\000\030\012\uffd3\014\uffd3\076" +
    "\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3\103\uffd3\104\uffd3" +
    "\105\uffd3\115\uffd3\001\002\000\030\012\uffcb\014\uffcb\076" +
    "\uffcb\077\uffcb\100\uffcb\101\uffcb\102\uffcb\103\uffcb\104\uffcb" +
    "\105\uffcb\115\uffcb\001\002\000\004\074\330\001\002\000" +
    "\004\045\320\001\002\000\006\012\316\074\314\001\002" +
    "\000\004\115\305\001\002\000\030\012\uffd4\014\uffd4\076" +
    "\uffd4\077\uffd4\100\uffd4\101\uffd4\102\uffd4\103\uffd4\104\uffd4" +
    "\105\uffd4\115\uffd4\001\002\000\030\012\uffcc\014\uffcc\076" +
    "\uffcc\077\uffcc\100\uffcc\101\uffcc\102\uffcc\103\uffcc\104\uffcc" +
    "\105\uffcc\115\uffcc\001\002\000\006\012\211\115\207\001" +
    "\002\000\020\046\113\047\132\075\134\115\167\116\122" +
    "\117\123\120\110\001\002\000\030\012\uffc2\014\uffc2\076" +
    "\uffc2\077\uffc2\100\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2" +
    "\105\uffc2\115\uffc2\001\002\000\004\066\303\001\002\000" +
    "\004\014\304\001\002\000\030\012\uffc1\014\uffc1\076\uffc1" +
    "\077\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1\104\uffc1\105" +
    "\uffc1\115\uffc1\001\002\000\006\045\306\065\307\001\002" +
    "\000\020\046\113\047\132\075\134\115\167\116\122\117" +
    "\123\120\110\001\002\000\006\012\211\115\207\001\002" +
    "\000\004\066\311\001\002\000\004\014\312\001\002\000" +
    "\030\012\uffc0\014\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0" +
    "\102\uffc0\103\uffc0\104\uffc0\105\uffc0\115\uffc0\001\002\000" +
    "\030\012\uffc4\014\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4" +
    "\102\uffc4\103\uffc4\104\uffc4\105\uffc4\115\uffc4\001\002\000" +
    "\004\115\317\001\002\000\004\045\uffbe\001\002\000\004" +
    "\045\uffbd\001\002\000\004\045\uffbc\001\002\000\004\065" +
    "\321\001\002\000\006\046\113\047\132\001\002\000\004" +
    "\066\323\001\002\000\004\106\324\001\002\000\020\046" +
    "\113\047\132\075\134\115\167\116\122\117\123\120\110" +
    "\001\002\000\004\107\326\001\002\000\020\046\113\047" +
    "\132\075\134\115\167\116\122\117\123\120\110\001\002" +
    "\000\030\012\uffca\014\uffca\076\uffca\077\uffca\100\uffca\101" +
    "\uffca\102\uffca\103\uffca\104\uffca\105\uffca\115\uffca\001\002" +
    "\000\004\115\331\001\002\000\004\045\332\001\002\000" +
    "\020\046\113\047\132\075\134\115\167\116\122\117\123" +
    "\120\110\001\002\000\030\012\uffc3\014\uffc3\076\uffc3\077" +
    "\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3\105\uffc3" +
    "\115\uffc3\001\002\000\024\076\152\077\157\100\153\101" +
    "\144\102\156\103\150\104\154\105\147\115\151\001\002" +
    "\000\026\012\176\076\152\077\157\100\153\101\144\102" +
    "\156\103\150\104\154\105\147\115\151\001\002\000\004" +
    "\011\337\001\002\000\004\076\340\001\002\000\004\065" +
    "\341\001\002\000\006\046\113\047\132\001\002\000\004" +
    "\066\343\001\002\000\004\014\344\001\002\000\030\012" +
    "\uffd1\014\uffd1\076\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1" +
    "\103\uffd1\104\uffd1\105\uffd1\115\uffd1\001\002\000\024\076" +
    "\152\077\157\100\153\101\144\102\156\103\150\104\154" +
    "\105\147\115\151\001\002\000\026\012\176\076\152\077" +
    "\157\100\153\101\144\102\156\103\150\104\154\105\147" +
    "\115\151\001\002\000\004\011\350\001\002\000\030\012" +
    "\uffc7\014\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7" +
    "\103\uffc7\104\uffc7\105\uffc7\115\uffc7\001\002\000\030\012" +
    "\uffcd\014\uffcd\076\uffcd\077\uffcd\100\uffcd\101\uffcd\102\uffcd" +
    "\103\uffcd\104\uffcd\105\uffcd\115\uffcd\001\002\000\004\115" +
    "\354\001\002\000\050\012\uff86\014\uff86\046\uff86\047\uff86" +
    "\066\uff86\075\uff86\076\uff86\077\uff86\100\uff86\101\uff86\102" +
    "\uff86\103\uff86\104\uff86\105\uff86\107\uff86\115\uff86\116\uff86" +
    "\117\uff86\120\uff86\001\002\000\052\012\uff82\014\uff82\046" +
    "\uff82\047\uff82\065\355\066\uff82\075\uff82\076\uff82\077\uff82" +
    "\100\uff82\101\uff82\102\uff82\103\uff82\104\uff82\105\uff82\107" +
    "\uff82\115\uff82\116\uff82\117\uff82\120\uff82\001\002\000\004" +
    "\066\356\001\002\000\050\012\uff81\014\uff81\046\uff81\047" +
    "\uff81\066\uff81\075\uff81\076\uff81\077\uff81\100\uff81\101\uff81" +
    "\102\uff81\103\uff81\104\uff81\105\uff81\107\uff81\115\uff81\116" +
    "\uff81\117\uff81\120\uff81\001\002\000\074\012\uff93\014\uff93" +
    "\046\uff93\047\uff93\061\uff93\062\uff93\063\uff93\064\uff93\065" +
    "\uff93\066\uff93\067\uff93\070\uff93\071\uff93\072\uff93\073\uff93" +
    "\075\uff93\076\uff93\077\uff93\100\uff93\101\uff93\102\uff93\103" +
    "\uff93\104\uff93\105\uff93\107\uff93\115\uff93\116\uff93\117\uff93" +
    "\120\uff93\001\002\000\006\046\uff8a\047\uff8a\001\002\000" +
    "\006\046\113\047\132\001\002\000\006\046\uff8c\047\uff8c" +
    "\001\002\000\006\046\uff8b\047\uff8b\001\002\000\006\046" +
    "\uff8d\047\uff8d\001\002\000\006\046\uff90\047\uff90\001\002" +
    "\000\006\046\uff8f\047\uff8f\001\002\000\006\046\uff88\047" +
    "\uff88\001\002\000\074\012\uff91\014\uff91\046\uff91\047\uff91" +
    "\061\uff91\062\uff91\063\uff91\064\uff91\065\uff91\066\uff91\067" +
    "\uff91\070\uff91\071\uff91\072\uff91\073\uff91\075\uff91\076\uff91" +
    "\077\uff91\100\uff91\101\uff91\102\uff91\103\uff91\104\uff91\105" +
    "\uff91\107\uff91\115\uff91\116\uff91\117\uff91\120\uff91\001\002" +
    "\000\006\046\uff8e\047\uff8e\001\002\000\006\046\uff89\047" +
    "\uff89\001\002\000\032\012\u0106\061\u0107\062\u0101\063\376" +
    "\064\u0104\065\u0108\066\u0109\067\u0100\070\377\071\375\072" +
    "\u0102\073\u0103\001\002\000\004\116\122\001\002\000\004" +
    "\116\uff97\001\002\000\004\116\uff9d\001\002\000\004\116" +
    "\uff98\001\002\000\004\116\uff99\001\002\000\004\116\uff9e" +
    "\001\002\000\004\116\uff96\001\002\000\004\116\uff95\001" +
    "\002\000\004\116\uff9c\001\002\000\074\012\uff92\014\uff92" +
    "\046\uff92\047\uff92\061\uff92\062\uff92\063\uff92\064\uff92\065" +
    "\uff92\066\uff92\067\uff92\070\uff92\071\uff92\072\uff92\073\uff92" +
    "\075\uff92\076\uff92\077\uff92\100\uff92\101\uff92\102\uff92\103" +
    "\uff92\104\uff92\105\uff92\107\uff92\115\uff92\116\uff92\117\uff92" +
    "\120\uff92\001\002\000\074\012\uffa0\014\uffa0\046\uffa0\047" +
    "\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0" +
    "\067\uffa0\070\uffa0\071\uffa0\072\uffa0\073\uffa0\075\uffa0\076" +
    "\uffa0\077\uffa0\100\uffa0\101\uffa0\102\uffa0\103\uffa0\104\uffa0" +
    "\105\uffa0\107\uffa0\115\uffa0\116\uffa0\117\uffa0\120\uffa0\001" +
    "\002\000\004\116\uff9f\001\002\000\004\116\uff9b\001\002" +
    "\000\004\116\uff9a\001\002\000\032\012\u0106\061\u0107\062" +
    "\u0101\063\376\064\u0104\065\u0108\066\u0109\067\u0100\070\377" +
    "\071\375\072\u0102\073\u0103\001\002\000\074\012\uffa1\014" +
    "\uffa1\046\uffa1\047\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1" +
    "\065\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1\073" +
    "\uffa1\075\uffa1\076\uffa1\077\uffa1\100\uffa1\101\uffa1\102\uffa1" +
    "\103\uffa1\104\uffa1\105\uffa1\107\uffa1\115\uffa1\116\uffa1\117" +
    "\uffa1\120\uffa1\001\002\000\006\046\113\047\132\001\002" +
    "\000\004\066\u010e\001\002\000\004\010\u010f\001\002\000" +
    "\024\076\152\077\157\100\153\101\144\102\156\103\150" +
    "\104\154\105\147\115\151\001\002\000\004\014\u0111\001" +
    "\002\000\026\012\176\076\152\077\157\100\153\101\144" +
    "\102\156\103\150\104\154\105\147\115\151\001\002\000" +
    "\026\012\264\076\152\077\157\100\153\101\144\102\156" +
    "\103\150\104\154\105\147\115\151\001\002\000\004\011" +
    "\u0114\001\002\000\034\012\uffde\046\uffde\047\uffde\075\uffde" +
    "\076\uffde\102\uffde\103\uffde\104\uffde\105\uffde\115\uffde\116" +
    "\uffde\117\uffde\120\uffde\001\002\000\004\115\162\001\002" +
    "\000\004\014\u0117\001\002\000\006\046\113\047\132\001" +
    "\002\000\004\014\u0119\001\002\000\020\046\113\047\132" +
    "\075\134\115\167\116\122\117\123\120\110\001\002\000" +
    "\004\066\u011b\001\002\000\004\010\u011c\001\002\000\024" +
    "\076\152\077\157\100\153\101\144\102\156\103\150\104" +
    "\154\105\147\115\151\001\002\000\004\014\u011e\001\002" +
    "\000\026\012\176\076\152\077\157\100\153\101\144\102" +
    "\156\103\150\104\154\105\147\115\151\001\002\000\004" +
    "\011\u0120\001\002\000\034\012\uffdd\046\uffdd\047\uffdd\075" +
    "\uffdd\076\uffdd\102\uffdd\103\uffdd\104\uffdd\105\uffdd\115\uffdd" +
    "\116\uffdd\117\uffdd\120\uffdd\001\002\000\004\115\u0125\001" +
    "\002\000\020\046\113\047\132\075\134\115\167\116\122" +
    "\117\123\120\110\001\002\000\036\012\uff83\045\uffbd\046" +
    "\uff83\047\uff83\075\uff83\076\uff83\102\uff83\103\uff83\104\uff83" +
    "\105\uff83\115\uff83\116\uff83\117\uff83\120\uff83\001\002\000" +
    "\034\012\uffbb\046\uffbb\047\uffbb\075\uffbb\076\uffbb\102\uffbb" +
    "\103\uffbb\104\uffbb\105\uffbb\115\uffbb\116\uffbb\117\uffbb\120" +
    "\uffbb\001\002\000\040\012\uff85\045\uffbc\046\uff85\047\uff85" +
    "\065\230\075\uff85\076\uff85\102\uff85\103\uff85\104\uff85\105" +
    "\uff85\115\uff85\116\uff85\117\uff85\120\uff85\001\002\000\074" +
    "\012\uffa2\014\uffa2\046\uffa2\047\uffa2\061\uffa2\062\uffa2\063" +
    "\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2" +
    "\072\uffa2\073\uffa2\075\uffa2\076\uffa2\077\uffa2\100\uffa2\101" +
    "\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2\107\uffa2\115\uffa2" +
    "\116\uffa2\117\uffa2\120\uffa2\001\002\000\024\076\152\077" +
    "\157\100\153\101\144\102\156\103\150\104\154\105\147" +
    "\115\151\001\002\000\026\012\176\076\152\077\157\100" +
    "\153\101\144\102\156\103\150\104\154\105\147\115\151" +
    "\001\002\000\004\011\u012a\001\002\000\034\012\uffd9\046" +
    "\uffd9\047\uffd9\075\uffd9\076\uffd9\102\uffd9\103\uffd9\104\uffd9" +
    "\105\uffd9\115\uffd9\116\uffd9\117\uffd9\120\uffd9\001\002\000" +
    "\004\077\uffed\001\002\000\020\046\113\047\132\075\134" +
    "\115\167\116\122\117\123\120\110\001\002\000\004\014" +
    "\u012e\001\002\000\004\011\u012f\001\002\000\004\111\ufff6" +
    "\001\002\000\074\012\uff94\014\uff94\046\uff94\047\uff94\061" +
    "\uff94\062\uff94\063\uff94\064\uff94\065\uff94\066\uff94\067\uff94" +
    "\070\uff94\071\uff94\072\uff94\073\uff94\075\uff94\076\uff94\077" +
    "\uff94\100\uff94\101\uff94\102\uff94\103\uff94\104\uff94\105\uff94" +
    "\107\uff94\115\uff94\116\uff94\117\uff94\120\uff94\001\002\000" +
    "\006\046\113\047\132\001\002\000\004\066\u0133\001\002" +
    "\000\004\010\u0134\001\002\000\024\076\152\077\157\100" +
    "\153\101\144\102\156\103\150\104\154\105\147\115\151" +
    "\001\002\000\026\012\176\076\152\077\157\100\153\101" +
    "\144\102\156\103\150\104\154\105\147\115\151\001\002" +
    "\000\004\011\u0137\001\002\000\034\012\uffdb\046\uffdb\047" +
    "\uffdb\075\uffdb\076\uffdb\102\uffdb\103\uffdb\104\uffdb\105\uffdb" +
    "\115\uffdb\116\uffdb\117\uffdb\120\uffdb\001\002\000\004\065" +
    "\u0139\001\002\000\006\046\113\047\132\001\002\000\004" +
    "\066\u013b\001\002\000\004\106\u013c\001\002\000\020\046" +
    "\113\047\132\075\134\115\167\116\122\117\123\120\110" +
    "\001\002\000\004\107\u013e\001\002\000\020\046\113\047" +
    "\132\075\134\115\167\116\122\117\123\120\110\001\002" +
    "\000\034\012\uffd7\046\uffd7\047\uffd7\075\uffd7\076\uffd7\102" +
    "\uffd7\103\uffd7\104\uffd7\105\uffd7\115\uffd7\116\uffd7\117\uffd7" +
    "\120\uffd7\001\002\000\004\115\u0141\001\002\000\006\012" +
    "\061\015\057\001\002\000\004\066\ufff5\001\002\000\004" +
    "\011\ufffe\001\002\000\004\011\ufffc\001\002\000\006\007" +
    "\004\012\006\001\002\000\004\002\000\001\002\000\004" +
    "\010\u0148\001\002\000\004\115\u0149\001\002\000\006\012" +
    "\u014c\015\u014a\001\002\000\004\115\u014f\001\002\000\004" +
    "\011\u014d\001\002\000\004\011\uffb8\001\002\000\004\014" +
    "\u014e\001\002\000\060\013\uffba\016\uffba\017\uffba\020\uffba" +
    "\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027" +
    "\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba" +
    "\036\uffba\037\uffba\040\uffba\110\uffba\111\uffba\120\uffba\001" +
    "\002\000\006\012\u014c\015\u014a\001\002\000\004\011\uffb9" +
    "\001\002\000\004\011\ufffa\001\002\000\004\010\u0153\001" +
    "\002\000\052\016\027\017\050\020\032\021\030\022\022" +
    "\023\025\024\016\025\045\026\014\027\013\030\015\031" +
    "\051\032\046\033\040\034\024\035\034\036\033\037\017" +
    "\040\047\120\012\001\002\000\006\012\u0157\041\u0155\001" +
    "\002\000\004\042\u0167\001\002\000\010\012\u015b\043\u0158" +
    "\044\u0159\001\002\000\010\012\uffb2\043\uffb2\044\uffb2\001" +
    "\002\000\004\115\uffb1\001\002\000\004\115\uffb0\001\002" +
    "\000\004\115\u015c\001\002\000\004\115\uffaf\001\002\000" +
    "\004\014\u015d\001\002\000\054\012\u0160\016\027\017\050" +
    "\020\032\021\030\022\022\023\025\024\016\025\045\026" +
    "\014\027\013\030\015\031\051\032\046\033\040\034\024" +
    "\035\034\036\033\037\017\040\047\120\012\001\002\000" +
    "\004\011\u0166\001\002\000\006\012\u0157\041\u0155\001\002" +
    "\000\004\011\uffe4\001\002\000\010\012\u015b\043\u0158\044" +
    "\u0159\001\002\000\004\115\u0163\001\002\000\004\014\u0164" +
    "\001\002\000\054\012\u0160\016\027\017\050\020\032\021" +
    "\030\022\022\023\025\024\016\025\045\026\014\027\013" +
    "\030\015\031\051\032\046\033\040\034\024\035\034\036" +
    "\033\037\017\040\047\120\012\001\002\000\004\011\uffe5" +
    "\001\002\000\006\110\uffe6\111\uffe6\001\002\000\010\012" +
    "\uffb3\043\uffb3\044\uffb3\001\002\000\004\011\ufff8\001\002" +
    "\000\010\012\u015b\043\u0158\044\u0159\001\002\000\004\115" +
    "\u016b\001\002\000\006\014\u016e\045\u016c\001\002\000\020" +
    "\046\113\047\132\075\134\115\167\116\122\117\123\120" +
    "\110\001\002\000\060\014\uffb7\016\uffb7\017\uffb7\020\uffb7" +
    "\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7" +
    "\036\uffb7\037\uffb7\040\uffb7\110\uffb7\111\uffb7\120\uffb7\001" +
    "\002\000\060\014\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6" +
    "\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\110\uffb6\111\uffb6\120\uffb6\001\002\000" +
    "\004\014\u0170\001\002\000\060\014\uffb5\016\uffb5\017\uffb5" +
    "\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\110\uffb5\111\uffb5\120" +
    "\uffb5\001\002\000\004\014\uffb4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016f\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\041\005\022\006\020\007\017\010" +
    "\034\011\043\014\030\016\025\021\042\067\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\u0168" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\u0167\010\034\014\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\u0150\007\017\010\034\014\030\067\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\u0143\006\020\007\017\010\034\014\030" +
    "\016\025\021\042\067\036\001\001\000\026\004\u0142\005" +
    "\022\006\020\007\017\010\034\011\043\014\030\016\025" +
    "\021\042\067\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\054\001" +
    "\001\000\002\001\001\000\004\075\057\001\001\000\004" +
    "\016\u013f\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\076\063\001\001\000\002\001\001\000\004\077\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\025\021\100\074\077" +
    "\001\001\000\044\013\136\026\125\027\123\032\106\037" +
    "\124\043\110\046\132\050\114\057\135\061\134\062\141" +
    "\063\113\064\120\065\104\073\116\100\115\102\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\025" +
    "\021\100\074\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\360\036" +
    "\u012f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\013\136\026\125\027\123\032\106\037" +
    "\124\043\110\046\132\050\114\057\135\061\134\062\141" +
    "\063\113\064\120\065\104\073\116\100\u012a\102\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\373" +
    "\035\u0125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\040\203\044\204" +
    "\066\314\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\360\036\356\001\001\000\002\001\001\000\004" +
    "\045\352\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\051\154\071\145\072\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\053\275\054\274\055" +
    "\267\065\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\051\174\056\233\071\145\072" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\164\001\001\000\002\001\001" +
    "\000\016\026\167\027\123\032\106\037\124\043\110\046" +
    "\132\001\001\000\006\040\203\044\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\051\172\071\145\072" +
    "\144\001\001\000\002\001\001\000\012\051\174\056\176" +
    "\071\145\072\144\001\001\000\012\051\174\056\200\071" +
    "\145\072\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\223\001\001\000\002\001\001\000\016\026" +
    "\232\027\123\032\106\037\124\043\110\046\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\243\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\051\246" +
    "\071\145\072\144\001\001\000\012\051\174\056\247\071" +
    "\145\072\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\253\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\051\256\071\145\072\144" +
    "\001\001\000\002\001\001\000\012\051\174\056\260\071" +
    "\145\072\144\001\001\000\012\051\262\052\261\071\145" +
    "\072\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\051\262\052\265\071\145\072\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\066\314" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\301\001\001\000\016\026\300\027\123" +
    "\032\106\037\124\043\110\046\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\026\312\027\123\032\106\037" +
    "\124\043\110\046\132\001\001\000\004\041\307\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\321\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\026\324\027\123\032\106\037\124\043\110\046\132\001" +
    "\001\000\002\001\001\000\016\026\326\027\123\032\106" +
    "\037\124\043\110\046\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\026\332\027\123" +
    "\032\106\037\124\043\110\046\132\001\001\000\002\001" +
    "\001\000\010\051\334\071\145\072\144\001\001\000\012" +
    "\051\174\056\335\071\145\072\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\341" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\051\345\071\145\072\144\001\001\000\012" +
    "\051\174\056\346\071\145\072\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\372\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\373\035\u0104\001\001\000\004\027\u0109" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\373\035\u010a\001\001\000\002\001" +
    "\001\000\004\032\u010c\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\051\u010f\071\145\072\144\001\001\000" +
    "\002\001\001\000\012\051\174\056\u0111\071\145\072\144" +
    "\001\001\000\012\051\262\052\u0112\071\145\072\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\060\u0115" +
    "\001\001\000\002\001\001\000\004\032\u0117\001\001\000" +
    "\002\001\001\000\016\026\u0119\027\123\032\106\037\124" +
    "\043\110\046\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\051\u011c\071\145\072\144\001\001\000\002" +
    "\001\001\000\012\051\174\056\u011e\071\145\072\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\026\u0123\027\123\032\106\037\124\043\110\046" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\051\u0127\071\145\072" +
    "\144\001\001\000\012\051\174\056\u0128\071\145\072\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\026\u012c\027\123\032\106\037\124\043\110" +
    "\046\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\u0131\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\051\u0134\071" +
    "\145\072\144\001\001\000\012\051\174\056\u0135\071\145" +
    "\072\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\u0139\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\026\u013c\027\123\032\106\037" +
    "\124\043\110\046\132\001\001\000\002\001\001\000\016" +
    "\026\u013e\027\123\032\106\037\124\043\110\046\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\075\u0141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\u0145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u014a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u014f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\u0153\001\001\000\004\017\u0155\001\001\000\002\001" +
    "\001\000\004\020\u0159\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\u015e\070\u015d\001\001" +
    "\000\002\001\001\000\004\017\u0160\001\001\000\002\001" +
    "\001\000\004\020\u0161\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\u015e\070\u0164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u0169\001\001\000\002\001\001\000\006\023" +
    "\u016e\047\u016c\001\001\000\016\026\u0170\027\123\032\106" +
    "\037\124\043\110\046\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static LinkedList<TError> TablaES = new LinkedList<TError>(); 

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
     
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico$actions {



  private final analisis_sintactico parser;

  /** Constructor */
  CUP$analisis_sintactico$actions(analisis_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action_part00000000(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico$parser.done_parsing();
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= contract ident O_Parent_L BODY_CONTRACT C_Parent_L INICIO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= epsilon 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BODY_CONTRACT ::= EN BODY_CONTRACT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BODY_CONTRACT ::= BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BODY_CONTRACT_P ::= VAR_CONTRACT BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BODY_CONTRACT_P ::= BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BODY_CONTRACT_PP ::= STRUCTURE BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BODY_CONTRACT_PP ::= BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BODY_CONTRACT_PPP ::= FUNC BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BODY_CONTRACT_PPP ::= BODY_CONTRACT_PPPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNC ::= functionSoli ident O_Parent_R TIPO ident FUNC_PARAM C_Parent_R FUNC_MOD FUNC_RETURNS O_Parent_L CUERPO_ASSIGN CUERPO_M returnSoli EXP punto_coma C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-15)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNC_PARAM ::= coma TIPO ident FUNC_PARAM 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNC_PARAM ::= epsilon 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNC_MOD ::= payableSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNC_MOD ::= privateSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNC_MOD ::= publicSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNC_MOD ::= internalSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNC_MOD ::= epsilon 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNC_RETURNS ::= returns O_Parent_R TIPO ident C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_RETURNS",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO_M ::= CUERPO CUERPO_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPO_M ::= epsilon 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPO ::= ASSIGN_NOT_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO ::= EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO ::= STRU 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPO_ASSIGN ::= VAR_CONTRACT punto_coma CUERPO_ASSIGN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN",58, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPO_ASSIGN ::= epsilon 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN",58, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // STRUCTURE ::= structSoli ident O_Parent_L TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // STRUCTURE_VAR ::= TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // STRUCTURE_VAR ::= epsilon 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // STRU ::= STRU_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // STRU ::= STRU_FOR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // STRU ::= STRU_DO_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // STRU ::= STRU_IF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // STRU ::= STRU_IF_LINE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // STRU_WHILE ::= whileSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT punto_coma BODY_SENT_M BODY_WHILE C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_WHILE",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // STRU_FOR ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma EXP C_Parent_R O_Parent_L BODY_SENT punto_coma BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_FOR",45, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // STRU_DO_WHILE ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_DO_WHILE",47, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // STRU_IF ::= ifSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF",48, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // STRU_IF ::= STRU_ELSE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF",48, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // STRU_ELSE ::= elseSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // STRU_ELSE ::= epsilon 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STRU_IF_LINE ::= IF_LINE_VAR igual O_Parent_R OP_BOOL C_Parent_R interrogacion EXP punto_punto EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_LINE",50, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BODY_SENT_M ::= BODY_SENT BODY_SENT_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BODY_SENT_M ::= epsilon 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BODY_SENT ::= ident BODY_SENT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BODY_SENT ::= whileSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT punto_coma BODY_SENT_M BODY_WHILE C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BODY_SENT ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma EXP C_Parent_R O_Parent_L BODY_SENT punto_coma BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BODY_SENT ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BODY_SENT ::= STRU_IF_ELSE_IN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BODY_SENT ::= returnSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BODY_SENT ::= breakSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BODY_SENT ::= continueSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BODY_SENT_P ::= BODY_ASSIGN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BODY_SENT_P ::= BODY_FUN_CALL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BODY_SENT_P ::= IF_LINE_VAR igual O_Parent_R OP_BOOL C_Parent_R interrogacion EXP punto_punto EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STRU_IF_ELSE_IN ::= ifSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_ELSE_IN",55, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STRU_IF_ELSE_IN ::= STRU_ELSE_IN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_ELSE_IN",55, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // STRU_ELSE_IN ::= elseSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BODY_WHILE ::= BODY_SENT punto_coma BODY_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_WHILE",40, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BODY_WHILE ::= epsilon 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_WHILE",40, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BODY_ASSIGN ::= punto ident igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_ASSIGN",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BODY_ASSIGN ::= thisSoli punto ident igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_ASSIGN",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BODY_ASSIGN ::= igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_ASSIGN",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BODY_FUN_CALL ::= O_Parent_R FUNC_CALL_PARAMS C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_FUN_CALL",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BODY_FUN_CALL ::= punto ident O_Parent_R FUNC_CALL_PARAMS C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_FUN_CALL",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FOR_VAR ::= ident igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FOR_VAR",46, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IF_LINE_VAR ::= ident IF_LINE_VAR_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("IF_LINE_VAR",51, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IF_LINE_VAR_P ::= epsilon 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("IF_LINE_VAR_P",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IF_LINE_VAR_P ::= punto ident 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("IF_LINE_VAR_P",52, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ASSIGN_NOT_VAR ::= ident igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ASSIGN_NOT_VAR",64, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EN ::= enumSoli ident O_Parent_L ident EN_IDENT C_Parent_L punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EN_IDENT ::= coma ident EN_IDENT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EN_IDENT ::= epsilon 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VAR_CONTRACT ::= TIPO VAR_ARR VAR_ACCESS ident VAR_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VAR_CONTRACT_P ::= punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VAR_CONTRACT_P ::= VAR_CONTRACT_C punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VAR_CONTRACT_C ::= igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_C",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VAR_ARR ::= O_Parent_C C_Parent_C 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VAR_ARR ::= epsilon 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VAR_ACCESS ::= publicSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VAR_ACCESS ::= privateSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VAR_ACCESS ::= epsilon 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= BODY_LIT_TF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= IDENT_BODY 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= FUNC_CALL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FUNC_CALL ::= ident FUNC_CALL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL",29, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FUNC_CALL_P ::= O_Parent_R FUNC_CALL_PARAMS C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_P",30, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FUNC_CALL_P ::= punto ident O_Parent_R FUNC_CALL_PARAMS C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_P",30, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FUNC_CALL_PARAMS ::= ident FUNC_CALL_PARAMS_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMS",31, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FUNC_CALL_PARAMS ::= epsilon 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMS",31, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FUNC_CALL_PARAMS_P ::= coma ident FUNC_CALL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMS_P",32, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FUNC_CALL_PARAMS_P ::= epsilon 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_PARAMS_P",32, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OP_ARIT ::= numero OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OP_ARIT_P ::= OP OP_ARIT OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OP_ARIT_P ::= epsilon 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OP ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OP ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OP ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OP ::= O_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OP ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OP ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OP ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OP ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OP ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OP_BOOL ::= trueSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OP_BOOL ::= falseSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OP_BOOL_P ::= OP_OP_BOOL OP_BOOL OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OP_BOOL_P ::= epsilon 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OP_OP_BOOL ::= igual_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OP_OP_BOOL ::= mayor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OP_OP_BOOL ::= mayor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OP_OP_BOOL ::= menor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OP_OP_BOOL ::= menor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OP_OP_BOOL ::= diferente 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OP_OP_BOOL ::= op_or 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OP_OP_BOOL ::= op_and 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OP_OP_BOOL ::= negacion 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // IDENT_BODY ::= ident IDENT_BODY_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("IDENT_BODY",33, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // IDENT_BODY ::= thisSoli IDENT_BODY_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("IDENT_BODY",33, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // IDENT_BODY_P ::= punto ident 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("IDENT_BODY_P",34, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // IDENT_BODY_P ::= punto ident O_Parent_R C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("IDENT_BODY_P",34, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // IDENT_BODY_P ::= epsilon 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("IDENT_BODY_P",34, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // IDENT_BODY_PP ::= punto ident 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("IDENT_BODY_PP",35, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // IDENT_BODY_PP ::= punto ident O_Parent_R C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("IDENT_BODY_PP",35, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // BODY_LIT_TF ::= numero_HEX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // BODY_LIT_TF ::= string 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // TIPO ::= bool 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // TIPO ::= byteSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // TIPO ::= bytes 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // TIPO ::= string 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // TIPO ::= uint 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // TIPO ::= uint_O 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // TIPO ::= uint_DS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // TIPO ::= uint_TD 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // TIPO ::= uint_SC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // TIPO ::= uint_CVO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // TIPO ::= uint_DCS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // TIPO ::= intSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // TIPO ::= int_O 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // TIPO ::= int_DS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // TIPO ::= int_TD 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // TIPO ::= int_SC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // TIPO ::= int_CVO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // TIPO ::= int_DCS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // TIPO ::= address 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // TIPO ::= address_payable 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$analisis_sintactico$do_action_part00000000(
                               CUP$analisis_sintactico$act_num,
                               CUP$analisis_sintactico$parser,
                               CUP$analisis_sintactico$stack,
                               CUP$analisis_sintactico$top);
    }
}

}
