
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symb.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\002\002\004\000\002\002\016\000\002\140" +
    "\010\000\002\140\002\000\002\004\004\000\002\004\003" +
    "\000\002\005\004\000\002\005\003\000\002\006\004\000" +
    "\002\006\003\000\002\007\004\000\002\007\002\000\002" +
    "\014\021\000\002\014\005\000\002\075\006\000\002\075" +
    "\002\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\076\003\000\002\076\002\000\002\077\007\000" +
    "\002\077\002\000\002\100\004\000\002\100\002\000\002" +
    "\141\007\000\002\141\003\000\002\073\005\000\002\073" +
    "\007\000\002\073\004\000\002\073\003\000\002\104\003" +
    "\000\002\104\003\000\002\142\004\000\002\142\003\000" +
    "\002\143\003\000\002\143\003\000\002\067\014\000\002" +
    "\067\005\000\002\067\006\000\002\070\010\000\002\070" +
    "\002\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\050\012\000\002\050\005\000" +
    "\002\057\016\000\002\061\014\000\002\062\013\000\002" +
    "\062\005\000\002\063\007\000\002\063\005\000\002\063" +
    "\002\000\002\064\012\000\002\064\005\000\002\064\011" +
    "\000\002\056\004\000\002\056\002\000\002\051\004\000" +
    "\002\051\010\000\002\051\012\000\002\051\016\000\002" +
    "\051\014\000\002\051\003\000\002\051\004\000\002\051" +
    "\004\000\002\051\004\000\002\054\005\000\002\054\003" +
    "\000\002\103\003\000\002\103\003\000\002\103\013\000" +
    "\002\071\013\000\002\072\007\000\002\072\002\000\002" +
    "\053\005\000\002\055\006\000\002\060\005\000\002\102" +
    "\004\000\002\011\010\000\002\011\005\000\002\015\005" +
    "\000\002\015\002\000\002\021\007\000\002\021\005\000" +
    "\002\047\003\000\002\047\004\000\002\023\004\000\002" +
    "\017\004\000\002\017\002\000\002\020\003\000\002\020" +
    "\003\000\002\020\002\000\002\026\004\000\002\026\004" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\131\004\000\002\131\004\000\002\134\004\000\002" +
    "\105\005\000\002\105\003\000\002\136\004\000\002\136" +
    "\004\000\002\136\004\000\002\136\002\000\002\106\005" +
    "\000\002\120\004\000\002\120\004\000\002\120\004\000" +
    "\002\120\002\000\002\132\004\000\002\132\006\000\002" +
    "\132\003\000\002\133\004\000\002\133\003\000\002\027" +
    "\004\000\002\027\005\000\002\027\007\000\002\035\004" +
    "\000\002\035\002\000\002\135\004\000\002\135\002\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\130\003\000\002\130\003\000" +
    "\002\130\003\000\002\130\003\000\002\130\003\000\002" +
    "\130\003\000\002\130\003\000\002\130\003\000\002\130" +
    "\003\000\002\032\004\000\002\162\003\000\002\162\002" +
    "\000\002\163\004\000\002\163\004\000\002\163\004\000" +
    "\002\163\004\000\002\036\004\000\002\036\002\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\046\003\000" +
    "\002\046\003\000\002\144\004\000\002\144\004\000\002" +
    "\144\003\000\002\144\003\000\002\150\004\000\002\145" +
    "\005\000\002\145\003\000\002\152\004\000\002\152\004" +
    "\000\002\152\002\000\002\146\005\000\002\156\004\000" +
    "\002\156\004\000\002\156\002\000\002\153\004\000\002" +
    "\153\006\000\002\153\003\000\002\157\004\000\002\157" +
    "\003\000\002\155\004\000\002\155\005\000\002\155\007" +
    "\000\002\151\004\000\002\151\002\000\002\160\004\000" +
    "\002\160\002\000\002\161\003\000\002\161\003\000\002" +
    "\161\003\000\002\161\003\000\002\161\003\000\002\161" +
    "\003\000\002\161\003\000\002\161\003\000\002\161\003" +
    "\000\002\147\003\000\002\147\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01f3\000\004\004\004\001\002\000\004\005\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\006\010\001\002\000\004\161\011\001\002\000" +
    "\004\161\012\001\002\000\004\014\013\001\002\000\004" +
    "\007\014\001\002\000\004\160\015\001\002\000\004\010" +
    "\016\001\002\000\166\011\ufff6\013\073\016\020\017\022" +
    "\020\036\021\104\022\063\023\116\024\111\025\034\026" +
    "\105\027\106\030\030\031\031\032\075\033\065\034\115" +
    "\035\074\036\077\037\110\040\067\110\103\111\053\115" +
    "\062\116\040\117\112\120\066\121\061\122\113\123\046" +
    "\124\056\125\042\126\047\127\101\130\045\131\051\132" +
    "\071\133\032\134\026\135\017\136\057\137\114\140\072" +
    "\141\117\142\120\143\054\144\041\145\050\146\033\147" +
    "\037\150\025\151\027\152\100\153\021\154\035\155\024" +
    "\156\060\157\055\001\002\000\014\003\uff13\041\uff13\043" +
    "\uff13\044\uff13\160\uff13\001\002\000\014\003\uff36\041\uff36" +
    "\043\uff36\044\uff36\160\uff36\001\002\000\014\003\uff05\041" +
    "\uff05\043\uff05\044\uff05\160\uff05\001\002\000\014\003\uff35" +
    "\041\uff35\043\uff35\044\uff35\160\uff35\001\002\000\014\003" +
    "\u01eb\041\130\043\uffa6\044\uffa6\160\uffa6\001\002\000\014" +
    "\003\uff03\041\uff03\043\uff03\044\uff03\160\uff03\001\002\000" +
    "\014\003\uff08\041\uff08\043\uff08\044\uff08\160\uff08\001\002" +
    "\000\014\003\uff14\041\uff14\043\uff14\044\uff14\160\uff14\001" +
    "\002\000\014\003\uff07\041\uff07\043\uff07\044\uff07\160\uff07" +
    "\001\002\000\014\003\uff2b\041\uff2b\043\uff2b\044\uff2b\160" +
    "\uff2b\001\002\000\014\003\uff2a\041\uff2a\043\uff2a\044\uff2a" +
    "\160\uff2a\001\002\000\014\003\uff15\041\uff15\043\uff15\044" +
    "\uff15\160\uff15\001\002\000\014\003\uff0a\041\uff0a\043\uff0a" +
    "\044\uff0a\160\uff0a\001\002\000\014\003\uff2e\041\uff2e\043" +
    "\uff2e\044\uff2e\160\uff2e\001\002\000\014\003\uff04\041\uff04" +
    "\043\uff04\044\uff04\160\uff04\001\002\000\014\003\uff34\041" +
    "\uff34\043\uff34\044\uff34\160\uff34\001\002\000\014\003\uff09" +
    "\041\uff09\043\uff09\044\uff09\160\uff09\001\002\000\014\003" +
    "\uff33\041\uff33\043\uff33\044\uff33\160\uff33\001\002\000\014" +
    "\003\uff0c\041\uff0c\043\uff0c\044\uff0c\160\uff0c\001\002\000" +
    "\014\003\uff1b\041\uff1b\043\uff1b\044\uff1b\160\uff1b\001\002" +
    "\000\164\011\ufff6\016\020\017\022\020\036\021\104\022" +
    "\063\023\116\024\111\025\034\026\105\027\106\030\030" +
    "\031\031\032\075\033\065\034\115\035\074\036\077\037" +
    "\110\040\067\110\103\111\053\115\062\116\040\117\112" +
    "\120\066\121\061\122\113\123\046\124\056\125\042\126" +
    "\047\127\101\130\045\131\051\132\071\133\032\134\026" +
    "\135\017\136\057\137\114\140\072\141\117\142\120\143" +
    "\054\144\041\145\050\146\033\147\037\150\025\151\027" +
    "\152\100\153\021\154\035\155\024\156\060\157\055\001" +
    "\002\000\004\011\ufffa\001\002\000\014\003\uff18\041\uff18" +
    "\043\uff18\044\uff18\160\uff18\001\002\000\014\003\uff1d\041" +
    "\uff1d\043\uff1d\044\uff1d\160\uff1d\001\002\000\014\003\uff1a" +
    "\041\uff1a\043\uff1a\044\uff1a\160\uff1a\001\002\000\014\003" +
    "\uff0b\041\uff0b\043\uff0b\044\uff0b\160\uff0b\001\002\000\014" +
    "\003\uff17\041\uff17\043\uff17\044\uff17\160\uff17\001\002\000" +
    "\004\011\ufffc\001\002\000\006\003\175\160\176\001\002" +
    "\000\014\003\uff0d\041\uff0d\043\uff0d\044\uff0d\160\uff0d\001" +
    "\002\000\014\003\uff01\041\uff01\043\uff01\044\uff01\160\uff01" +
    "\001\002\000\014\003\uff1c\041\uff1c\043\uff1c\044\uff1c\160" +
    "\uff1c\001\002\000\014\003\uff12\041\uff12\043\uff12\044\uff12" +
    "\160\uff12\001\002\000\014\003\uff02\041\uff02\043\uff02\044" +
    "\uff02\160\uff02\001\002\000\014\003\uff1f\041\uff1f\043\uff1f" +
    "\044\uff1f\160\uff1f\001\002\000\014\003\uff22\041\uff22\043" +
    "\uff22\044\uff22\160\uff22\001\002\000\014\003\uff31\041\uff31" +
    "\043\uff31\044\uff31\160\uff31\001\002\000\004\011\165\001" +
    "\002\000\014\003\uff28\041\uff28\043\uff28\044\uff28\160\uff28" +
    "\001\002\000\014\003\uff20\041\uff20\043\uff20\044\uff20\160" +
    "\uff20\001\002\000\014\003\uff23\041\uff23\043\uff23\044\uff23" +
    "\160\uff23\001\002\000\004\011\ufff8\001\002\000\014\003" +
    "\uff16\041\uff16\043\uff16\044\uff16\160\uff16\001\002\000\014" +
    "\003\uff10\041\uff10\043\uff10\044\uff10\160\uff10\001\002\000" +
    "\006\003\153\160\154\001\002\000\014\003\uff26\041\uff26" +
    "\043\uff26\044\uff26\160\uff26\001\002\000\014\003\uff29\041" +
    "\uff29\043\uff29\044\uff29\160\uff29\001\002\000\166\011\ufff6" +
    "\013\073\016\020\017\022\020\036\021\104\022\063\023" +
    "\116\024\111\025\034\026\105\027\106\030\030\031\031" +
    "\032\075\033\065\034\115\035\074\036\077\037\110\040" +
    "\067\110\103\111\053\115\062\116\040\117\112\120\066" +
    "\121\061\122\113\123\046\124\056\125\042\126\047\127" +
    "\101\130\045\131\051\132\071\133\032\134\026\135\017" +
    "\136\057\137\114\140\072\141\117\142\120\143\054\144" +
    "\041\145\050\146\033\147\037\150\025\151\027\152\100" +
    "\153\021\154\035\155\024\156\060\157\055\001\002\000" +
    "\014\003\uff25\041\uff25\043\uff25\044\uff25\160\uff25\001\002" +
    "\000\014\003\uff06\041\uff06\043\uff06\044\uff06\160\uff06\001" +
    "\002\000\014\003\uff19\041\uff19\043\uff19\044\uff19\160\uff19" +
    "\001\002\000\006\011\ufff6\111\053\001\002\000\006\003" +
    "\122\160\123\001\002\000\014\003\uff32\041\uff32\043\uff32" +
    "\044\uff32\160\uff32\001\002\000\014\003\uff2d\041\uff2d\043" +
    "\uff2d\044\uff2d\160\uff2d\001\002\000\014\003\uff2c\041\uff2c" +
    "\043\uff2c\044\uff2c\160\uff2c\001\002\000\010\011\ufff6\110" +
    "\103\111\053\001\002\000\014\003\uff24\041\uff24\043\uff24" +
    "\044\uff24\160\uff24\001\002\000\014\003\uff2f\041\uff2f\043" +
    "\uff2f\044\uff2f\160\uff2f\001\002\000\014\003\uff21\041\uff21" +
    "\043\uff21\044\uff21\160\uff21\001\002\000\014\003\uff1e\041" +
    "\uff1e\043\uff1e\044\uff1e\160\uff1e\001\002\000\014\003\uff11" +
    "\041\uff11\043\uff11\044\uff11\160\uff11\001\002\000\014\003" +
    "\uff27\041\uff27\043\uff27\044\uff27\160\uff27\001\002\000\014" +
    "\003\uff30\041\uff30\043\uff30\044\uff30\160\uff30\001\002\000" +
    "\014\003\uff0f\041\uff0f\043\uff0f\044\uff0f\160\uff0f\001\002" +
    "\000\014\003\uff0e\041\uff0e\043\uff0e\044\uff0e\160\uff0e\001" +
    "\002\000\004\011\ufff9\001\002\000\004\011\150\001\002" +
    "\000\006\003\125\010\124\001\002\000\156\016\020\017" +
    "\022\020\036\021\104\022\063\023\116\024\111\025\034" +
    "\026\105\027\106\030\030\031\031\032\075\033\065\034" +
    "\115\035\074\036\077\037\110\040\067\115\062\116\040" +
    "\117\112\120\066\121\061\122\113\123\046\124\056\125" +
    "\042\126\047\127\101\130\045\131\051\132\071\133\032" +
    "\134\026\135\017\136\057\137\114\140\072\141\117\142" +
    "\120\143\054\144\041\145\050\146\033\147\037\150\025" +
    "\151\027\152\100\153\021\154\035\155\024\156\060\157" +
    "\055\001\002\000\004\011\126\001\002\000\010\011\uffda" +
    "\110\uffda\111\uffda\001\002\000\012\041\130\043\uffa6\044" +
    "\uffa6\160\uffa6\001\002\000\004\042\147\001\002\000\010" +
    "\043\132\044\133\160\uffa3\001\002\000\004\160\uffa5\001" +
    "\002\000\004\160\uffa4\001\002\000\004\160\135\001\002" +
    "\000\004\014\136\001\002\000\160\011\uffd8\016\020\017" +
    "\022\020\036\021\104\022\063\023\116\024\111\025\034" +
    "\026\105\027\106\030\030\031\031\032\075\033\065\034" +
    "\115\035\074\036\077\037\110\040\067\115\062\116\040" +
    "\117\112\120\066\121\061\122\113\123\046\124\056\125" +
    "\042\126\047\127\101\130\045\131\051\132\071\133\032" +
    "\134\026\135\017\136\057\137\114\140\072\141\117\142" +
    "\120\143\054\144\041\145\050\146\033\147\037\150\025" +
    "\151\027\152\100\153\021\154\035\155\024\156\060\157" +
    "\055\001\002\000\012\041\130\043\uffa6\044\uffa6\160\uffa6" +
    "\001\002\000\004\011\141\001\002\000\010\011\uffdc\110" +
    "\uffdc\111\uffdc\001\002\000\010\043\132\044\133\160\uffa3" +
    "\001\002\000\004\160\144\001\002\000\004\014\145\001" +
    "\002\000\160\011\uffd8\016\020\017\022\020\036\021\104" +
    "\022\063\023\116\024\111\025\034\026\105\027\106\030" +
    "\030\031\031\032\075\033\065\034\115\035\074\036\077" +
    "\037\110\040\067\115\062\116\040\117\112\120\066\121" +
    "\061\122\113\123\046\124\056\125\042\126\047\127\101" +
    "\130\045\131\051\132\071\133\032\134\026\135\017\136" +
    "\057\137\114\140\072\141\117\142\120\143\054\144\041" +
    "\145\050\146\033\147\037\150\025\151\027\152\100\153" +
    "\021\154\035\155\024\156\060\157\055\001\002\000\004" +
    "\011\uffd9\001\002\000\010\043\uffa7\044\uffa7\160\uffa7\001" +
    "\002\000\010\011\uffdb\110\uffdb\111\uffdb\001\002\000\004" +
    "\011\ufff7\001\002\000\004\011\ufffd\001\002\000\004\011" +
    "\164\001\002\000\004\010\155\001\002\000\004\160\156" +
    "\001\002\000\006\011\uffad\015\157\001\002\000\004\160" +
    "\162\001\002\000\004\011\161\001\002\000\166\011\uffb0" +
    "\013\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023" +
    "\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0" +
    "\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040" +
    "\uffb0\110\uffb0\111\uffb0\115\uffb0\116\uffb0\117\uffb0\120\uffb0" +
    "\121\uffb0\122\uffb0\123\uffb0\124\uffb0\125\uffb0\126\uffb0\127" +
    "\uffb0\130\uffb0\131\uffb0\132\uffb0\133\uffb0\134\uffb0\135\uffb0" +
    "\136\uffb0\137\uffb0\140\uffb0\141\uffb0\142\uffb0\143\uffb0\144" +
    "\uffb0\145\uffb0\146\uffb0\147\uffb0\150\uffb0\151\uffb0\152\uffb0" +
    "\153\uffb0\154\uffb0\155\uffb0\156\uffb0\157\uffb0\001\002\000" +
    "\006\011\uffad\015\157\001\002\000\004\011\uffae\001\002" +
    "\000\166\011\uffaf\013\uffaf\016\uffaf\017\uffaf\020\uffaf\021" +
    "\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036" +
    "\uffaf\037\uffaf\040\uffaf\110\uffaf\111\uffaf\115\uffaf\116\uffaf" +
    "\117\uffaf\120\uffaf\121\uffaf\122\uffaf\123\uffaf\124\uffaf\125" +
    "\uffaf\126\uffaf\127\uffaf\130\uffaf\131\uffaf\132\uffaf\133\uffaf" +
    "\134\uffaf\135\uffaf\136\uffaf\137\uffaf\140\uffaf\141\uffaf\142" +
    "\uffaf\143\uffaf\144\uffaf\145\uffaf\146\uffaf\147\uffaf\150\uffaf" +
    "\151\uffaf\152\uffaf\153\uffaf\154\uffaf\155\uffaf\156\uffaf\157" +
    "\uffaf\001\002\000\006\002\ufffe\007\167\001\002\000\004" +
    "\002\000\001\002\000\004\160\170\001\002\000\004\010" +
    "\171\001\002\000\166\011\ufff6\013\073\016\020\017\022" +
    "\020\036\021\104\022\063\023\116\024\111\025\034\026" +
    "\105\027\106\030\030\031\031\032\075\033\065\034\115" +
    "\035\074\036\077\037\110\040\067\110\103\111\053\115" +
    "\062\116\040\117\112\120\066\121\061\122\113\123\046" +
    "\124\056\125\042\126\047\127\101\130\045\131\051\132" +
    "\071\133\032\134\026\135\017\136\057\137\114\140\072" +
    "\141\117\142\120\143\054\144\041\145\050\146\033\147" +
    "\037\150\025\151\027\152\100\153\021\154\035\155\024" +
    "\156\060\157\055\001\002\000\004\011\173\001\002\000" +
    "\006\002\ufffe\007\167\001\002\000\004\002\uffff\001\002" +
    "\000\004\011\u01e9\001\002\000\004\065\177\001\002\000" +
    "\156\016\020\017\022\020\036\021\104\022\063\023\116" +
    "\024\111\025\034\026\105\027\106\030\030\031\031\032" +
    "\075\033\065\034\115\035\074\036\077\037\110\040\067" +
    "\115\062\116\040\117\112\120\066\121\061\122\113\123" +
    "\046\124\056\125\042\126\047\127\101\130\045\131\051" +
    "\132\071\133\032\134\026\135\017\136\057\137\114\140" +
    "\072\141\117\142\120\143\054\144\041\145\050\146\033" +
    "\147\037\150\025\151\027\152\100\153\021\154\035\155" +
    "\024\156\060\157\055\001\002\000\004\160\201\001\002" +
    "\000\006\015\202\066\ufff2\001\002\000\156\016\020\017" +
    "\022\020\036\021\104\022\063\023\116\024\111\025\034" +
    "\026\105\027\106\030\030\031\031\032\075\033\065\034" +
    "\115\035\074\036\077\037\110\040\067\115\062\116\040" +
    "\117\112\120\066\121\061\122\113\123\046\124\056\125" +
    "\042\126\047\127\101\130\045\131\051\132\071\133\032" +
    "\134\026\135\017\136\057\137\114\140\072\141\117\142" +
    "\120\143\054\144\041\145\050\146\033\147\037\150\025" +
    "\151\027\152\100\153\021\154\035\155\024\156\060\157" +
    "\055\001\002\000\004\066\204\001\002\000\016\010\uffed" +
    "\043\205\044\207\112\211\113\210\114\uffed\001\002\000" +
    "\006\010\uffef\114\uffef\001\002\000\006\010\uffeb\114\213" +
    "\001\002\000\006\010\ufff0\114\ufff0\001\002\000\006\010" +
    "\uffee\114\uffee\001\002\000\006\010\ufff1\114\ufff1\001\002" +
    "\000\004\010\220\001\002\000\004\065\214\001\002\000" +
    "\156\016\020\017\022\020\036\021\104\022\063\023\116" +
    "\024\111\025\034\026\105\027\106\030\030\031\031\032" +
    "\075\033\065\034\115\035\074\036\077\037\110\040\067" +
    "\115\062\116\040\117\112\120\066\121\061\122\113\123" +
    "\046\124\056\125\042\126\047\127\101\130\045\131\051" +
    "\132\071\133\032\134\026\135\017\136\057\137\114\140" +
    "\072\141\117\142\120\143\054\144\041\145\050\146\033" +
    "\147\037\150\025\151\027\152\100\153\021\154\035\155" +
    "\024\156\060\157\055\001\002\000\004\160\216\001\002" +
    "\000\004\066\217\001\002\000\004\010\uffec\001\002\000" +
    "\206\016\020\017\022\020\036\021\104\022\063\023\116" +
    "\024\111\025\034\026\105\027\106\030\030\031\031\032" +
    "\075\033\065\034\115\035\074\036\077\037\110\040\067" +
    "\046\235\047\227\075\246\076\247\077\uffe9\102\225\103" +
    "\230\104\243\115\062\116\040\117\112\120\066\121\061" +
    "\122\113\123\046\124\056\125\042\126\047\127\101\130" +
    "\045\131\051\132\071\133\032\134\026\135\017\136\057" +
    "\137\114\140\072\141\117\142\120\143\054\144\041\145" +
    "\050\146\033\147\037\150\025\151\027\152\100\153\021" +
    "\154\035\155\024\156\060\157\055\160\222\161\241\162" +
    "\226\163\250\001\002\000\004\014\u01e5\001\002\000\056" +
    "\014\uff95\045\u01de\050\271\051\272\052\274\053\270\054" +
    "\266\055\267\056\264\057\275\060\273\061\u0129\062\u0121" +
    "\063\u0124\064\u011e\065\u0128\067\u011d\070\u0127\071\u011f\072" +
    "\u011b\073\u0123\074\u01dd\001\002\000\004\077\u01d9\001\002" +
    "\000\206\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\046\uffd5\047\uffd5\075\uffd5\076\uffd5\077\uffd5\102\uffd5" +
    "\103\uffd5\104\uffd5\115\uffd5\116\uffd5\117\uffd5\120\uffd5\121" +
    "\uffd5\122\uffd5\123\uffd5\124\uffd5\125\uffd5\126\uffd5\127\uffd5" +
    "\130\uffd5\131\uffd5\132\uffd5\133\uffd5\134\uffd5\135\uffd5\136" +
    "\uffd5\137\uffd5\140\uffd5\141\uffd5\142\uffd5\143\uffd5\144\uffd5" +
    "\145\uffd5\146\uffd5\147\uffd5\150\uffd5\151\uffd5\152\uffd5\153" +
    "\uffd5\154\uffd5\155\uffd5\156\uffd5\157\uffd5\160\uffd5\161\uffd5" +
    "\162\uffd5\163\uffd5\001\002\000\004\065\u01ce\001\002\000" +
    "\010\003\uff5d\014\uff5d\107\uff5d\001\002\000\032\003\uff67" +
    "\014\uff67\050\271\051\272\052\274\053\270\054\266\055" +
    "\267\056\264\057\275\060\273\107\uff67\001\002\000\004" +
    "\010\u01c4\001\002\000\206\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036" +
    "\uffe7\037\uffe7\040\uffe7\046\uffe7\047\uffe7\075\uffe7\076\uffe7" +
    "\077\uffe7\102\uffe7\103\uffe7\104\uffe7\115\uffe7\116\uffe7\117" +
    "\uffe7\120\uffe7\121\uffe7\122\uffe7\123\uffe7\124\uffe7\125\uffe7" +
    "\126\uffe7\127\uffe7\130\uffe7\131\uffe7\132\uffe7\133\uffe7\134" +
    "\uffe7\135\uffe7\136\uffe7\137\uffe7\140\uffe7\141\uffe7\142\uffe7" +
    "\143\uffe7\144\uffe7\145\uffe7\146\uffe7\147\uffe7\150\uffe7\151" +
    "\uffe7\152\uffe7\153\uffe7\154\uffe7\155\uffe7\156\uffe7\157\uffe7" +
    "\160\uffe7\161\uffe7\162\uffe7\163\uffe7\001\002\000\010\003" +
    "\uff9e\014\uff9e\107\uff9e\001\002\000\012\041\130\043\uffa6" +
    "\044\uffa6\160\uffa6\001\002\000\206\016\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\046\uffd6\047\uffd6\075\uffd6" +
    "\076\uffd6\077\uffd6\102\uffd6\103\uffd6\104\uffd6\115\uffd6\116" +
    "\uffd6\117\uffd6\120\uffd6\121\uffd6\122\uffd6\123\uffd6\124\uffd6" +
    "\125\uffd6\126\uffd6\127\uffd6\130\uffd6\131\uffd6\132\uffd6\133" +
    "\uffd6\134\uffd6\135\uffd6\136\uffd6\137\uffd6\140\uffd6\141\uffd6" +
    "\142\uffd6\143\uffd6\144\uffd6\145\uffd6\146\uffd6\147\uffd6\150" +
    "\uffd6\151\uffd6\152\uffd6\153\uffd6\154\uffd6\155\uffd6\156\uffd6" +
    "\157\uffd6\160\uffd6\161\uffd6\162\uffd6\163\uffd6\001\002\000" +
    "\032\003\uff67\014\uff67\050\271\051\272\052\274\053\270" +
    "\054\266\055\267\056\264\057\275\060\273\107\uff67\001" +
    "\002\000\010\003\uffa0\014\uffa0\107\uffa0\001\002\000\206" +
    "\016\020\017\022\020\036\021\104\022\063\023\116\024" +
    "\111\025\034\026\105\027\106\030\030\031\031\032\075" +
    "\033\065\034\115\035\074\036\077\037\110\040\067\046" +
    "\235\047\227\075\246\076\247\077\uffe9\102\225\103\230" +
    "\104\243\115\062\116\040\117\112\120\066\121\061\122" +
    "\113\123\046\124\056\125\042\126\047\127\101\130\045" +
    "\131\051\132\071\133\032\134\026\135\017\136\057\137" +
    "\114\140\072\141\117\142\120\143\054\144\041\145\050" +
    "\146\033\147\037\150\025\151\027\152\100\153\021\154" +
    "\035\155\024\156\060\157\055\160\222\161\241\162\226" +
    "\163\250\001\002\000\010\003\uff9f\014\uff9f\107\uff9f\001" +
    "\002\000\036\003\uff86\014\uff86\061\u0148\062\u0142\063\u013f" +
    "\064\u0146\065\u0147\066\u0149\067\u0141\070\u0140\071\u013e\072" +
    "\u0143\073\u0144\107\uff86\001\002\000\206\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\040\uffd7\046\uffd7\047\uffd7\075" +
    "\uffd7\076\uffd7\077\uffd7\102\uffd7\103\uffd7\104\uffd7\115\uffd7" +
    "\116\uffd7\117\uffd7\120\uffd7\121\uffd7\122\uffd7\123\uffd7\124" +
    "\uffd7\125\uffd7\126\uffd7\127\uffd7\130\uffd7\131\uffd7\132\uffd7" +
    "\133\uffd7\134\uffd7\135\uffd7\136\uffd7\137\uffd7\140\uffd7\141" +
    "\uffd7\142\uffd7\143\uffd7\144\uffd7\145\uffd7\146\uffd7\147\uffd7" +
    "\150\uffd7\151\uffd7\152\uffd7\153\uffd7\154\uffd7\155\uffd7\156" +
    "\uffd7\157\uffd7\160\uffd7\161\uffd7\162\uffd7\163\uffd7\001\002" +
    "\000\006\003\u0199\065\u019a\001\002\000\206\016\uffe3\017" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\046\uffe3\047\uffe3" +
    "\075\uffe3\076\uffe3\077\uffe3\102\uffe3\103\uffe3\104\uffe3\115" +
    "\uffe3\116\uffe3\117\uffe3\120\uffe3\121\uffe3\122\uffe3\123\uffe3" +
    "\124\uffe3\125\uffe3\126\uffe3\127\uffe3\130\uffe3\131\uffe3\132" +
    "\uffe3\133\uffe3\134\uffe3\135\uffe3\136\uffe3\137\uffe3\140\uffe3" +
    "\141\uffe3\142\uffe3\143\uffe3\144\uffe3\145\uffe3\146\uffe3\147" +
    "\uffe3\150\uffe3\151\uffe3\152\uffe3\153\uffe3\154\uffe3\155\uffe3" +
    "\156\uffe3\157\uffe3\160\uffe3\161\uffe3\162\uffe3\163\uffe3\001" +
    "\002\000\206\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\046\uffd4\047\uffd4\075\uffd4\076\uffd4\077\uffd4\102" +
    "\uffd4\103\uffd4\104\uffd4\115\uffd4\116\uffd4\117\uffd4\120\uffd4" +
    "\121\uffd4\122\uffd4\123\uffd4\124\uffd4\125\uffd4\126\uffd4\127" +
    "\uffd4\130\uffd4\131\uffd4\132\uffd4\133\uffd4\134\uffd4\135\uffd4" +
    "\136\uffd4\137\uffd4\140\uffd4\141\uffd4\142\uffd4\143\uffd4\144" +
    "\uffd4\145\uffd4\146\uffd4\147\uffd4\150\uffd4\151\uffd4\152\uffd4" +
    "\153\uffd4\154\uffd4\155\uffd4\156\uffd4\157\uffd4\160\uffd4\161" +
    "\uffd4\162\uffd4\163\uffd4\001\002\000\004\074\u018f\001\002" +
    "\000\006\003\251\065\252\001\002\000\010\003\uff5c\014" +
    "\uff5c\107\uff5c\001\002\000\004\011\u018e\001\002\000\014" +
    "\046\uff6d\047\uff6d\060\255\160\uff6d\161\uff6d\001\002\000" +
    "\004\066\302\001\002\000\012\046\262\047\256\160\260" +
    "\161\257\001\002\000\012\046\uff6e\047\uff6e\160\uff6e\161" +
    "\uff6e\001\002\000\034\003\uff67\014\uff67\050\271\051\272" +
    "\052\274\053\270\054\266\055\267\056\264\057\275\060" +
    "\273\066\uff67\107\uff67\001\002\000\034\003\uff67\014\uff67" +
    "\050\271\051\272\052\274\053\270\054\266\055\267\056" +
    "\264\057\275\060\273\066\uff67\107\uff67\001\002\000\034" +
    "\003\uff67\014\uff67\050\271\051\272\052\274\053\270\054" +
    "\266\055\267\056\264\057\275\060\273\066\uff67\107\uff67" +
    "\001\002\000\012\003\uff6f\014\uff6f\066\uff6f\107\uff6f\001" +
    "\002\000\034\003\uff67\014\uff67\050\271\051\272\052\274" +
    "\053\270\054\266\055\267\056\264\057\275\060\273\066" +
    "\uff67\107\uff67\001\002\000\012\003\uff6c\014\uff6c\066\uff6c" +
    "\107\uff6c\001\002\000\014\046\uff60\047\uff60\060\uff60\160" +
    "\uff60\161\uff60\001\002\000\014\046\uff6d\047\uff6d\060\255" +
    "\160\uff6d\161\uff6d\001\002\000\014\046\uff62\047\uff62\060" +
    "\uff62\160\uff62\161\uff62\001\002\000\014\046\uff61\047\uff61" +
    "\060\uff61\160\uff61\161\uff61\001\002\000\014\046\uff63\047" +
    "\uff63\060\uff63\160\uff63\161\uff63\001\002\000\014\046\uff66" +
    "\047\uff66\060\uff66\160\uff66\161\uff66\001\002\000\014\046" +
    "\uff65\047\uff65\060\uff65\160\uff65\161\uff65\001\002\000\014" +
    "\046\uff5e\047\uff5e\060\uff5e\160\uff5e\161\uff5e\001\002\000" +
    "\014\046\uff64\047\uff64\060\uff64\160\uff64\161\uff64\001\002" +
    "\000\014\046\uff5f\047\uff5f\060\uff5f\160\uff5f\161\uff5f\001" +
    "\002\000\012\003\uff68\014\uff68\066\uff68\107\uff68\001\002" +
    "\000\012\003\uff6a\014\uff6a\066\uff6a\107\uff6a\001\002\000" +
    "\012\003\uff69\014\uff69\066\uff69\107\uff69\001\002\000\012" +
    "\003\uff6b\014\uff6b\066\uff6b\107\uff6b\001\002\000\004\010" +
    "\303\001\002\000\024\075\304\076\311\077\316\100\312" +
    "\101\305\102\315\103\307\104\313\160\310\001\002\000" +
    "\004\074\u0189\001\002\000\004\014\u0188\001\002\000\026" +
    "\011\uffc0\075\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0\102" +
    "\uffc0\103\uffc0\104\uffc0\160\uffc0\001\002\000\004\010\u017f" +
    "\001\002\000\010\045\u016d\065\u016e\074\u0169\001\002\000" +
    "\004\065\u0162\001\002\000\004\014\u0161\001\002\000\004" +
    "\065\u0154\001\002\000\026\011\uffc6\075\304\076\311\077" +
    "\316\100\312\101\305\102\315\103\307\104\313\160\310" +
    "\001\002\000\004\065\320\001\002\000\004\014\317\001" +
    "\002\000\026\011\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf" +
    "\101\uffbf\102\uffbf\103\uffbf\104\uffbf\160\uffbf\001\002\000" +
    "\004\160\321\001\002\000\004\045\u0118\001\002\000\004" +
    "\014\323\001\002\000\014\046\uff6d\047\uff6d\060\255\160" +
    "\uff6d\161\uff6d\001\002\000\004\014\325\001\002\000\014" +
    "\075\326\160\332\161\327\162\335\163\334\001\002\000" +
    "\004\074\u0110\001\002\000\026\061\362\062\353\063\346" +
    "\064\360\066\uff44\067\351\070\350\071\345\072\356\073" +
    "\357\001\002\000\004\066\uff58\001\002\000\004\066\uff59" +
    "\001\002\000\032\061\362\062\353\063\346\064\360\065" +
    "\361\066\uff52\067\351\070\350\071\345\072\356\073\357" +
    "\074\354\001\002\000\004\066\336\001\002\000\004\066" +
    "\uff37\001\002\000\004\066\uff38\001\002\000\004\010\337" +
    "\001\002\000\024\075\304\076\311\077\316\100\312\101" +
    "\305\102\315\103\307\104\313\160\310\001\002\000\026" +
    "\011\uffc6\075\304\076\311\077\316\100\312\101\305\102" +
    "\315\103\307\104\313\160\310\001\002\000\026\011\uffc6" +
    "\075\304\076\311\077\316\100\312\101\305\102\315\103" +
    "\307\104\313\160\310\001\002\000\004\011\343\001\002" +
    "\000\026\011\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2\101" +
    "\uffc2\102\uffc2\103\uffc2\104\uffc2\160\uffc2\001\002\000\004" +
    "\011\uffc7\001\002\000\010\075\uff3b\160\uff3b\161\uff3b\001" +
    "\002\000\010\075\uff3f\160\uff3f\161\uff3f\001\002\000\004" +
    "\066\uff5b\001\002\000\010\075\uff3c\160\uff3c\161\uff3c\001" +
    "\002\000\010\075\uff3d\160\uff3d\161\uff3d\001\002\000\010" +
    "\075\u0100\160\u0103\161\u0101\001\002\000\010\075\uff40\160" +
    "\uff40\161\uff40\001\002\000\004\160\376\001\002\000\004" +
    "\066\uff55\001\002\000\010\075\uff3a\160\uff3a\161\uff3a\001" +
    "\002\000\010\075\uff39\160\uff39\161\uff39\001\002\000\010" +
    "\075\uff3e\160\uff3e\161\uff3e\001\002\000\010\066\366\075" +
    "\364\160\365\001\002\000\010\075\uff41\160\uff41\161\uff41" +
    "\001\002\000\004\066\uff54\001\002\000\004\074\373\001" +
    "\002\000\006\015\367\066\371\001\002\000\004\066\uff4b" +
    "\001\002\000\010\066\366\075\364\160\365\001\002\000" +
    "\004\066\uff4d\001\002\000\004\066\uff49\001\002\000\004" +
    "\066\uff4a\001\002\000\004\160\374\001\002\000\006\015" +
    "\367\066\371\001\002\000\004\066\uff4c\001\002\000\030" +
    "\061\362\062\353\063\346\064\360\065\361\066\uff52\067" +
    "\351\070\350\071\345\072\356\073\357\001\002\000\004" +
    "\066\uff56\001\002\000\004\074\u010b\001\002\000\026\061" +
    "\362\062\353\063\346\064\360\066\uff44\067\351\070\350" +
    "\071\345\072\356\073\357\001\002\000\004\066\uff53\001" +
    "\002\000\030\061\uff42\062\uff42\063\uff42\064\uff42\066\uff42" +
    "\067\uff42\070\uff42\071\uff42\072\uff42\073\uff42\074\u0104\001" +
    "\002\000\004\160\u0109\001\002\000\026\061\362\062\353" +
    "\063\346\064\360\066\uff44\067\351\070\350\071\345\072" +
    "\356\073\357\001\002\000\010\075\u0100\160\u0103\161\u0101" +
    "\001\002\000\004\066\uff47\001\002\000\004\066\uff45\001" +
    "\002\000\026\061\uff43\062\uff43\063\uff43\064\uff43\066\uff43" +
    "\067\uff43\070\uff43\071\uff43\072\uff43\073\uff43\001\002\000" +
    "\004\066\uff48\001\002\000\004\160\u010c\001\002\000\030" +
    "\061\uff42\062\uff42\063\uff42\064\uff42\066\uff42\067\uff42\070" +
    "\uff42\071\uff42\072\uff42\073\uff42\074\u0104\001\002\000\026" +
    "\061\362\062\353\063\346\064\360\066\uff44\067\351\070" +
    "\350\071\345\072\356\073\357\001\002\000\004\066\uff46" +
    "\001\002\000\004\066\uff57\001\002\000\004\160\u0112\001" +
    "\002\000\004\066\uff5a\001\002\000\030\061\362\062\353" +
    "\063\346\064\360\065\u0115\066\uff4e\067\351\070\350\071" +
    "\345\072\356\073\357\001\002\000\010\075\u0100\160\u0103" +
    "\161\u0101\001\002\000\004\066\uff51\001\002\000\010\066" +
    "\366\075\364\160\365\001\002\000\004\066\uff50\001\002" +
    "\000\004\066\uff4f\001\002\000\020\046\235\047\227\075" +
    "\246\160\u0119\161\241\162\226\163\250\001\002\000\060" +
    "\003\uff95\014\uff95\050\271\051\272\052\274\053\270\054" +
    "\266\055\267\056\264\057\275\060\273\061\u0129\062\u0121" +
    "\063\u0124\064\u011e\065\u0128\067\u011d\070\u0127\071\u011f\072" +
    "\u011b\073\u0123\074\u0122\107\uff95\001\002\000\004\014\uffb2" +
    "\001\002\000\010\075\uff71\160\uff71\161\uff71\001\002\000" +
    "\014\046\uff6d\047\uff6d\060\255\160\uff6d\161\uff6d\001\002" +
    "\000\010\075\uff74\160\uff74\161\uff74\001\002\000\010\075" +
    "\uff75\160\uff75\161\uff75\001\002\000\010\075\uff72\160\uff72" +
    "\161\uff72\001\002\000\010\075\u0137\160\u0139\161\u0138\001" +
    "\002\000\010\075\uff77\160\uff77\161\uff77\001\002\000\004" +
    "\160\u0135\001\002\000\010\075\uff70\160\uff70\161\uff70\001" +
    "\002\000\010\075\uff76\160\uff76\161\uff76\001\002\000\010" +
    "\003\uffa2\014\uffa2\107\uffa2\001\002\000\010\003\uff99\014" +
    "\uff99\107\uff99\001\002\000\010\075\uff73\160\uff73\161\uff73" +
    "\001\002\000\010\066\u012d\075\u012a\160\u012c\001\002\000" +
    "\010\075\uff78\160\uff78\161\uff78\001\002\000\004\074\u0132" +
    "\001\002\000\010\003\uff98\014\uff98\107\uff98\001\002\000" +
    "\006\015\u012e\066\u012f\001\002\000\010\003\uff8d\014\uff8d" +
    "\107\uff8d\001\002\000\010\066\u012d\075\u012a\160\u012c\001" +
    "\002\000\010\003\uff8b\014\uff8b\107\uff8b\001\002\000\010" +
    "\003\uff8f\014\uff8f\107\uff8f\001\002\000\010\003\uff8c\014" +
    "\uff8c\107\uff8c\001\002\000\004\160\u0133\001\002\000\006" +
    "\015\u012e\066\u012f\001\002\000\010\003\uff8e\014\uff8e\107" +
    "\uff8e\001\002\000\056\003\uff95\014\uff95\050\271\051\272" +
    "\052\274\053\270\054\266\055\267\056\264\057\275\060" +
    "\273\061\u0129\062\u0121\063\u0124\064\u011e\065\u0128\067\u011d" +
    "\070\u0127\071\u011f\072\u011b\073\u0123\107\uff95\001\002\000" +
    "\010\003\uff9a\014\uff9a\107\uff9a\001\002\000\004\074\u014d" +
    "\001\002\000\036\003\uff86\014\uff86\061\u0148\062\u0142\063" +
    "\u013f\064\u0146\065\u0147\066\u0149\067\u0141\070\u0140\071\u013e" +
    "\072\u0143\073\u0144\107\uff86\001\002\000\040\003\uff84\014" +
    "\uff84\061\uff84\062\uff84\063\uff84\064\uff84\065\uff84\066\uff84" +
    "\067\uff84\070\uff84\071\uff84\072\uff84\073\uff84\074\u013b\107" +
    "\uff84\001\002\000\010\003\uff97\014\uff97\107\uff97\001\002" +
    "\000\004\160\u014b\001\002\000\036\003\uff86\014\uff86\061" +
    "\u0148\062\u0142\063\u013f\064\u0146\065\u0147\066\u0149\067\u0141" +
    "\070\u0140\071\u013e\072\u0143\073\u0144\107\uff86\001\002\000" +
    "\010\075\u0137\160\u0139\161\u0138\001\002\000\010\075\uff7b" +
    "\160\uff7b\161\uff7b\001\002\000\010\075\uff81\160\uff81\161" +
    "\uff81\001\002\000\010\075\uff7c\160\uff7c\161\uff7c\001\002" +
    "\000\010\075\uff7d\160\uff7d\161\uff7d\001\002\000\010\075" +
    "\uff82\160\uff82\161\uff82\001\002\000\010\075\uff7a\160\uff7a" +
    "\161\uff7a\001\002\000\010\075\uff79\160\uff79\161\uff79\001" +
    "\002\000\010\003\uff89\014\uff89\107\uff89\001\002\000\010" +
    "\075\uff80\160\uff80\161\uff80\001\002\000\010\075\uff7f\160" +
    "\uff7f\161\uff7f\001\002\000\010\075\uff83\160\uff83\161\uff83" +
    "\001\002\000\010\075\uff7e\160\uff7e\161\uff7e\001\002\000" +
    "\010\003\uff87\014\uff87\107\uff87\001\002\000\036\003\uff85" +
    "\014\uff85\061\uff85\062\uff85\063\uff85\064\uff85\065\uff85\066" +
    "\uff85\067\uff85\070\uff85\071\uff85\072\uff85\073\uff85\107\uff85" +
    "\001\002\000\010\003\uff8a\014\uff8a\107\uff8a\001\002\000" +
    "\004\160\u014e\001\002\000\040\003\uff84\014\uff84\061\uff84" +
    "\062\uff84\063\uff84\064\uff84\065\uff84\066\uff84\067\uff84\070" +
    "\uff84\071\uff84\072\uff84\073\uff84\074\u013b\107\uff84\001\002" +
    "\000\036\003\uff86\014\uff86\061\u0148\062\u0142\063\u013f\064" +
    "\u0146\065\u0147\066\u0149\067\u0141\070\u0140\071\u013e\072\u0143" +
    "\073\u0144\107\uff86\001\002\000\010\003\uff88\014\uff88\107" +
    "\uff88\001\002\000\010\003\uff96\014\uff96\107\uff96\001\002" +
    "\000\004\011\u0153\001\002\000\206\016\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\046\uffd3\047\uffd3\075\uffd3" +
    "\076\uffd3\077\uffd3\102\uffd3\103\uffd3\104\uffd3\115\uffd3\116" +
    "\uffd3\117\uffd3\120\uffd3\121\uffd3\122\uffd3\123\uffd3\124\uffd3" +
    "\125\uffd3\126\uffd3\127\uffd3\130\uffd3\131\uffd3\132\uffd3\133" +
    "\uffd3\134\uffd3\135\uffd3\136\uffd3\137\uffd3\140\uffd3\141\uffd3" +
    "\142\uffd3\143\uffd3\144\uffd3\145\uffd3\146\uffd3\147\uffd3\150" +
    "\uffd3\151\uffd3\152\uffd3\153\uffd3\154\uffd3\155\uffd3\156\uffd3" +
    "\157\uffd3\160\uffd3\161\uffd3\162\uffd3\163\uffd3\001\002\000" +
    "\014\046\uff6d\047\uff6d\060\255\160\uff6d\161\uff6d\001\002" +
    "\000\004\066\u0156\001\002\000\004\010\u0157\001\002\000" +
    "\024\075\304\076\311\077\316\100\312\101\305\102\315" +
    "\103\307\104\313\160\310\001\002\000\026\011\uffc6\075" +
    "\304\076\311\077\316\100\312\101\305\102\315\103\307" +
    "\104\313\160\310\001\002\000\004\011\u015a\001\002\000" +
    "\030\011\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5" +
    "\102\uffb5\103\uffb5\104\uffb5\105\u015c\160\uffb5\001\002\000" +
    "\026\011\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7" +
    "\102\uffb7\103\uffb7\104\uffb7\160\uffb7\001\002\000\004\010" +
    "\u015d\001\002\000\024\075\304\076\311\077\316\100\312" +
    "\101\305\102\315\103\307\104\313\160\310\001\002\000" +
    "\026\011\uffc6\075\304\076\311\077\316\100\312\101\305" +
    "\102\315\103\307\104\313\160\310\001\002\000\004\011" +
    "\u0160\001\002\000\026\011\uffb6\075\uffb6\076\uffb6\077\uffb6" +
    "\100\uffb6\101\uffb6\102\uffb6\103\uffb6\104\uffb6\160\uffb6\001" +
    "\002\000\026\011\uffbe\075\uffbe\076\uffbe\077\uffbe\100\uffbe" +
    "\101\uffbe\102\uffbe\103\uffbe\104\uffbe\160\uffbe\001\002\000" +
    "\014\046\uff6d\047\uff6d\060\255\160\uff6d\161\uff6d\001\002" +
    "\000\004\066\u0164\001\002\000\004\010\u0165\001\002\000" +
    "\024\075\304\076\311\077\316\100\312\101\305\102\315" +
    "\103\307\104\313\160\310\001\002\000\026\011\uffc6\075" +
    "\304\076\311\077\316\100\312\101\305\102\315\103\307" +
    "\104\313\160\310\001\002\000\004\011\u0168\001\002\000" +
    "\026\011\uffc3\075\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3" +
    "\102\uffc3\103\uffc3\104\uffc3\160\uffc3\001\002\000\004\160" +
    "\u017d\001\002\000\026\011\uffc5\075\uffc5\076\uffc5\077\uffc5" +
    "\100\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\160\uffc5\001" +
    "\002\000\026\011\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9" +
    "\101\uffb9\102\uffb9\103\uffb9\104\uffb9\160\uffb9\001\002\000" +
    "\026\011\uffbb\075\uffbb\076\uffbb\077\uffbb\100\uffbb\101\uffbb" +
    "\102\uffbb\103\uffbb\104\uffbb\160\uffbb\001\002\000\022\046" +
    "\235\047\227\065\u0174\075\246\160\u0119\161\241\162\226" +
    "\163\250\001\002\000\002\001\002\000\026\011\uffba\075" +
    "\uffba\076\uffba\077\uffba\100\uffba\101\uffba\102\uffba\103\uffba" +
    "\104\uffba\160\uffba\001\002\000\004\066\u0171\001\002\000" +
    "\004\014\u0172\001\002\000\026\011\uffb3\075\uffb3\076\uffb3" +
    "\077\uffb3\100\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3\160" +
    "\uffb3\001\002\000\004\014\u017c\001\002\000\014\046\uff6d" +
    "\047\uff6d\060\255\160\uff6d\161\uff6d\001\002\000\004\066" +
    "\u0176\001\002\000\004\106\u0177\001\002\000\020\046\235" +
    "\047\227\075\246\160\u0119\161\241\162\226\163\250\001" +
    "\002\000\004\107\u0179\001\002\000\020\046\235\047\227" +
    "\075\246\160\u0119\161\241\162\226\163\250\001\002\000" +
    "\004\014\u017b\001\002\000\026\011\uffb8\075\uffb8\076\uffb8" +
    "\077\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8\104\uffb8\160" +
    "\uffb8\001\002\000\026\011\uffb4\075\uffb4\076\uffb4\077\uffb4" +
    "\100\uffb4\101\uffb4\102\uffb4\103\uffb4\104\uffb4\160\uffb4\001" +
    "\002\000\006\045\u016d\065\u016e\001\002\000\026\011\uffbc" +
    "\075\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103" +
    "\uffbc\104\uffbc\160\uffbc\001\002\000\024\075\304\076\311" +
    "\077\316\100\312\101\305\102\315\103\307\104\313\160" +
    "\310\001\002\000\026\011\uffc6\075\304\076\311\077\316" +
    "\100\312\101\305\102\315\103\307\104\313\160\310\001" +
    "\002\000\004\011\u0182\001\002\000\004\076\u0183\001\002" +
    "\000\004\065\u0184\001\002\000\014\046\uff6d\047\uff6d\060" +
    "\255\160\uff6d\161\uff6d\001\002\000\004\066\u0186\001\002" +
    "\000\004\014\u0187\001\002\000\026\011\uffc1\075\uffc1\076" +
    "\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1\104\uffc1" +
    "\160\uffc1\001\002\000\026\011\uffbd\075\uffbd\076\uffbd\077" +
    "\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd\104\uffbd\160\uffbd" +
    "\001\002\000\004\160\u018a\001\002\000\004\045\u018b\001" +
    "\002\000\020\046\235\047\227\075\246\160\u0119\161\241" +
    "\162\226\163\250\001\002\000\004\014\u018d\001\002\000" +
    "\026\011\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4" +
    "\102\uffc4\103\uffc4\104\uffc4\160\uffc4\001\002\000\206\016" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\046\uffd2" +
    "\047\uffd2\075\uffd2\076\uffd2\077\uffd2\102\uffd2\103\uffd2\104" +
    "\uffd2\115\uffd2\116\uffd2\117\uffd2\120\uffd2\121\uffd2\122\uffd2" +
    "\123\uffd2\124\uffd2\125\uffd2\126\uffd2\127\uffd2\130\uffd2\131" +
    "\uffd2\132\uffd2\133\uffd2\134\uffd2\135\uffd2\136\uffd2\137\uffd2" +
    "\140\uffd2\141\uffd2\142\uffd2\143\uffd2\144\uffd2\145\uffd2\146" +
    "\uffd2\147\uffd2\150\uffd2\151\uffd2\152\uffd2\153\uffd2\154\uffd2" +
    "\155\uffd2\156\uffd2\157\uffd2\160\uffd2\161\uffd2\162\uffd2\163" +
    "\uffd2\001\002\000\004\160\u0191\001\002\000\010\003\uffa1" +
    "\014\uffa1\107\uffa1\001\002\000\056\003\uff90\014\uff90\050" +
    "\271\051\272\052\274\053\270\054\266\055\267\056\264" +
    "\057\275\060\273\061\u0129\062\u0121\063\u0124\064\u011e\065" +
    "\u0195\067\u011d\070\u0127\071\u011f\072\u011b\073\u0123\107\uff90" +
    "\001\002\000\014\046\uff6d\047\uff6d\060\255\160\uff6d\161" +
    "\uff6d\001\002\000\010\075\u0137\160\u0139\161\u0138\001\002" +
    "\000\010\003\uff94\014\uff94\107\uff94\001\002\000\010\066" +
    "\u012d\075\u012a\160\u012c\001\002\000\010\003\uff93\014\uff93" +
    "\107\uff93\001\002\000\010\003\uff92\014\uff92\107\uff92\001" +
    "\002\000\010\003\uff91\014\uff91\107\uff91\001\002\000\004" +
    "\011\u01a9\001\002\000\014\046\uff6d\047\uff6d\060\255\160" +
    "\uff6d\161\uff6d\001\002\000\004\066\u019c\001\002\000\004" +
    "\010\u019d\001\002\000\024\075\304\076\311\077\316\100" +
    "\312\101\305\102\315\103\307\104\313\160\310\001\002" +
    "\000\026\011\uffc6\075\304\076\311\077\316\100\312\101" +
    "\305\102\315\103\307\104\313\160\310\001\002\000\004" +
    "\011\u01a0\001\002\000\210\016\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\046\uffcb\047\uffcb\075\uffcb\076\uffcb" +
    "\077\uffcb\102\uffcb\103\uffcb\104\uffcb\105\u01a1\115\uffcb\116" +
    "\uffcb\117\uffcb\120\uffcb\121\uffcb\122\uffcb\123\uffcb\124\uffcb" +
    "\125\uffcb\126\uffcb\127\uffcb\130\uffcb\131\uffcb\132\uffcb\133" +
    "\uffcb\134\uffcb\135\uffcb\136\uffcb\137\uffcb\140\uffcb\141\uffcb" +
    "\142\uffcb\143\uffcb\144\uffcb\145\uffcb\146\uffcb\147\uffcb\150" +
    "\uffcb\151\uffcb\152\uffcb\153\uffcb\154\uffcb\155\uffcb\156\uffcb" +
    "\157\uffcb\160\uffcb\161\uffcb\162\uffcb\163\uffcb\001\002\000" +
    "\006\003\u01a4\010\u01a3\001\002\000\206\016\uffcf\017\uffcf" +
    "\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\046\uffcf\047\uffcf\075" +
    "\uffcf\076\uffcf\077\uffcf\102\uffcf\103\uffcf\104\uffcf\115\uffcf" +
    "\116\uffcf\117\uffcf\120\uffcf\121\uffcf\122\uffcf\123\uffcf\124" +
    "\uffcf\125\uffcf\126\uffcf\127\uffcf\130\uffcf\131\uffcf\132\uffcf" +
    "\133\uffcf\134\uffcf\135\uffcf\136\uffcf\137\uffcf\140\uffcf\141" +
    "\uffcf\142\uffcf\143\uffcf\144\uffcf\145\uffcf\146\uffcf\147\uffcf" +
    "\150\uffcf\151\uffcf\152\uffcf\153\uffcf\154\uffcf\155\uffcf\156" +
    "\uffcf\157\uffcf\160\uffcf\161\uffcf\162\uffcf\163\uffcf\001\002" +
    "\000\024\075\304\076\311\077\316\100\312\101\305\102" +
    "\315\103\307\104\313\160\310\001\002\000\004\011\u01a5" +
    "\001\002\000\206\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\046\uffcc\047\uffcc\075\uffcc\076\uffcc\077\uffcc" +
    "\102\uffcc\103\uffcc\104\uffcc\115\uffcc\116\uffcc\117\uffcc\120" +
    "\uffcc\121\uffcc\122\uffcc\123\uffcc\124\uffcc\125\uffcc\126\uffcc" +
    "\127\uffcc\130\uffcc\131\uffcc\132\uffcc\133\uffcc\134\uffcc\135" +
    "\uffcc\136\uffcc\137\uffcc\140\uffcc\141\uffcc\142\uffcc\143\uffcc" +
    "\144\uffcc\145\uffcc\146\uffcc\147\uffcc\150\uffcc\151\uffcc\152" +
    "\uffcc\153\uffcc\154\uffcc\155\uffcc\156\uffcc\157\uffcc\160\uffcc" +
    "\161\uffcc\162\uffcc\163\uffcc\001\002\000\026\011\uffc6\075" +
    "\304\076\311\077\316\100\312\101\305\102\315\103\307" +
    "\104\313\160\310\001\002\000\004\011\u01a8\001\002\000" +
    "\206\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\046\uffcd\047\uffcd\075\uffcd\076\uffcd\077\uffcd\102\uffcd\103" +
    "\uffcd\104\uffcd\115\uffcd\116\uffcd\117\uffcd\120\uffcd\121\uffcd" +
    "\122\uffcd\123\uffcd\124\uffcd\125\uffcd\126\uffcd\127\uffcd\130" +
    "\uffcd\131\uffcd\132\uffcd\133\uffcd\134\uffcd\135\uffcd\136\uffcd" +
    "\137\uffcd\140\uffcd\141\uffcd\142\uffcd\143\uffcd\144\uffcd\145" +
    "\uffcd\146\uffcd\147\uffcd\150\uffcd\151\uffcd\152\uffcd\153\uffcd" +
    "\154\uffcd\155\uffcd\156\uffcd\157\uffcd\160\uffcd\161\uffcd\162" +
    "\uffcd\163\uffcd\001\002\000\206\016\uffce\017\uffce\020\uffce" +
    "\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce" +
    "\036\uffce\037\uffce\040\uffce\046\uffce\047\uffce\075\uffce\076" +
    "\uffce\077\uffce\102\uffce\103\uffce\104\uffce\115\uffce\116\uffce" +
    "\117\uffce\120\uffce\121\uffce\122\uffce\123\uffce\124\uffce\125" +
    "\uffce\126\uffce\127\uffce\130\uffce\131\uffce\132\uffce\133\uffce" +
    "\134\uffce\135\uffce\136\uffce\137\uffce\140\uffce\141\uffce\142" +
    "\uffce\143\uffce\144\uffce\145\uffce\146\uffce\147\uffce\150\uffce" +
    "\151\uffce\152\uffce\153\uffce\154\uffce\155\uffce\156\uffce\157" +
    "\uffce\160\uffce\161\uffce\162\uffce\163\uffce\001\002\000\010" +
    "\003\uff9b\014\uff9b\107\uff9b\001\002\000\004\077\uffea\001" +
    "\002\000\010\003\uff9d\014\uff9d\107\uff9d\001\002\000\010" +
    "\043\132\044\133\160\uffa3\001\002\000\004\160\u01af\001" +
    "\002\000\006\014\u01b2\045\u01b1\001\002\000\206\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8" +
    "\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\046\uffe8\047" +
    "\uffe8\075\uffe8\076\uffe8\077\uffe8\102\uffe8\103\uffe8\104\uffe8" +
    "\115\uffe8\116\uffe8\117\uffe8\120\uffe8\121\uffe8\122\uffe8\123" +
    "\uffe8\124\uffe8\125\uffe8\126\uffe8\127\uffe8\130\uffe8\131\uffe8" +
    "\132\uffe8\133\uffe8\134\uffe8\135\uffe8\136\uffe8\137\uffe8\140" +
    "\uffe8\141\uffe8\142\uffe8\143\uffe8\144\uffe8\145\uffe8\146\uffe8" +
    "\147\uffe8\150\uffe8\151\uffe8\152\uffe8\153\uffe8\154\uffe8\155" +
    "\uffe8\156\uffe8\157\uffe8\160\uffe8\161\uffe8\162\uffe8\163\uffe8" +
    "\001\002\000\022\046\235\047\227\065\u01b7\075\246\160" +
    "\u0119\161\241\162\226\163\250\001\002\000\206\016\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\046\uffdf\047" +
    "\uffdf\075\uffdf\076\uffdf\077\uffdf\102\uffdf\103\uffdf\104\uffdf" +
    "\115\uffdf\116\uffdf\117\uffdf\120\uffdf\121\uffdf\122\uffdf\123" +
    "\uffdf\124\uffdf\125\uffdf\126\uffdf\127\uffdf\130\uffdf\131\uffdf" +
    "\132\uffdf\133\uffdf\134\uffdf\135\uffdf\136\uffdf\137\uffdf\140" +
    "\uffdf\141\uffdf\142\uffdf\143\uffdf\144\uffdf\145\uffdf\146\uffdf" +
    "\147\uffdf\150\uffdf\151\uffdf\152\uffdf\153\uffdf\154\uffdf\155" +
    "\uffdf\156\uffdf\157\uffdf\160\uffdf\161\uffdf\162\uffdf\163\uffdf" +
    "\001\002\000\206\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\046\uffe0\047\uffe0\075\uffe0\076\uffe0\077\uffe0" +
    "\102\uffe0\103\uffe0\104\uffe0\115\uffe0\116\uffe0\117\uffe0\120" +
    "\uffe0\121\uffe0\122\uffe0\123\uffe0\124\uffe0\125\uffe0\126\uffe0" +
    "\127\uffe0\130\uffe0\131\uffe0\132\uffe0\133\uffe0\134\uffe0\135" +
    "\uffe0\136\uffe0\137\uffe0\140\uffe0\141\uffe0\142\uffe0\143\uffe0" +
    "\144\uffe0\145\uffe0\146\uffe0\147\uffe0\150\uffe0\151\uffe0\152" +
    "\uffe0\153\uffe0\154\uffe0\155\uffe0\156\uffe0\157\uffe0\160\uffe0" +
    "\161\uffe0\162\uffe0\163\uffe0\001\002\000\206\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\046\uffdd\047\uffdd" +
    "\075\uffdd\076\uffdd\077\uffdd\102\uffdd\103\uffdd\104\uffdd\115" +
    "\uffdd\116\uffdd\117\uffdd\120\uffdd\121\uffdd\122\uffdd\123\uffdd" +
    "\124\uffdd\125\uffdd\126\uffdd\127\uffdd\130\uffdd\131\uffdd\132" +
    "\uffdd\133\uffdd\134\uffdd\135\uffdd\136\uffdd\137\uffdd\140\uffdd" +
    "\141\uffdd\142\uffdd\143\uffdd\144\uffdd\145\uffdd\146\uffdd\147" +
    "\uffdd\150\uffdd\151\uffdd\152\uffdd\153\uffdd\154\uffdd\155\uffdd" +
    "\156\uffdd\157\uffdd\160\uffdd\161\uffdd\162\uffdd\163\uffdd\001" +
    "\002\000\206\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031" +
    "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\046\uffde\047\uffde\075\uffde\076\uffde\077\uffde\102" +
    "\uffde\103\uffde\104\uffde\115\uffde\116\uffde\117\uffde\120\uffde" +
    "\121\uffde\122\uffde\123\uffde\124\uffde\125\uffde\126\uffde\127" +
    "\uffde\130\uffde\131\uffde\132\uffde\133\uffde\134\uffde\135\uffde" +
    "\136\uffde\137\uffde\140\uffde\141\uffde\142\uffde\143\uffde\144" +
    "\uffde\145\uffde\146\uffde\147\uffde\150\uffde\151\uffde\152\uffde" +
    "\153\uffde\154\uffde\155\uffde\156\uffde\157\uffde\160\uffde\161" +
    "\uffde\162\uffde\163\uffde\001\002\000\004\014\u01c3\001\002" +
    "\000\016\003\u01b8\046\uff6d\047\uff6d\060\255\160\uff6d\161" +
    "\uff6d\001\002\000\004\014\u01c2\001\002\000\004\066\u01ba" +
    "\001\002\000\004\106\u01bb\001\002\000\020\046\235\047" +
    "\227\075\246\160\u0119\161\241\162\226\163\250\001\002" +
    "\000\006\003\u01bd\107\u01be\001\002\000\004\014\u01c1\001" +
    "\002\000\020\046\235\047\227\075\246\160\u0119\161\241" +
    "\162\226\163\250\001\002\000\004\014\u01c0\001\002\000" +
    "\206\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\046\uffca\047\uffca\075\uffca\076\uffca\077\uffca\102\uffca\103" +
    "\uffca\104\uffca\115\uffca\116\uffca\117\uffca\120\uffca\121\uffca" +
    "\122\uffca\123\uffca\124\uffca\125\uffca\126\uffca\127\uffca\130" +
    "\uffca\131\uffca\132\uffca\133\uffca\134\uffca\135\uffca\136\uffca" +
    "\137\uffca\140\uffca\141\uffca\142\uffca\143\uffca\144\uffca\145" +
    "\uffca\146\uffca\147\uffca\150\uffca\151\uffca\152\uffca\153\uffca" +
    "\154\uffca\155\uffca\156\uffca\157\uffca\160\uffca\161\uffca\162" +
    "\uffca\163\uffca\001\002\000\206\016\uffc8\017\uffc8\020\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\046\uffc8\047\uffc8\075\uffc8\076" +
    "\uffc8\077\uffc8\102\uffc8\103\uffc8\104\uffc8\115\uffc8\116\uffc8" +
    "\117\uffc8\120\uffc8\121\uffc8\122\uffc8\123\uffc8\124\uffc8\125" +
    "\uffc8\126\uffc8\127\uffc8\130\uffc8\131\uffc8\132\uffc8\133\uffc8" +
    "\134\uffc8\135\uffc8\136\uffc8\137\uffc8\140\uffc8\141\uffc8\142" +
    "\uffc8\143\uffc8\144\uffc8\145\uffc8\146\uffc8\147\uffc8\150\uffc8" +
    "\151\uffc8\152\uffc8\153\uffc8\154\uffc8\155\uffc8\156\uffc8\157" +
    "\uffc8\160\uffc8\161\uffc8\162\uffc8\163\uffc8\001\002\000\206" +
    "\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\046" +
    "\uffc9\047\uffc9\075\uffc9\076\uffc9\077\uffc9\102\uffc9\103\uffc9" +
    "\104\uffc9\115\uffc9\116\uffc9\117\uffc9\120\uffc9\121\uffc9\122" +
    "\uffc9\123\uffc9\124\uffc9\125\uffc9\126\uffc9\127\uffc9\130\uffc9" +
    "\131\uffc9\132\uffc9\133\uffc9\134\uffc9\135\uffc9\136\uffc9\137" +
    "\uffc9\140\uffc9\141\uffc9\142\uffc9\143\uffc9\144\uffc9\145\uffc9" +
    "\146\uffc9\147\uffc9\150\uffc9\151\uffc9\152\uffc9\153\uffc9\154" +
    "\uffc9\155\uffc9\156\uffc9\157\uffc9\160\uffc9\161\uffc9\162\uffc9" +
    "\163\uffc9\001\002\000\206\016\uffb1\017\uffb1\020\uffb1\021" +
    "\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036" +
    "\uffb1\037\uffb1\040\uffb1\046\uffb1\047\uffb1\075\uffb1\076\uffb1" +
    "\077\uffb1\102\uffb1\103\uffb1\104\uffb1\115\uffb1\116\uffb1\117" +
    "\uffb1\120\uffb1\121\uffb1\122\uffb1\123\uffb1\124\uffb1\125\uffb1" +
    "\126\uffb1\127\uffb1\130\uffb1\131\uffb1\132\uffb1\133\uffb1\134" +
    "\uffb1\135\uffb1\136\uffb1\137\uffb1\140\uffb1\141\uffb1\142\uffb1" +
    "\143\uffb1\144\uffb1\145\uffb1\146\uffb1\147\uffb1\150\uffb1\151" +
    "\uffb1\152\uffb1\153\uffb1\154\uffb1\155\uffb1\156\uffb1\157\uffb1" +
    "\160\uffb1\161\uffb1\162\uffb1\163\uffb1\001\002\000\024\075" +
    "\304\076\311\077\316\100\312\101\305\102\315\103\307" +
    "\104\313\160\310\001\002\000\026\011\uffc6\075\304\076" +
    "\311\077\316\100\312\101\305\102\315\103\307\104\313" +
    "\160\310\001\002\000\004\011\u01c7\001\002\000\004\076" +
    "\u01c8\001\002\000\004\065\u01c9\001\002\000\014\046\uff6d" +
    "\047\uff6d\060\255\160\uff6d\161\uff6d\001\002\000\004\066" +
    "\u01cb\001\002\000\004\014\u01cc\001\002\000\206\016\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\046\uffd0\047" +
    "\uffd0\075\uffd0\076\uffd0\077\uffd0\102\uffd0\103\uffd0\104\uffd0" +
    "\115\uffd0\116\uffd0\117\uffd0\120\uffd0\121\uffd0\122\uffd0\123" +
    "\uffd0\124\uffd0\125\uffd0\126\uffd0\127\uffd0\130\uffd0\131\uffd0" +
    "\132\uffd0\133\uffd0\134\uffd0\135\uffd0\136\uffd0\137\uffd0\140" +
    "\uffd0\141\uffd0\142\uffd0\143\uffd0\144\uffd0\145\uffd0\146\uffd0" +
    "\147\uffd0\150\uffd0\151\uffd0\152\uffd0\153\uffd0\154\uffd0\155" +
    "\uffd0\156\uffd0\157\uffd0\160\uffd0\161\uffd0\162\uffd0\163\uffd0" +
    "\001\002\000\010\003\uff9c\014\uff9c\107\uff9c\001\002\000" +
    "\004\160\321\001\002\000\004\014\u01d0\001\002\000\014" +
    "\046\uff6d\047\uff6d\060\255\160\uff6d\161\uff6d\001\002\000" +
    "\004\014\u01d2\001\002\000\014\075\326\160\332\161\327" +
    "\162\335\163\334\001\002\000\004\066\u01d4\001\002\000" +
    "\004\010\u01d5\001\002\000\024\075\304\076\311\077\316" +
    "\100\312\101\305\102\315\103\307\104\313\160\310\001" +
    "\002\000\026\011\uffc6\075\304\076\311\077\316\100\312" +
    "\101\305\102\315\103\307\104\313\160\310\001\002\000" +
    "\004\011\u01d8\001\002\000\206\016\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\046\uffd1\047\uffd1\075\uffd1\076" +
    "\uffd1\077\uffd1\102\uffd1\103\uffd1\104\uffd1\115\uffd1\116\uffd1" +
    "\117\uffd1\120\uffd1\121\uffd1\122\uffd1\123\uffd1\124\uffd1\125" +
    "\uffd1\126\uffd1\127\uffd1\130\uffd1\131\uffd1\132\uffd1\133\uffd1" +
    "\134\uffd1\135\uffd1\136\uffd1\137\uffd1\140\uffd1\141\uffd1\142" +
    "\uffd1\143\uffd1\144\uffd1\145\uffd1\146\uffd1\147\uffd1\150\uffd1" +
    "\151\uffd1\152\uffd1\153\uffd1\154\uffd1\155\uffd1\156\uffd1\157" +
    "\uffd1\160\uffd1\161\uffd1\162\uffd1\163\uffd1\001\002\000\020" +
    "\046\235\047\227\075\246\160\u0119\161\241\162\226\163" +
    "\250\001\002\000\004\014\u01db\001\002\000\004\011\u01dc" +
    "\001\002\000\006\011\ufff5\111\ufff5\001\002\000\004\160" +
    "\u01e2\001\002\000\022\046\235\047\227\065\u01b7\075\246" +
    "\160\u0119\161\241\162\226\163\250\001\002\000\206\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\046\uffe1" +
    "\047\uffe1\075\uffe1\076\uffe1\077\uffe1\102\uffe1\103\uffe1\104" +
    "\uffe1\115\uffe1\116\uffe1\117\uffe1\120\uffe1\121\uffe1\122\uffe1" +
    "\123\uffe1\124\uffe1\125\uffe1\126\uffe1\127\uffe1\130\uffe1\131" +
    "\uffe1\132\uffe1\133\uffe1\134\uffe1\135\uffe1\136\uffe1\137\uffe1" +
    "\140\uffe1\141\uffe1\142\uffe1\143\uffe1\144\uffe1\145\uffe1\146" +
    "\uffe1\147\uffe1\150\uffe1\151\uffe1\152\uffe1\153\uffe1\154\uffe1" +
    "\155\uffe1\156\uffe1\157\uffe1\160\uffe1\161\uffe1\162\uffe1\163" +
    "\uffe1\001\002\000\206\016\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2" +
    "\037\uffe2\040\uffe2\046\uffe2\047\uffe2\075\uffe2\076\uffe2\077" +
    "\uffe2\102\uffe2\103\uffe2\104\uffe2\115\uffe2\116\uffe2\117\uffe2" +
    "\120\uffe2\121\uffe2\122\uffe2\123\uffe2\124\uffe2\125\uffe2\126" +
    "\uffe2\127\uffe2\130\uffe2\131\uffe2\132\uffe2\133\uffe2\134\uffe2" +
    "\135\uffe2\136\uffe2\137\uffe2\140\uffe2\141\uffe2\142\uffe2\143" +
    "\uffe2\144\uffe2\145\uffe2\146\uffe2\147\uffe2\150\uffe2\151\uffe2" +
    "\152\uffe2\153\uffe2\154\uffe2\155\uffe2\156\uffe2\157\uffe2\160" +
    "\uffe2\161\uffe2\162\uffe2\163\uffe2\001\002\000\206\016\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\046\uffe6\047" +
    "\uffe6\075\uffe6\076\uffe6\077\uffe6\102\uffe6\103\uffe6\104\uffe6" +
    "\115\uffe6\116\uffe6\117\uffe6\120\uffe6\121\uffe6\122\uffe6\123" +
    "\uffe6\124\uffe6\125\uffe6\126\uffe6\127\uffe6\130\uffe6\131\uffe6" +
    "\132\uffe6\133\uffe6\134\uffe6\135\uffe6\136\uffe6\137\uffe6\140" +
    "\uffe6\141\uffe6\142\uffe6\143\uffe6\144\uffe6\145\uffe6\146\uffe6" +
    "\147\uffe6\150\uffe6\151\uffe6\152\uffe6\153\uffe6\154\uffe6\155" +
    "\uffe6\156\uffe6\157\uffe6\160\uffe6\161\uffe6\162\uffe6\163\uffe6" +
    "\001\002\000\054\014\uff95\045\u01e3\050\271\051\272\052" +
    "\274\053\270\054\266\055\267\056\264\057\275\060\273" +
    "\061\u0129\062\u0121\063\u0124\064\u011e\065\u0128\067\u011d\070" +
    "\u0127\071\u011f\072\u011b\073\u0123\001\002\000\022\046\235" +
    "\047\227\065\u01b7\075\246\160\u0119\161\241\162\226\163" +
    "\250\001\002\000\206\016\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5" +
    "\037\uffe5\040\uffe5\046\uffe5\047\uffe5\075\uffe5\076\uffe5\077" +
    "\uffe5\102\uffe5\103\uffe5\104\uffe5\115\uffe5\116\uffe5\117\uffe5" +
    "\120\uffe5\121\uffe5\122\uffe5\123\uffe5\124\uffe5\125\uffe5\126" +
    "\uffe5\127\uffe5\130\uffe5\131\uffe5\132\uffe5\133\uffe5\134\uffe5" +
    "\135\uffe5\136\uffe5\137\uffe5\140\uffe5\141\uffe5\142\uffe5\143" +
    "\uffe5\144\uffe5\145\uffe5\146\uffe5\147\uffe5\150\uffe5\151\uffe5" +
    "\152\uffe5\153\uffe5\154\uffe5\155\uffe5\156\uffe5\157\uffe5\160" +
    "\uffe5\161\uffe5\162\uffe5\163\uffe5\001\002\000\206\016\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\046\uffe4\047" +
    "\uffe4\075\uffe4\076\uffe4\077\uffe4\102\uffe4\103\uffe4\104\uffe4" +
    "\115\uffe4\116\uffe4\117\uffe4\120\uffe4\121\uffe4\122\uffe4\123" +
    "\uffe4\124\uffe4\125\uffe4\126\uffe4\127\uffe4\130\uffe4\131\uffe4" +
    "\132\uffe4\133\uffe4\134\uffe4\135\uffe4\136\uffe4\137\uffe4\140" +
    "\uffe4\141\uffe4\142\uffe4\143\uffe4\144\uffe4\145\uffe4\146\uffe4" +
    "\147\uffe4\150\uffe4\151\uffe4\152\uffe4\153\uffe4\154\uffe4\155" +
    "\uffe4\156\uffe4\157\uffe4\160\uffe4\161\uffe4\162\uffe4\163\uffe4" +
    "\001\002\000\004\160\u01e7\001\002\000\006\015\202\066" +
    "\ufff2\001\002\000\004\066\ufff3\001\002\000\006\011\ufff4" +
    "\111\ufff4\001\002\000\004\011\ufffb\001\002\000\004\014" +
    "\u01f5\001\002\000\010\043\132\044\133\160\uffa3\001\002" +
    "\000\004\160\u01ee\001\002\000\006\014\u01f1\045\u01ef\001" +
    "\002\000\020\046\235\047\227\075\246\160\u0119\161\241" +
    "\162\226\163\250\001\002\000\164\011\uffac\016\uffac\017" +
    "\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac" +
    "\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034" +
    "\uffac\035\uffac\036\uffac\037\uffac\040\uffac\110\uffac\111\uffac" +
    "\115\uffac\116\uffac\117\uffac\120\uffac\121\uffac\122\uffac\123" +
    "\uffac\124\uffac\125\uffac\126\uffac\127\uffac\130\uffac\131\uffac" +
    "\132\uffac\133\uffac\134\uffac\135\uffac\136\uffac\137\uffac\140" +
    "\uffac\141\uffac\142\uffac\143\uffac\144\uffac\145\uffac\146\uffac" +
    "\147\uffac\150\uffac\151\uffac\152\uffac\153\uffac\154\uffac\155" +
    "\uffac\156\uffac\157\uffac\001\002\000\164\011\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025" +
    "\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa" +
    "\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\110\uffaa\111" +
    "\uffaa\115\uffaa\116\uffaa\117\uffaa\120\uffaa\121\uffaa\122\uffaa" +
    "\123\uffaa\124\uffaa\125\uffaa\126\uffaa\127\uffaa\130\uffaa\131" +
    "\uffaa\132\uffaa\133\uffaa\134\uffaa\135\uffaa\136\uffaa\137\uffaa" +
    "\140\uffaa\141\uffaa\142\uffaa\143\uffaa\144\uffaa\145\uffaa\146" +
    "\uffaa\147\uffaa\150\uffaa\151\uffaa\152\uffaa\153\uffaa\154\uffaa" +
    "\155\uffaa\156\uffaa\157\uffaa\001\002\000\004\014\u01f3\001" +
    "\002\000\164\011\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9" +
    "\037\uffa9\040\uffa9\110\uffa9\111\uffa9\115\uffa9\116\uffa9\117" +
    "\uffa9\120\uffa9\121\uffa9\122\uffa9\123\uffa9\124\uffa9\125\uffa9" +
    "\126\uffa9\127\uffa9\130\uffa9\131\uffa9\132\uffa9\133\uffa9\134" +
    "\uffa9\135\uffa9\136\uffa9\137\uffa9\140\uffa9\141\uffa9\142\uffa9" +
    "\143\uffa9\144\uffa9\145\uffa9\146\uffa9\147\uffa9\150\uffa9\151" +
    "\uffa9\152\uffa9\153\uffa9\154\uffa9\155\uffa9\156\uffa9\157\uffa9" +
    "\001\002\000\004\014\uffa8\001\002\000\164\011\uffab\016" +
    "\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab" +
    "\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033" +
    "\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\110\uffab" +
    "\111\uffab\115\uffab\116\uffab\117\uffab\120\uffab\121\uffab\122" +
    "\uffab\123\uffab\124\uffab\125\uffab\126\uffab\127\uffab\130\uffab" +
    "\131\uffab\132\uffab\133\uffab\134\uffab\135\uffab\136\uffab\137" +
    "\uffab\140\uffab\141\uffab\142\uffab\143\uffab\144\uffab\145\uffab" +
    "\146\uffab\147\uffab\150\uffab\151\uffab\152\uffab\153\uffab\154" +
    "\uffab\155\uffab\156\uffab\157\uffab\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01f3\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\063" +
    "\005\051\006\043\007\067\011\075\014\101\016\022\021" +
    "\042\067\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\u01eb\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\u01e9" +
    "\006\043\007\067\014\101\016\022\021\042\067\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\004\151\005\051\006\043\007\067\011\075" +
    "\014\101\016\022\021\042\067\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\150" +
    "\014\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\120\007\067" +
    "\014\101\067\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\130\001\001\000\002\001\001" +
    "\000\004\020\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\136" +
    "\070\137\001\001\000\004\017\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\136\070\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\140\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\171\005\051\006\043" +
    "\007\067\011\075\014\101\016\022\021\042\067\106\001" +
    "\001\000\002\001\001\000\004\140\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\177\001\001\000\002\001\001\000\004\075\202\001\001" +
    "\000\004\016\u01e5\001\001\000\002\001\001\000\004\076" +
    "\205\001\001\000\002\001\001\000\004\077\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\013\243\016\232\026\220\046\235\050\241\057\233" +
    "\061\223\062\244\073\230\100\222\131\231\134\237\141" +
    "\236\001\001\000\002\001\001\000\012\034\u011b\105\u0124" +
    "\130\u011f\136\u0125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\034\264" +
    "\036\u01cc\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\u01ac\001\001\000\002\001\001" +
    "\000\006\034\264\036\u01ab\001\001\000\002\001\001\000" +
    "\034\013\243\016\232\026\220\046\235\050\241\057\233" +
    "\061\223\062\244\073\230\100\u01aa\131\231\134\237\141" +
    "\236\001\001\000\002\001\001\000\006\031\u013c\035\u01a9" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\106\u018f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\252\162\253\001\001\000\002\001\001\000\004\163\260" +
    "\001\001\000\002\001\001\000\006\034\264\036\300\001" +
    "\001\000\006\034\264\036\277\001\001\000\006\034\264" +
    "\036\276\001\001\000\002\001\001\000\006\034\264\036" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\032\275\162\253\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\051\313\071\305\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\053\u016e\054\u0169\055\u016a\103" +
    "\u016b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\051\340\056\u0151\071\305\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\321\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\032\323\162\253\001\001\000\002\001\001\000\010" +
    "\144\332\147\330\150\327\001\001\000\004\146\u0110\001" +
    "\001\000\006\151\u010e\161\u0105\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\145\346\152\354\161\351\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\051\337\071\305\001\001\000" +
    "\010\051\340\056\341\071\305\001\001\000\010\051\340" +
    "\056\343\071\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\155\u0101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\153\362\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\157\367\001" +
    "\001\000\002\001\001\000\004\153\371\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\157\374\001\001\000\002\001\001\000\006" +
    "\152\376\161\351\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\151\u0109\161\u0105\001\001\000\002\001\001" +
    "\000\004\160\u0104\001\001\000\002\001\001\000\006\151" +
    "\u0106\161\u0105\001\001\000\004\155\u0107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\160\u010c\001\001\000\006" +
    "\151\u010d\161\u0105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\156\u0113" +
    "\161\u0112\001\001\000\004\155\u0116\001\001\000\002\001" +
    "\001\000\004\153\u0115\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\026\u0119\046\235\131\231\134\237\001" +
    "\001\000\012\034\u011b\105\u0124\130\u011f\136\u0125\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\u0150\162" +
    "\253\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\u0139\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\132" +
    "\u012a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\133\u012f\001\001\000\002\001\001\000" +
    "\004\132\u0130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\133\u0133\001" +
    "\001\000\002\001\001\000\010\034\u011b\130\u011f\136\u0135" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\u013c\035\u014b\001\001\000\004\135\u013b\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\u013c\035\u0144\001" +
    "\001\000\004\027\u0149\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\135\u014e\001\001\000" +
    "\006\031\u013c\035\u014f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\u0154\162\253\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\051\u0157\071\305\001\001\000\010\051\340\056" +
    "\u0158\071\305\001\001\000\002\001\001\000\004\072\u015a" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\051" +
    "\u015d\071\305\001\001\000\010\051\340\056\u015e\071\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\032\u0162\162\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\051\u0165\071\305\001\001\000" +
    "\010\051\340\056\u0166\071\305\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\026\u0172\046\235" +
    "\131\231\134\237\001\001\000\004\041\u016f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\u0174\162\253\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\026\u0177" +
    "\046\235\131\231\134\237\001\001\000\002\001\001\000" +
    "\012\026\u0179\046\235\131\231\134\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\053" +
    "\u016e\055\u016a\103\u017d\001\001\000\002\001\001\000\006" +
    "\051\u017f\071\305\001\001\000\010\051\340\056\u0180\071" +
    "\305\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\032\u0184\162\253\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\026\u018b\046" +
    "\235\131\231\134\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\034\u0191\120\u0193\130\u0192\001\001\000\006" +
    "\032\u0197\162\253\001\001\000\004\027\u0196\001\001\000" +
    "\002\001\001\000\004\132\u0195\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\032\u019a\162\253\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\051\u019d\071\305\001\001\000\010\051" +
    "\340\056\u019e\071\305\001\001\000\002\001\001\000\004" +
    "\063\u01a1\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\051\u01a5\071\305\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\051\340\056\u01a6\071\305\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u01ad\001\001\000\002\001\001\000\004\142\u01af\001\001" +
    "\000\002\001\001\000\020\026\u01b5\046\235\064\u01b3\102" +
    "\u01b4\131\231\134\237\143\u01b2\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\032\u01b8\162\253\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\026" +
    "\u01bb\046\235\131\231\134\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\026\u01be\046\235\131\231\134" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\051" +
    "\u01c4\071\305\001\001\000\010\051\340\056\u01c5\071\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\032\u01c9\162\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\060\u01ce\001\001\000\002\001\001\000\006\032\u01d0" +
    "\162\253\001\001\000\002\001\001\000\010\144\u01d2\147" +
    "\330\150\327\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\051\u01d5\071\305\001\001\000\010\051\340\056" +
    "\u01d6\071\305\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\026\u01d9\046\235\131\231\134\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\026\u01b5\046\235\064\u01de\102\u01df\104" +
    "\u01e0\131\231\134\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\034\u011b\130\u011f\136" +
    "\u0135\001\001\000\020\026\u01b5\046\235\064\u01de\102\u01df" +
    "\104\u01e3\131\231\134\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\075\u01e7\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u01ec\001\001\000\002\001\001" +
    "\000\006\023\u01f1\047\u01ef\001\001\000\012\026\u01f3\046" +
    "\235\131\231\134\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static LinkedList<TError> TablaES = new LinkedList<TError>(); 

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        if(s.value != null){
            String lexema = s.value.toString();
            int fila = s.left;
            int columna = s.right;
            TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
            TablaES.add(datos);
            System.out.println("------ Recuperacion exitosa ------");
            System.out.println("\t\tLexema: "+lexema);
        }
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        if(s.value != null){
            String lexema = s.value.toString();
            int fila = s.left;
            int columna = s.right;
            TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
            TablaES.add(datos);
            System.out.println("------ Error Sintactico irrecuperable ------");
            System.out.println("\t\tLexema: "+lexema);
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico$actions {



  private final analisis_sintactico parser;

  /** Constructor */
  CUP$analisis_sintactico$actions(analisis_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action_part00000000(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico$parser.done_parsing();
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= pragma solidity techo numero numero punto_coma contract ident O_Parent_L BODY_CONTRACT C_Parent_L INICIO_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO_S ::= contract ident O_Parent_L BODY_CONTRACT C_Parent_L INICIO_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_S",94, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_S",94, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BODY_CONTRACT ::= EN BODY_CONTRACT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BODY_CONTRACT ::= BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BODY_CONTRACT_P ::= VAR_CONTRACT BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BODY_CONTRACT_P ::= BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BODY_CONTRACT_PP ::= STRUCTURE BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BODY_CONTRACT_PP ::= BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BODY_CONTRACT_PPP ::= FUNC BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BODY_CONTRACT_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNC ::= functionSoli ident O_Parent_R TIPO ident FUNC_PARAM C_Parent_R FUNC_MOD FUNC_RETURNS O_Parent_L CUERPO_M returnSoli EXP punto_coma C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNC ::= functionSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNC_PARAM ::= coma TIPO ident FUNC_PARAM 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNC_PARAM ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNC_MOD ::= payableSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNC_MOD ::= privateSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNC_MOD ::= publicSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNC_MOD ::= internalSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNC_MOD ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNC_RETURNS ::= returns O_Parent_R TIPO ident C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_RETURNS",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNC_RETURNS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_RETURNS",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO_M ::= CUERPO_MA CUERPO_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO_M ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPO_MA ::= TIPO VAR_ARR VAR_ACCESS ident CUERPO_ASSIGN_F 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_MA",95, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPO_MA ::= CUERPO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_MA",95, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CUERPO ::= ident igual CUERPO_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPO ::= ident punto ident igual CUERPO_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPO ::= EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPO ::= STRU 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPO_P ::= ASSIGN_NOT_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_P",66, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUERPO_P ::= STRU_IF_LINE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_P",66, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CUERPO_ASSIGN_F ::= igual CUERPO_ASSIGN_FP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_F",96, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CUERPO_ASSIGN_F ::= punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_F",96, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CUERPO_ASSIGN_FP ::= ASSIGN_NOT_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_FP",97, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUERPO_ASSIGN_FP ::= STRU_IF_LINE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_FP",97, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // STRUCTURE ::= structSoli ident O_Parent_L TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // STRUCTURE ::= structSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // STRUCTURE ::= structSoli ident error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // STRUCTURE_VAR ::= TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // STRUCTURE_VAR ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STRU ::= STRU_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STRU ::= STRU_FOR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STRU ::= STRU_DO_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STRU ::= STRU_IF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // STRU_WHILE ::= whileSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_WHILE",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STRU_WHILE ::= whileSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_WHILE",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STRU_FOR ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma F_EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_FOR",45, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STRU_DO_WHILE ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_DO_WHILE",47, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STRU_IF ::= ifSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L STRU_ELSE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF",48, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STRU_IF ::= ifSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF",48, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STRU_ELSE ::= elseSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STRU_ELSE ::= elseSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // STRU_ELSE ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STRU_IF_LINE ::= O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP punto_punto EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_LINE",50, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STRU_IF_LINE ::= O_Parent_R error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_LINE",50, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // STRU_IF_LINE ::= O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_LINE",50, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BODY_SENT_M ::= BODY_SENT BODY_SENT_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BODY_SENT_M ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BODY_SENT ::= ident BODY_SENT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BODY_SENT ::= thisSoli punto ident igual EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BODY_SENT ::= whileSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BODY_SENT ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma F_EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BODY_SENT ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BODY_SENT ::= STRU_IF_ELSE_IN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BODY_SENT ::= returnSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BODY_SENT ::= breakSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BODY_SENT ::= continueSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BODY_SENT_P ::= punto ident BODY_SENT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BODY_SENT_P ::= BODY_SENT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BODY_SENT_PP ::= BODY_ASSIGN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BODY_SENT_PP ::= BODY_FUN_CALL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // BODY_SENT_PP ::= igual O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP punto_punto EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // STRU_IF_ELSE_IN ::= ifSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L STRU_ELSE_IN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_ELSE_IN",55, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // STRU_ELSE_IN ::= elseSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // STRU_ELSE_IN ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BODY_ASSIGN ::= igual EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_ASSIGN",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BODY_FUN_CALL ::= O_Parent_R FUNC_CALL_PARAMS C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_FUN_CALL",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FOR_VAR ::= ident igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FOR_VAR",46, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ASSIGN_NOT_VAR ::= EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ASSIGN_NOT_VAR",64, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EN ::= enumSoli ident O_Parent_L ident EN_IDENT C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EN ::= enumSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EN_IDENT ::= coma ident EN_IDENT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EN_IDENT ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VAR_CONTRACT ::= TIPO VAR_ARR VAR_ACCESS ident VAR_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VAR_CONTRACT ::= TIPO error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VAR_CONTRACT_P ::= punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VAR_CONTRACT_P ::= VAR_CONTRACT_C punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VAR_CONTRACT_C ::= igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_C",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VAR_ARR ::= O_Parent_C C_Parent_C 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VAR_ARR ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VAR_ACCESS ::= publicSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VAR_ACCESS ::= privateSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VAR_ACCESS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= ident EXP_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= thisSoli EXP_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= BODY_LIT_TF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= ARIT_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= BOOL_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // BOOL_GATE ::= trueSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BOOL_GATE",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // BOOL_GATE ::= falseSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BOOL_GATE",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ARIT_GATE ::= numero OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARIT_GATE",90, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP_P ::= punto ident EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P",67, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP_P ::= EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P",67, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP_P_S ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP_P_S ::= OP_EXCL OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXP_P_S ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXP_P_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXP_PP ::= punto ident EXP_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PP",68, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXP_PPP ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXP_PPP ::= OP_EXCL OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXP_PPP ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXP_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // FUNC_CALL_CASE ::= ident FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FUNC_CALL_CASE ::= thisSoli punto ident FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FUNC_CALL_CASE ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FUNC_CALL_CASE_P ::= coma FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE_P",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FUNC_CALL_CASE_P ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE_P",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OP_ARIT ::= numero OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OP_ARIT ::= ident OP_ARIT_Parent OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OP_ARIT ::= thisSoli punto ident OP_ARIT_Parent OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OP_ARIT_P ::= OP OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OP_ARIT_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OP_ARIT_Parent ::= punto ident 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_Parent",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OP_ARIT_Parent ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_Parent",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OP ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OP ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OP ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OP ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OP ::= O_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OP ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OP ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OP ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OP ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OP ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OP ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OP_EXCL ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OP_EXCL ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OP_EXCL ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OP_EXCL ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OP_EXCL ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OP_EXCL ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OP_EXCL ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OP_EXCL ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OP_EXCL ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OP_BOOL ::= NEGADO OP_BOOL_N 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NEGADO ::= negacion 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NEGADO",112, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NEGADO ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NEGADO",112, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OP_BOOL_N ::= trueSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_N",113, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OP_BOOL_N ::= falseSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_N",113, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OP_BOOL_N ::= ident OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_N",113, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OP_BOOL_N ::= numero OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_N",113, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OP_BOOL_P ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OP_BOOL_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OP_OP_BOOL ::= igual_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // OP_OP_BOOL ::= mayor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // OP_OP_BOOL ::= mayor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // OP_OP_BOOL ::= menor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // OP_OP_BOOL ::= menor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // OP_OP_BOOL ::= diferente 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // OP_OP_BOOL ::= op_or 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // OP_OP_BOOL ::= op_and 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // OP_OP_BOOL ::= negacion 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // BODY_LIT_TF ::= numero_HEX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // BODY_LIT_TF ::= stringSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // F_EXP ::= ident F_EXP_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP",98, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // F_EXP ::= thisSoli F_EXP_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP",98, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // F_EXP ::= F_BODY_LIT_TF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP",98, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // F_EXP ::= F_ARIT_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP",98, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // F_ARIT_GATE ::= numero F_OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_ARIT_GATE",102, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // F_EXP_P ::= punto ident F_EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_P",99, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // F_EXP_P ::= F_EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_P",99, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // F_EXP_P_S ::= O_Parent_R F_FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_P_S",104, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // F_EXP_P_S ::= F_OP F_OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_P_S",104, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // F_EXP_P_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_P_S",104, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // F_EXP_PP ::= punto ident F_EXP_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_PP",100, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // F_EXP_PPP ::= O_Parent_R F_FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_PPP",108, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // F_EXP_PPP ::= F_OP F_OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_PPP",108, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // F_EXP_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_EXP_PPP",108, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // F_FUNC_CALL_CASE ::= ident F_FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_FUNC_CALL_CASE",105, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // F_FUNC_CALL_CASE ::= thisSoli punto ident F_FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_FUNC_CALL_CASE",105, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // F_FUNC_CALL_CASE ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_FUNC_CALL_CASE",105, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // F_FUNC_CALL_CASE_P ::= coma F_FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_FUNC_CALL_CASE_P",109, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // F_FUNC_CALL_CASE_P ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_FUNC_CALL_CASE_P",109, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // F_OP_ARIT ::= numero F_OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT",107, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // F_OP_ARIT ::= ident F_OP_ARIT_Parent F_OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT",107, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // F_OP_ARIT ::= thisSoli punto ident F_OP_ARIT_Parent F_OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT",107, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // F_OP_ARIT_P ::= F_OP F_OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT_P",103, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // F_OP_ARIT_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT_P",103, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // F_OP_ARIT_Parent ::= punto ident 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT_Parent",110, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // F_OP_ARIT_Parent ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP_ARIT_Parent",110, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // F_OP ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",111, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // F_OP ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",111, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // F_OP ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",111, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // F_OP ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",111, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // F_OP ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",111, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // F_OP ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",111, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // F_OP ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",111, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // F_OP ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",111, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // F_OP ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_OP",111, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // F_BODY_LIT_TF ::= numero_HEX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_BODY_LIT_TF",101, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // F_BODY_LIT_TF ::= stringSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("F_BODY_LIT_TF",101, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // TIPO ::= bool 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // TIPO ::= byteSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // TIPO ::= bytes 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // TIPO ::= string 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // TIPO ::= uint 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // TIPO ::= uint_O 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // TIPO ::= uint_DS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // TIPO ::= uint_TD 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // TIPO ::= uint_SC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // TIPO ::= uint_CVO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // TIPO ::= uint_DCS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // TIPO ::= intSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // TIPO ::= int_O 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // TIPO ::= int_DS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // TIPO ::= int_TD 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // TIPO ::= int_SC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // TIPO ::= int_CVO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // TIPO ::= int_DCS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // TIPO ::= address 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // TIPO ::= address_payable 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // TIPO ::= charss 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // TIPO ::= ufixedSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // TIPO ::= B_I 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // TIPO ::= B_II 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // TIPO ::= B_III 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // TIPO ::= B_IV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // TIPO ::= B_V 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // TIPO ::= B_VI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // TIPO ::= B_VII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // TIPO ::= B_IIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // TIPO ::= B_IX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // TIPO ::= B_X 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // TIPO ::= B_XI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // TIPO ::= B_XII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // TIPO ::= B_XIII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // TIPO ::= B_XIV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // TIPO ::= B_XV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // TIPO ::= B_XVI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // TIPO ::= B_XVII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // TIPO ::= B_XIIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // TIPO ::= B_XIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // TIPO ::= B_XX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // TIPO ::= B_XXI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // TIPO ::= B_XXII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // TIPO ::= B_XXIII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // TIPO ::= B_XXIV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // TIPO ::= B_XXV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // TIPO ::= B_XXVI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // TIPO ::= B_XXVII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // TIPO ::= B_XXIIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // TIPO ::= B_XXIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // TIPO ::= B_XXX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // TIPO ::= B_XXXI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // TIPO ::= B_XXXII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$analisis_sintactico$do_action_part00000000(
                               CUP$analisis_sintactico$act_num,
                               CUP$analisis_sintactico$parser,
                               CUP$analisis_sintactico$stack,
                               CUP$analisis_sintactico$top);
    }
}

}
