
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symb.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\314\000\002\002\004\000\002\002\016\000\002\140" +
    "\010\000\002\140\002\000\002\004\004\000\002\004\003" +
    "\000\002\005\004\000\002\005\003\000\002\006\004\000" +
    "\002\006\003\000\002\007\004\000\002\007\002\000\002" +
    "\014\022\000\002\014\005\000\002\075\006\000\002\075" +
    "\002\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\076\003\000\002\076\002\000\002\077\007\000" +
    "\002\077\002\000\002\100\004\000\002\100\002\000\002" +
    "\073\005\000\002\073\007\000\002\073\004\000\002\073" +
    "\003\000\002\104\003\000\002\104\003\000\002\074\004" +
    "\000\002\074\002\000\002\067\014\000\002\070\010\000" +
    "\002\070\002\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\050\012\000\002\057" +
    "\016\000\002\061\014\000\002\062\013\000\002\063\007" +
    "\000\002\063\002\000\002\064\012\000\002\056\004\000" +
    "\002\056\002\000\002\051\004\000\002\051\010\000\002" +
    "\051\012\000\002\051\016\000\002\051\014\000\002\051" +
    "\003\000\002\051\004\000\002\051\004\000\002\051\004" +
    "\000\002\054\005\000\002\054\003\000\002\103\003\000" +
    "\002\103\003\000\002\103\013\000\002\071\013\000\002" +
    "\072\007\000\002\072\002\000\002\053\005\000\002\055" +
    "\006\000\002\060\005\000\002\102\004\000\002\011\010" +
    "\000\002\011\005\000\002\015\005\000\002\015\002\000" +
    "\002\021\007\000\002\047\003\000\002\047\004\000\002" +
    "\023\004\000\002\017\004\000\002\017\002\000\002\020" +
    "\003\000\002\020\003\000\002\020\002\000\002\026\004" +
    "\000\002\026\004\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\131\004\000\002\131\004\000\002" +
    "\134\004\000\002\105\005\000\002\105\003\000\002\136" +
    "\004\000\002\136\004\000\002\136\004\000\002\136\002" +
    "\000\002\106\005\000\002\120\004\000\002\120\004\000" +
    "\002\120\004\000\002\120\002\000\002\132\004\000\002" +
    "\132\006\000\002\132\003\000\002\133\004\000\002\133" +
    "\003\000\002\027\004\000\002\027\005\000\002\027\007" +
    "\000\002\035\004\000\002\035\002\000\002\135\004\000" +
    "\002\135\002\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\130\003\000" +
    "\002\130\003\000\002\130\003\000\002\130\003\000\002" +
    "\130\003\000\002\130\003\000\002\130\003\000\002\130" +
    "\003\000\002\130\003\000\002\032\004\000\002\032\004" +
    "\000\002\032\004\000\002\036\004\000\002\036\002\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\046\003" +
    "\000\002\046\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u019c\000\004\004\004\001\002\000\004\005\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\006\010\001\002\000\004\161\011\001\002\000" +
    "\004\161\012\001\002\000\004\014\013\001\002\000\004" +
    "\007\014\001\002\000\004\160\015\001\002\000\004\010" +
    "\016\001\002\000\166\011\ufff6\013\074\016\020\017\022" +
    "\020\036\021\104\022\063\023\116\024\111\025\034\026" +
    "\105\027\106\030\027\031\031\032\075\033\065\034\114" +
    "\035\072\036\076\037\110\040\067\110\103\111\055\115" +
    "\062\116\040\117\112\120\070\121\061\122\113\123\046" +
    "\124\053\125\042\126\050\127\101\130\045\131\051\132" +
    "\071\133\032\134\025\135\017\136\057\137\115\140\073" +
    "\141\117\142\120\143\056\144\041\145\047\146\033\147" +
    "\037\150\026\151\030\152\100\153\021\154\035\155\024" +
    "\156\060\157\054\001\002\000\012\041\uff48\043\uff48\044" +
    "\uff48\160\uff48\001\002\000\012\041\uff6b\043\uff6b\044\uff6b" +
    "\160\uff6b\001\002\000\012\041\uff3a\043\uff3a\044\uff3a\160" +
    "\uff3a\001\002\000\012\041\uff6a\043\uff6a\044\uff6a\160\uff6a" +
    "\001\002\000\012\041\125\043\uffb2\044\uffb2\160\uffb2\001" +
    "\002\000\012\041\uff38\043\uff38\044\uff38\160\uff38\001\002" +
    "\000\012\041\uff49\043\uff49\044\uff49\160\uff49\001\002\000" +
    "\012\041\uff3d\043\uff3d\044\uff3d\160\uff3d\001\002\000\012" +
    "\041\uff60\043\uff60\044\uff60\160\uff60\001\002\000\012\041" +
    "\uff3c\043\uff3c\044\uff3c\160\uff3c\001\002\000\012\041\uff5f" +
    "\043\uff5f\044\uff5f\160\uff5f\001\002\000\012\041\uff4a\043" +
    "\uff4a\044\uff4a\160\uff4a\001\002\000\012\041\uff3f\043\uff3f" +
    "\044\uff3f\160\uff3f\001\002\000\012\041\uff63\043\uff63\044" +
    "\uff63\160\uff63\001\002\000\012\041\uff39\043\uff39\044\uff39" +
    "\160\uff39\001\002\000\012\041\uff69\043\uff69\044\uff69\160" +
    "\uff69\001\002\000\012\041\uff3e\043\uff3e\044\uff3e\160\uff3e" +
    "\001\002\000\012\041\uff68\043\uff68\044\uff68\160\uff68\001" +
    "\002\000\012\041\uff41\043\uff41\044\uff41\160\uff41\001\002" +
    "\000\012\041\uff50\043\uff50\044\uff50\160\uff50\001\002\000" +
    "\164\011\ufff6\016\020\017\022\020\036\021\104\022\063" +
    "\023\116\024\111\025\034\026\105\027\106\030\027\031" +
    "\031\032\075\033\065\034\114\035\072\036\076\037\110" +
    "\040\067\110\103\111\055\115\062\116\040\117\112\120" +
    "\070\121\061\122\113\123\046\124\053\125\042\126\050" +
    "\127\101\130\045\131\051\132\071\133\032\134\025\135" +
    "\017\136\057\137\115\140\073\141\117\142\120\143\056" +
    "\144\041\145\047\146\033\147\037\150\026\151\030\152" +
    "\100\153\021\154\035\155\024\156\060\157\054\001\002" +
    "\000\004\011\ufffa\001\002\000\012\041\uff4d\043\uff4d\044" +
    "\uff4d\160\uff4d\001\002\000\012\041\uff52\043\uff52\044\uff52" +
    "\160\uff52\001\002\000\012\041\uff40\043\uff40\044\uff40\160" +
    "\uff40\001\002\000\012\041\uff4f\043\uff4f\044\uff4f\160\uff4f" +
    "\001\002\000\012\041\uff4c\043\uff4c\044\uff4c\160\uff4c\001" +
    "\002\000\004\011\ufffc\001\002\000\012\041\uff51\043\uff51" +
    "\044\uff51\160\uff51\001\002\000\012\041\uff36\043\uff36\044" +
    "\uff36\160\uff36\001\002\000\006\003\171\160\172\001\002" +
    "\000\012\041\uff42\043\uff42\044\uff42\160\uff42\001\002\000" +
    "\012\041\uff47\043\uff47\044\uff47\160\uff47\001\002\000\012" +
    "\041\uff37\043\uff37\044\uff37\160\uff37\001\002\000\012\041" +
    "\uff54\043\uff54\044\uff54\160\uff54\001\002\000\012\041\uff57" +
    "\043\uff57\044\uff57\160\uff57\001\002\000\012\041\uff66\043" +
    "\uff66\044\uff66\160\uff66\001\002\000\004\011\161\001\002" +
    "\000\012\041\uff5d\043\uff5d\044\uff5d\160\uff5d\001\002\000" +
    "\004\011\ufff8\001\002\000\012\041\uff58\043\uff58\044\uff58" +
    "\160\uff58\001\002\000\012\041\uff55\043\uff55\044\uff55\160" +
    "\uff55\001\002\000\012\041\uff4b\043\uff4b\044\uff4b\160\uff4b" +
    "\001\002\000\012\041\uff5b\043\uff5b\044\uff5b\160\uff5b\001" +
    "\002\000\012\041\uff45\043\uff45\044\uff45\160\uff45\001\002" +
    "\000\006\003\147\160\150\001\002\000\012\041\uff5e\043" +
    "\uff5e\044\uff5e\160\uff5e\001\002\000\012\041\uff5a\043\uff5a" +
    "\044\uff5a\160\uff5a\001\002\000\166\011\ufff6\013\074\016" +
    "\020\017\022\020\036\021\104\022\063\023\116\024\111" +
    "\025\034\026\105\027\106\030\027\031\031\032\075\033" +
    "\065\034\114\035\072\036\076\037\110\040\067\110\103" +
    "\111\055\115\062\116\040\117\112\120\070\121\061\122" +
    "\113\123\046\124\053\125\042\126\050\127\101\130\045" +
    "\131\051\132\071\133\032\134\025\135\017\136\057\137" +
    "\115\140\073\141\117\142\120\143\056\144\041\145\047" +
    "\146\033\147\037\150\026\151\030\152\100\153\021\154" +
    "\035\155\024\156\060\157\054\001\002\000\012\041\uff3b" +
    "\043\uff3b\044\uff3b\160\uff3b\001\002\000\012\041\uff4e\043" +
    "\uff4e\044\uff4e\160\uff4e\001\002\000\006\011\ufff6\111\055" +
    "\001\002\000\004\160\122\001\002\000\012\041\uff67\043" +
    "\uff67\044\uff67\160\uff67\001\002\000\012\041\uff62\043\uff62" +
    "\044\uff62\160\uff62\001\002\000\012\041\uff61\043\uff61\044" +
    "\uff61\160\uff61\001\002\000\010\011\ufff6\110\103\111\055" +
    "\001\002\000\012\041\uff59\043\uff59\044\uff59\160\uff59\001" +
    "\002\000\012\041\uff64\043\uff64\044\uff64\160\uff64\001\002" +
    "\000\012\041\uff56\043\uff56\044\uff56\160\uff56\001\002\000" +
    "\012\041\uff53\043\uff53\044\uff53\160\uff53\001\002\000\012" +
    "\041\uff5c\043\uff5c\044\uff5c\160\uff5c\001\002\000\012\041" +
    "\uff46\043\uff46\044\uff46\160\uff46\001\002\000\012\041\uff65" +
    "\043\uff65\044\uff65\160\uff65\001\002\000\012\041\uff44\043" +
    "\uff44\044\uff44\160\uff44\001\002\000\012\041\uff43\043\uff43" +
    "\044\uff43\160\uff43\001\002\000\004\011\ufff9\001\002\000" +
    "\004\010\123\001\002\000\156\016\020\017\022\020\036" +
    "\021\104\022\063\023\116\024\111\025\034\026\105\027" +
    "\106\030\027\031\031\032\075\033\065\034\114\035\072" +
    "\036\076\037\110\040\067\115\062\116\040\117\112\120" +
    "\070\121\061\122\113\123\046\124\053\125\042\126\050" +
    "\127\101\130\045\131\051\132\071\133\032\134\025\135" +
    "\017\136\057\137\115\140\073\141\117\142\120\143\056" +
    "\144\041\145\047\146\033\147\037\150\026\151\030\152" +
    "\100\153\021\154\035\155\024\156\060\157\054\001\002" +
    "\000\012\041\125\043\uffb2\044\uffb2\160\uffb2\001\002\000" +
    "\004\042\144\001\002\000\010\043\127\044\130\160\uffaf" +
    "\001\002\000\004\160\uffb1\001\002\000\004\160\uffb0\001" +
    "\002\000\004\160\132\001\002\000\004\014\133\001\002" +
    "\000\160\011\uffde\016\020\017\022\020\036\021\104\022" +
    "\063\023\116\024\111\025\034\026\105\027\106\030\027" +
    "\031\031\032\075\033\065\034\114\035\072\036\076\037" +
    "\110\040\067\115\062\116\040\117\112\120\070\121\061" +
    "\122\113\123\046\124\053\125\042\126\050\127\101\130" +
    "\045\131\051\132\071\133\032\134\025\135\017\136\057" +
    "\137\115\140\073\141\117\142\120\143\056\144\041\145" +
    "\047\146\033\147\037\150\026\151\030\152\100\153\021" +
    "\154\035\155\024\156\060\157\054\001\002\000\012\041" +
    "\125\043\uffb2\044\uffb2\160\uffb2\001\002\000\004\011\136" +
    "\001\002\000\010\011\uffe0\110\uffe0\111\uffe0\001\002\000" +
    "\010\043\127\044\130\160\uffaf\001\002\000\004\160\141" +
    "\001\002\000\004\014\142\001\002\000\160\011\uffde\016" +
    "\020\017\022\020\036\021\104\022\063\023\116\024\111" +
    "\025\034\026\105\027\106\030\027\031\031\032\075\033" +
    "\065\034\114\035\072\036\076\037\110\040\067\115\062" +
    "\116\040\117\112\120\070\121\061\122\113\123\046\124" +
    "\053\125\042\126\050\127\101\130\045\131\051\132\071" +
    "\133\032\134\025\135\017\136\057\137\115\140\073\141" +
    "\117\142\120\143\056\144\041\145\047\146\033\147\037" +
    "\150\026\151\030\152\100\153\021\154\035\155\024\156" +
    "\060\157\054\001\002\000\004\011\uffdf\001\002\000\010" +
    "\043\uffb3\044\uffb3\160\uffb3\001\002\000\004\011\ufff7\001" +
    "\002\000\004\011\ufffd\001\002\000\004\011\160\001\002" +
    "\000\004\010\151\001\002\000\004\160\152\001\002\000" +
    "\006\011\uffb8\015\153\001\002\000\004\160\156\001\002" +
    "\000\004\011\155\001\002\000\166\011\uffbb\013\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\110\uffbb" +
    "\111\uffbb\115\uffbb\116\uffbb\117\uffbb\120\uffbb\121\uffbb\122" +
    "\uffbb\123\uffbb\124\uffbb\125\uffbb\126\uffbb\127\uffbb\130\uffbb" +
    "\131\uffbb\132\uffbb\133\uffbb\134\uffbb\135\uffbb\136\uffbb\137" +
    "\uffbb\140\uffbb\141\uffbb\142\uffbb\143\uffbb\144\uffbb\145\uffbb" +
    "\146\uffbb\147\uffbb\150\uffbb\151\uffbb\152\uffbb\153\uffbb\154" +
    "\uffbb\155\uffbb\156\uffbb\157\uffbb\001\002\000\006\011\uffb8" +
    "\015\153\001\002\000\004\011\uffb9\001\002\000\166\011" +
    "\uffba\013\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba" +
    "\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031" +
    "\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba" +
    "\040\uffba\110\uffba\111\uffba\115\uffba\116\uffba\117\uffba\120" +
    "\uffba\121\uffba\122\uffba\123\uffba\124\uffba\125\uffba\126\uffba" +
    "\127\uffba\130\uffba\131\uffba\132\uffba\133\uffba\134\uffba\135" +
    "\uffba\136\uffba\137\uffba\140\uffba\141\uffba\142\uffba\143\uffba" +
    "\144\uffba\145\uffba\146\uffba\147\uffba\150\uffba\151\uffba\152" +
    "\uffba\153\uffba\154\uffba\155\uffba\156\uffba\157\uffba\001\002" +
    "\000\006\002\ufffe\007\163\001\002\000\004\002\000\001" +
    "\002\000\004\160\164\001\002\000\004\010\165\001\002" +
    "\000\166\011\ufff6\013\074\016\020\017\022\020\036\021" +
    "\104\022\063\023\116\024\111\025\034\026\105\027\106" +
    "\030\027\031\031\032\075\033\065\034\114\035\072\036" +
    "\076\037\110\040\067\110\103\111\055\115\062\116\040" +
    "\117\112\120\070\121\061\122\113\123\046\124\053\125" +
    "\042\126\050\127\101\130\045\131\051\132\071\133\032" +
    "\134\025\135\017\136\057\137\115\140\073\141\117\142" +
    "\120\143\056\144\041\145\047\146\033\147\037\150\026" +
    "\151\030\152\100\153\021\154\035\155\024\156\060\157" +
    "\054\001\002\000\004\011\167\001\002\000\006\002\ufffe" +
    "\007\163\001\002\000\004\002\uffff\001\002\000\004\011" +
    "\u0194\001\002\000\004\065\173\001\002\000\156\016\020" +
    "\017\022\020\036\021\104\022\063\023\116\024\111\025" +
    "\034\026\105\027\106\030\027\031\031\032\075\033\065" +
    "\034\114\035\072\036\076\037\110\040\067\115\062\116" +
    "\040\117\112\120\070\121\061\122\113\123\046\124\053" +
    "\125\042\126\050\127\101\130\045\131\051\132\071\133" +
    "\032\134\025\135\017\136\057\137\115\140\073\141\117" +
    "\142\120\143\056\144\041\145\047\146\033\147\037\150" +
    "\026\151\030\152\100\153\021\154\035\155\024\156\060" +
    "\157\054\001\002\000\004\160\175\001\002\000\006\015" +
    "\176\066\ufff2\001\002\000\156\016\020\017\022\020\036" +
    "\021\104\022\063\023\116\024\111\025\034\026\105\027" +
    "\106\030\027\031\031\032\075\033\065\034\114\035\072" +
    "\036\076\037\110\040\067\115\062\116\040\117\112\120" +
    "\070\121\061\122\113\123\046\124\053\125\042\126\050" +
    "\127\101\130\045\131\051\132\071\133\032\134\025\135" +
    "\017\136\057\137\115\140\073\141\117\142\120\143\056" +
    "\144\041\145\047\146\033\147\037\150\026\151\030\152" +
    "\100\153\021\154\035\155\024\156\060\157\054\001\002" +
    "\000\004\066\200\001\002\000\016\010\uffed\043\201\044" +
    "\203\112\205\113\204\114\uffed\001\002\000\006\010\uffef" +
    "\114\uffef\001\002\000\006\010\uffeb\114\207\001\002\000" +
    "\006\010\ufff0\114\ufff0\001\002\000\006\010\uffee\114\uffee" +
    "\001\002\000\006\010\ufff1\114\ufff1\001\002\000\004\010" +
    "\214\001\002\000\004\065\210\001\002\000\156\016\020" +
    "\017\022\020\036\021\104\022\063\023\116\024\111\025" +
    "\034\026\105\027\106\030\027\031\031\032\075\033\065" +
    "\034\114\035\072\036\076\037\110\040\067\115\062\116" +
    "\040\117\112\120\070\121\061\122\113\123\046\124\053" +
    "\125\042\126\050\127\101\130\045\131\051\132\071\133" +
    "\032\134\025\135\017\136\057\137\115\140\073\141\117" +
    "\142\120\143\056\144\041\145\047\146\033\147\037\150" +
    "\026\151\030\152\100\153\021\154\035\155\024\156\060" +
    "\157\054\001\002\000\004\160\212\001\002\000\004\066" +
    "\213\001\002\000\004\010\uffec\001\002\000\206\016\020" +
    "\017\022\020\036\021\104\022\063\023\116\024\111\025" +
    "\034\026\105\027\106\030\027\031\031\032\075\033\065" +
    "\034\114\035\072\036\076\037\110\040\067\046\uffe1\047" +
    "\uffe1\075\uffe1\076\uffe1\077\uffe1\102\uffe1\103\uffe1\104\uffe1" +
    "\115\062\116\040\117\112\120\070\121\061\122\113\123" +
    "\046\124\053\125\042\126\050\127\101\130\045\131\051" +
    "\132\071\133\032\134\025\135\017\136\057\137\115\140" +
    "\073\141\117\142\120\143\056\144\041\145\047\146\033" +
    "\147\037\150\026\151\030\152\100\153\021\154\035\155" +
    "\024\156\060\157\054\160\uffe1\161\uffe1\162\uffe1\163\uffe1" +
    "\001\002\000\206\016\020\017\022\020\036\021\104\022" +
    "\063\023\116\024\111\025\034\026\105\027\106\030\027" +
    "\031\031\032\075\033\065\034\114\035\072\036\076\037" +
    "\110\040\067\046\uffe1\047\uffe1\075\uffe1\076\uffe1\077\uffe1" +
    "\102\uffe1\103\uffe1\104\uffe1\115\062\116\040\117\112\120" +
    "\070\121\061\122\113\123\046\124\053\125\042\126\050" +
    "\127\101\130\045\131\051\132\071\133\032\134\025\135" +
    "\017\136\057\137\115\140\073\141\117\142\120\143\056" +
    "\144\041\145\047\146\033\147\037\150\026\151\030\152" +
    "\100\153\021\154\035\155\024\156\060\157\054\160\uffe1" +
    "\161\uffe1\162\uffe1\163\uffe1\001\002\000\032\046\220\047" +
    "\235\075\237\076\234\077\uffe9\102\233\103\243\104\217" +
    "\160\232\161\224\162\225\163\226\001\002\000\004\065" +
    "\u0183\001\002\000\032\014\uff77\050\300\051\301\052\303" +
    "\053\277\054\275\055\276\056\273\057\304\060\302\066" +
    "\uff77\107\uff77\001\002\000\032\046\uffdd\047\uffdd\075\uffdd" +
    "\076\uffdd\077\uffdd\102\uffdd\103\uffdd\104\uffdd\160\uffdd\161" +
    "\uffdd\162\uffdd\163\uffdd\001\002\000\004\077\u017e\001\002" +
    "\000\032\046\220\047\235\075\237\076\234\077\uffe9\102" +
    "\233\103\243\104\217\160\232\161\224\162\225\163\226" +
    "\001\002\000\034\014\uff92\061\376\062\370\063\365\064" +
    "\374\065\375\066\377\067\367\070\366\071\364\072\371" +
    "\073\372\107\uff92\001\002\000\010\014\uff6d\066\uff6d\107" +
    "\uff6d\001\002\000\010\014\uff6c\066\uff6c\107\uff6c\001\002" +
    "\000\004\014\u017b\001\002\000\010\014\uffab\066\uffab\107" +
    "\uffab\001\002\000\010\014\uffaa\066\uffaa\107\uffaa\001\002" +
    "\000\056\014\uffa1\045\u016a\050\300\051\301\052\303\053" +
    "\277\054\275\055\276\056\273\057\304\060\302\061\337" +
    "\062\327\063\332\064\323\065\336\067\324\070\335\071" +
    "\325\072\321\073\331\074\u0169\001\002\000\004\065\u015e" +
    "\001\002\000\004\065\u0157\001\002\000\032\014\uff77\050" +
    "\300\051\301\052\303\053\277\054\275\055\276\056\273" +
    "\057\304\060\302\066\uff77\107\uff77\001\002\000\010\014" +
    "\uffac\066\uffac\107\uffac\001\002\000\004\074\u014c\001\002" +
    "\000\032\046\uffdb\047\uffdb\075\uffdb\076\uffdb\077\uffdb\102" +
    "\uffdb\103\uffdb\104\uffdb\160\uffdb\161\uffdb\162\uffdb\163\uffdb" +
    "\001\002\000\032\046\uffdc\047\uffdc\075\uffdc\076\uffdc\077" +
    "\uffdc\102\uffdc\103\uffdc\104\uffdc\160\uffdc\161\uffdc\162\uffdc" +
    "\163\uffdc\001\002\000\032\046\uffe5\047\uffe5\075\uffe5\076" +
    "\uffe5\077\uffe5\102\uffe5\103\uffe5\104\uffe5\160\uffe5\161\uffe5" +
    "\162\uffe5\163\uffe5\001\002\000\004\010\245\001\002\000" +
    "\032\046\uffda\047\uffda\075\uffda\076\uffda\077\uffda\102\uffda" +
    "\103\uffda\104\uffda\160\uffda\161\uffda\162\uffda\163\uffda\001" +
    "\002\000\024\075\246\076\253\077\260\100\254\101\247" +
    "\102\257\103\251\104\255\160\252\001\002\000\004\074" +
    "\u0147\001\002\000\004\014\u0146\001\002\000\026\011\uffcb" +
    "\075\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb\102\uffcb\103" +
    "\uffcb\104\uffcb\160\uffcb\001\002\000\004\010\u013d\001\002" +
    "\000\010\045\u012b\065\u012c\074\u0127\001\002\000\004\065" +
    "\u0120\001\002\000\004\014\u011f\001\002\000\004\065\u0112" +
    "\001\002\000\026\011\uffd1\075\246\076\253\077\260\100" +
    "\254\101\247\102\257\103\251\104\255\160\252\001\002" +
    "\000\004\065\262\001\002\000\004\014\261\001\002\000" +
    "\026\011\uffca\075\uffca\076\uffca\077\uffca\100\uffca\101\uffca" +
    "\102\uffca\103\uffca\104\uffca\160\uffca\001\002\000\004\160" +
    "\263\001\002\000\004\045\u0109\001\002\000\004\014\265" +
    "\001\002\000\010\046\271\047\266\160\270\001\002\000" +
    "\032\014\uff77\050\300\051\301\052\303\053\277\054\275" +
    "\055\276\056\273\057\304\060\302\066\uff77\107\uff77\001" +
    "\002\000\004\014\307\001\002\000\032\014\uff77\050\300" +
    "\051\301\052\303\053\277\054\275\055\276\056\273\057" +
    "\304\060\302\066\uff77\107\uff77\001\002\000\032\014\uff77" +
    "\050\300\051\301\052\303\053\277\054\275\055\276\056" +
    "\273\057\304\060\302\066\uff77\107\uff77\001\002\000\010" +
    "\014\uff7b\066\uff7b\107\uff7b\001\002\000\010\046\uff70\047" +
    "\uff70\160\uff70\001\002\000\010\046\271\047\266\160\270" +
    "\001\002\000\010\046\uff72\047\uff72\160\uff72\001\002\000" +
    "\010\046\uff71\047\uff71\160\uff71\001\002\000\010\046\uff73" +
    "\047\uff73\160\uff73\001\002\000\010\046\uff76\047\uff76\160" +
    "\uff76\001\002\000\010\046\uff75\047\uff75\160\uff75\001\002" +
    "\000\010\046\uff6e\047\uff6e\160\uff6e\001\002\000\010\046" +
    "\uff74\047\uff74\160\uff74\001\002\000\010\046\uff6f\047\uff6f" +
    "\160\uff6f\001\002\000\010\014\uff78\066\uff78\107\uff78\001" +
    "\002\000\010\014\uff79\066\uff79\107\uff79\001\002\000\020" +
    "\046\220\047\235\075\237\160\310\161\224\162\225\163" +
    "\226\001\002\000\060\014\uffa1\050\300\051\301\052\303" +
    "\053\277\054\275\055\276\056\273\057\304\060\302\061" +
    "\337\062\327\063\332\064\323\065\336\066\uffa1\067\324" +
    "\070\335\071\325\072\321\073\331\074\330\107\uffa1\001" +
    "\002\000\004\066\312\001\002\000\004\010\313\001\002" +
    "\000\024\075\246\076\253\077\260\100\254\101\247\102" +
    "\257\103\251\104\255\160\252\001\002\000\026\011\uffd1" +
    "\075\246\076\253\077\260\100\254\101\247\102\257\103" +
    "\251\104\255\160\252\001\002\000\026\011\uffd1\075\246" +
    "\076\253\077\260\100\254\101\247\102\257\103\251\104" +
    "\255\160\252\001\002\000\004\011\317\001\002\000\026" +
    "\011\uffcd\075\uffcd\076\uffcd\077\uffcd\100\uffcd\101\uffcd\102" +
    "\uffcd\103\uffcd\104\uffcd\160\uffcd\001\002\000\004\011\uffd2" +
    "\001\002\000\010\075\uff7d\160\uff7d\161\uff7d\001\002\000" +
    "\010\046\271\047\266\160\270\001\002\000\010\075\uff81" +
    "\160\uff81\161\uff81\001\002\000\010\075\uff80\160\uff80\161" +
    "\uff80\001\002\000\010\075\uff7e\160\uff7e\161\uff7e\001\002" +
    "\000\010\075\355\160\357\161\356\001\002\000\010\075" +
    "\uff83\160\uff83\161\uff83\001\002\000\004\160\353\001\002" +
    "\000\010\075\uff7c\160\uff7c\161\uff7c\001\002\000\010\075" +
    "\uff82\160\uff82\161\uff82\001\002\000\010\014\uffae\066\uffae" +
    "\107\uffae\001\002\000\010\014\uffa5\066\uffa5\107\uffa5\001" +
    "\002\000\010\075\uff7f\160\uff7f\161\uff7f\001\002\000\010" +
    "\066\343\075\340\160\342\001\002\000\010\075\uff84\160" +
    "\uff84\161\uff84\001\002\000\004\074\350\001\002\000\010" +
    "\014\uffa4\066\uffa4\107\uffa4\001\002\000\006\015\344\066" +
    "\345\001\002\000\010\014\uff99\066\uff99\107\uff99\001\002" +
    "\000\010\066\343\075\340\160\342\001\002\000\010\014" +
    "\uff97\066\uff97\107\uff97\001\002\000\010\014\uff9b\066\uff9b" +
    "\107\uff9b\001\002\000\010\014\uff98\066\uff98\107\uff98\001" +
    "\002\000\004\160\351\001\002\000\006\015\344\066\345" +
    "\001\002\000\010\014\uff9a\066\uff9a\107\uff9a\001\002\000" +
    "\056\014\uffa1\050\300\051\301\052\303\053\277\054\275" +
    "\055\276\056\273\057\304\060\302\061\337\062\327\063" +
    "\332\064\323\065\336\066\uffa1\067\324\070\335\071\325" +
    "\072\321\073\331\107\uffa1\001\002\000\010\014\uffa6\066" +
    "\uffa6\107\uffa6\001\002\000\004\074\u0103\001\002\000\034" +
    "\014\uff92\061\376\062\370\063\365\064\374\065\375\066" +
    "\377\067\367\070\366\071\364\072\371\073\372\107\uff92" +
    "\001\002\000\036\014\uff90\061\uff90\062\uff90\063\uff90\064" +
    "\uff90\065\uff90\066\uff90\067\uff90\070\uff90\071\uff90\072\uff90" +
    "\073\uff90\074\361\107\uff90\001\002\000\010\014\uffa3\066" +
    "\uffa3\107\uffa3\001\002\000\004\160\u0101\001\002\000\034" +
    "\014\uff92\061\376\062\370\063\365\064\374\065\375\066" +
    "\377\067\367\070\366\071\364\072\371\073\372\107\uff92" +
    "\001\002\000\010\075\355\160\357\161\356\001\002\000" +
    "\010\075\uff87\160\uff87\161\uff87\001\002\000\010\075\uff8d" +
    "\160\uff8d\161\uff8d\001\002\000\010\075\uff88\160\uff88\161" +
    "\uff88\001\002\000\010\075\uff89\160\uff89\161\uff89\001\002" +
    "\000\010\075\uff8e\160\uff8e\161\uff8e\001\002\000\010\075" +
    "\uff86\160\uff86\161\uff86\001\002\000\010\075\uff85\160\uff85" +
    "\161\uff85\001\002\000\010\014\uff95\066\uff95\107\uff95\001" +
    "\002\000\010\075\uff8c\160\uff8c\161\uff8c\001\002\000\010" +
    "\075\uff8b\160\uff8b\161\uff8b\001\002\000\010\075\uff8f\160" +
    "\uff8f\161\uff8f\001\002\000\010\075\uff8a\160\uff8a\161\uff8a" +
    "\001\002\000\010\014\uff93\066\uff93\107\uff93\001\002\000" +
    "\034\014\uff91\061\uff91\062\uff91\063\uff91\064\uff91\065\uff91" +
    "\066\uff91\067\uff91\070\uff91\071\uff91\072\uff91\073\uff91\107" +
    "\uff91\001\002\000\010\014\uff96\066\uff96\107\uff96\001\002" +
    "\000\004\160\u0104\001\002\000\036\014\uff90\061\uff90\062" +
    "\uff90\063\uff90\064\uff90\065\uff90\066\uff90\067\uff90\070\uff90" +
    "\071\uff90\072\uff90\073\uff90\074\361\107\uff90\001\002\000" +
    "\034\014\uff92\061\376\062\370\063\365\064\374\065\375" +
    "\066\377\067\367\070\366\071\364\072\371\073\372\107" +
    "\uff92\001\002\000\010\014\uff94\066\uff94\107\uff94\001\002" +
    "\000\010\014\uffa2\066\uffa2\107\uffa2\001\002\000\010\014" +
    "\uff7a\066\uff7a\107\uff7a\001\002\000\020\046\220\047\235" +
    "\075\237\160\310\161\224\162\225\163\226\001\002\000" +
    "\004\014\uffbd\001\002\000\004\011\u010c\001\002\000\004" +
    "\076\u010d\001\002\000\004\065\u010e\001\002\000\010\046" +
    "\271\047\266\160\270\001\002\000\004\066\u0110\001\002" +
    "\000\004\014\u0111\001\002\000\032\046\uffd7\047\uffd7\075" +
    "\uffd7\076\uffd7\077\uffd7\102\uffd7\103\uffd7\104\uffd7\160\uffd7" +
    "\161\uffd7\162\uffd7\163\uffd7\001\002\000\010\046\271\047" +
    "\266\160\270\001\002\000\004\066\u0114\001\002\000\004" +
    "\010\u0115\001\002\000\024\075\246\076\253\077\260\100" +
    "\254\101\247\102\257\103\251\104\255\160\252\001\002" +
    "\000\026\011\uffd1\075\246\076\253\077\260\100\254\101" +
    "\247\102\257\103\251\104\255\160\252\001\002\000\004" +
    "\011\u0118\001\002\000\030\011\uffc0\075\uffc0\076\uffc0\077" +
    "\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0\105\u011a" +
    "\160\uffc0\001\002\000\026\011\uffc2\075\uffc2\076\uffc2\077" +
    "\uffc2\100\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\160\uffc2" +
    "\001\002\000\004\010\u011b\001\002\000\024\075\246\076" +
    "\253\077\260\100\254\101\247\102\257\103\251\104\255" +
    "\160\252\001\002\000\026\011\uffd1\075\246\076\253\077" +
    "\260\100\254\101\247\102\257\103\251\104\255\160\252" +
    "\001\002\000\004\011\u011e\001\002\000\026\011\uffc1\075" +
    "\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1" +
    "\104\uffc1\160\uffc1\001\002\000\026\011\uffc9\075\uffc9\076" +
    "\uffc9\077\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9" +
    "\160\uffc9\001\002\000\010\046\271\047\266\160\270\001" +
    "\002\000\004\066\u0122\001\002\000\004\010\u0123\001\002" +
    "\000\024\075\246\076\253\077\260\100\254\101\247\102" +
    "\257\103\251\104\255\160\252\001\002\000\026\011\uffd1" +
    "\075\246\076\253\077\260\100\254\101\247\102\257\103" +
    "\251\104\255\160\252\001\002\000\004\011\u0126\001\002" +
    "\000\026\011\uffce\075\uffce\076\uffce\077\uffce\100\uffce\101" +
    "\uffce\102\uffce\103\uffce\104\uffce\160\uffce\001\002\000\004" +
    "\160\u013b\001\002\000\026\011\uffd0\075\uffd0\076\uffd0\077" +
    "\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0\160\uffd0" +
    "\001\002\000\026\011\uffc4\075\uffc4\076\uffc4\077\uffc4\100" +
    "\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\160\uffc4\001\002" +
    "\000\026\011\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101" +
    "\uffc6\102\uffc6\103\uffc6\104\uffc6\160\uffc6\001\002\000\022" +
    "\046\220\047\235\065\u0132\075\237\160\310\161\224\162" +
    "\225\163\226\001\002\000\002\001\002\000\026\011\uffc5" +
    "\075\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5\103" +
    "\uffc5\104\uffc5\160\uffc5\001\002\000\004\066\u012f\001\002" +
    "\000\004\014\u0130\001\002\000\026\011\uffbe\075\uffbe\076" +
    "\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe\104\uffbe" +
    "\160\uffbe\001\002\000\004\014\u013a\001\002\000\010\046" +
    "\271\047\266\160\270\001\002\000\004\066\u0134\001\002" +
    "\000\004\106\u0135\001\002\000\020\046\220\047\235\075" +
    "\237\160\310\161\224\162\225\163\226\001\002\000\004" +
    "\107\u0137\001\002\000\020\046\220\047\235\075\237\160" +
    "\310\161\224\162\225\163\226\001\002\000\004\014\u0139" +
    "\001\002\000\026\011\uffc3\075\uffc3\076\uffc3\077\uffc3\100" +
    "\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3\160\uffc3\001\002" +
    "\000\026\011\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf\101" +
    "\uffbf\102\uffbf\103\uffbf\104\uffbf\160\uffbf\001\002\000\006" +
    "\045\u012b\065\u012c\001\002\000\026\011\uffc7\075\uffc7\076" +
    "\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7" +
    "\160\uffc7\001\002\000\024\075\246\076\253\077\260\100" +
    "\254\101\247\102\257\103\251\104\255\160\252\001\002" +
    "\000\026\011\uffd1\075\246\076\253\077\260\100\254\101" +
    "\247\102\257\103\251\104\255\160\252\001\002\000\004" +
    "\011\u0140\001\002\000\004\076\u0141\001\002\000\004\065" +
    "\u0142\001\002\000\010\046\271\047\266\160\270\001\002" +
    "\000\004\066\u0144\001\002\000\004\014\u0145\001\002\000" +
    "\026\011\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc" +
    "\102\uffcc\103\uffcc\104\uffcc\160\uffcc\001\002\000\026\011" +
    "\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\101\uffc8\102\uffc8" +
    "\103\uffc8\104\uffc8\160\uffc8\001\002\000\004\160\u0148\001" +
    "\002\000\004\045\u0149\001\002\000\020\046\220\047\235" +
    "\075\237\160\310\161\224\162\225\163\226\001\002\000" +
    "\004\014\u014b\001\002\000\026\011\uffcf\075\uffcf\076\uffcf" +
    "\077\uffcf\100\uffcf\101\uffcf\102\uffcf\103\uffcf\104\uffcf\160" +
    "\uffcf\001\002\000\004\160\u014e\001\002\000\010\014\uffad" +
    "\066\uffad\107\uffad\001\002\000\056\014\uff9c\050\300\051" +
    "\301\052\303\053\277\054\275\055\276\056\273\057\304" +
    "\060\302\061\337\062\327\063\332\064\323\065\u0152\066" +
    "\uff9c\067\324\070\335\071\325\072\321\073\331\107\uff9c" +
    "\001\002\000\010\046\271\047\266\160\270\001\002\000" +
    "\010\075\355\160\357\161\356\001\002\000\010\014\uffa0" +
    "\066\uffa0\107\uffa0\001\002\000\010\066\343\075\340\160" +
    "\342\001\002\000\010\014\uff9f\066\uff9f\107\uff9f\001\002" +
    "\000\010\014\uff9e\066\uff9e\107\uff9e\001\002\000\010\014" +
    "\uff9d\066\uff9d\107\uff9d\001\002\000\010\014\uffa8\066\uffa8" +
    "\107\uffa8\001\002\000\010\046\271\047\266\160\270\001" +
    "\002\000\004\066\u0159\001\002\000\004\010\u015a\001\002" +
    "\000\024\075\246\076\253\077\260\100\254\101\247\102" +
    "\257\103\251\104\255\160\252\001\002\000\026\011\uffd1" +
    "\075\246\076\253\077\260\100\254\101\247\102\257\103" +
    "\251\104\255\160\252\001\002\000\004\011\u015d\001\002" +
    "\000\032\046\uffd9\047\uffd9\075\uffd9\076\uffd9\077\uffd9\102" +
    "\uffd9\103\uffd9\104\uffd9\160\uffd9\161\uffd9\162\uffd9\163\uffd9" +
    "\001\002\000\004\160\263\001\002\000\004\014\u0160\001" +
    "\002\000\010\046\271\047\266\160\270\001\002\000\004" +
    "\014\u0162\001\002\000\020\046\220\047\235\075\237\160" +
    "\310\161\224\162\225\163\226\001\002\000\004\066\u0164" +
    "\001\002\000\004\010\u0165\001\002\000\024\075\246\076" +
    "\253\077\260\100\254\101\247\102\257\103\251\104\255" +
    "\160\252\001\002\000\026\011\uffd1\075\246\076\253\077" +
    "\260\100\254\101\247\102\257\103\251\104\255\160\252" +
    "\001\002\000\004\011\u0168\001\002\000\032\046\uffd8\047" +
    "\uffd8\075\uffd8\076\uffd8\077\uffd8\102\uffd8\103\uffd8\104\uffd8" +
    "\160\uffd8\161\uffd8\162\uffd8\163\uffd8\001\002\000\004\160" +
    "\u0178\001\002\000\022\046\220\047\235\065\u016f\075\237" +
    "\160\310\161\224\162\225\163\226\001\002\000\032\046" +
    "\uffe3\047\uffe3\075\uffe3\076\uffe3\077\uffe3\102\uffe3\103\uffe3" +
    "\104\uffe3\160\uffe3\161\uffe3\162\uffe3\163\uffe3\001\002\000" +
    "\032\046\uffe4\047\uffe4\075\uffe4\076\uffe4\077\uffe4\102\uffe4" +
    "\103\uffe4\104\uffe4\160\uffe4\161\uffe4\162\uffe4\163\uffe4\001" +
    "\002\000\032\046\uffe8\047\uffe8\075\uffe8\076\uffe8\077\uffe8" +
    "\102\uffe8\103\uffe8\104\uffe8\160\uffe8\161\uffe8\162\uffe8\163" +
    "\uffe8\001\002\000\004\014\u0177\001\002\000\010\046\271" +
    "\047\266\160\270\001\002\000\004\066\u0171\001\002\000" +
    "\004\106\u0172\001\002\000\020\046\220\047\235\075\237" +
    "\160\310\161\224\162\225\163\226\001\002\000\004\107" +
    "\u0174\001\002\000\020\046\220\047\235\075\237\160\310" +
    "\161\224\162\225\163\226\001\002\000\004\014\u0176\001" +
    "\002\000\032\046\uffd3\047\uffd3\075\uffd3\076\uffd3\077\uffd3" +
    "\102\uffd3\103\uffd3\104\uffd3\160\uffd3\161\uffd3\162\uffd3\163" +
    "\uffd3\001\002\000\032\046\uffbc\047\uffbc\075\uffbc\076\uffbc" +
    "\077\uffbc\102\uffbc\103\uffbc\104\uffbc\160\uffbc\161\uffbc\162" +
    "\uffbc\163\uffbc\001\002\000\054\014\uffa1\045\u0179\050\300" +
    "\051\301\052\303\053\277\054\275\055\276\056\273\057" +
    "\304\060\302\061\337\062\327\063\332\064\323\065\336" +
    "\067\324\070\335\071\325\072\321\073\331\001\002\000" +
    "\022\046\220\047\235\065\u016f\075\237\160\310\161\224" +
    "\162\225\163\226\001\002\000\032\046\uffe7\047\uffe7\075" +
    "\uffe7\076\uffe7\077\uffe7\102\uffe7\103\uffe7\104\uffe7\160\uffe7" +
    "\161\uffe7\162\uffe7\163\uffe7\001\002\000\032\046\uffe6\047" +
    "\uffe6\075\uffe6\076\uffe6\077\uffe6\102\uffe6\103\uffe6\104\uffe6" +
    "\160\uffe6\161\uffe6\162\uffe6\163\uffe6\001\002\000\010\014" +
    "\uffa7\066\uffa7\107\uffa7\001\002\000\004\077\uffea\001\002" +
    "\000\020\046\220\047\235\075\237\160\310\161\224\162" +
    "\225\163\226\001\002\000\004\014\u0180\001\002\000\004" +
    "\011\u0181\001\002\000\006\011\ufff5\111\ufff5\001\002\000" +
    "\010\014\uffa9\066\uffa9\107\uffa9\001\002\000\010\046\271" +
    "\047\266\160\270\001\002\000\004\066\u0185\001\002\000" +
    "\004\010\u0186\001\002\000\024\075\246\076\253\077\260" +
    "\100\254\101\247\102\257\103\251\104\255\160\252\001" +
    "\002\000\026\011\uffd1\075\246\076\253\077\260\100\254" +
    "\101\247\102\257\103\251\104\255\160\252\001\002\000" +
    "\004\011\u0189\001\002\000\034\046\uffd4\047\uffd4\075\uffd4" +
    "\076\uffd4\077\uffd4\102\uffd4\103\uffd4\104\uffd4\105\u018a\160" +
    "\uffd4\161\uffd4\162\uffd4\163\uffd4\001\002\000\004\010\u018c" +
    "\001\002\000\032\046\uffd6\047\uffd6\075\uffd6\076\uffd6\077" +
    "\uffd6\102\uffd6\103\uffd6\104\uffd6\160\uffd6\161\uffd6\162\uffd6" +
    "\163\uffd6\001\002\000\024\075\246\076\253\077\260\100" +
    "\254\101\247\102\257\103\251\104\255\160\252\001\002" +
    "\000\026\011\uffd1\075\246\076\253\077\260\100\254\101" +
    "\247\102\257\103\251\104\255\160\252\001\002\000\004" +
    "\011\u018f\001\002\000\032\046\uffd5\047\uffd5\075\uffd5\076" +
    "\uffd5\077\uffd5\102\uffd5\103\uffd5\104\uffd5\160\uffd5\161\uffd5" +
    "\162\uffd5\163\uffd5\001\002\000\032\046\uffe2\047\uffe2\075" +
    "\uffe2\076\uffe2\077\uffe2\102\uffe2\103\uffe2\104\uffe2\160\uffe2" +
    "\161\uffe2\162\uffe2\163\uffe2\001\002\000\004\160\u0192\001" +
    "\002\000\006\015\176\066\ufff2\001\002\000\004\066\ufff3" +
    "\001\002\000\006\011\ufff4\111\ufff4\001\002\000\004\011" +
    "\ufffb\001\002\000\010\043\127\044\130\160\uffaf\001\002" +
    "\000\004\160\u0198\001\002\000\006\014\u019b\045\u0199\001" +
    "\002\000\020\046\220\047\235\075\237\160\310\161\224" +
    "\162\225\163\226\001\002\000\214\011\uffb7\016\uffb7\017" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034" +
    "\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\046\uffb7\047\uffb7" +
    "\075\uffb7\076\uffb7\077\uffb7\102\uffb7\103\uffb7\104\uffb7\110" +
    "\uffb7\111\uffb7\115\uffb7\116\uffb7\117\uffb7\120\uffb7\121\uffb7" +
    "\122\uffb7\123\uffb7\124\uffb7\125\uffb7\126\uffb7\127\uffb7\130" +
    "\uffb7\131\uffb7\132\uffb7\133\uffb7\134\uffb7\135\uffb7\136\uffb7" +
    "\137\uffb7\140\uffb7\141\uffb7\142\uffb7\143\uffb7\144\uffb7\145" +
    "\uffb7\146\uffb7\147\uffb7\150\uffb7\151\uffb7\152\uffb7\153\uffb7" +
    "\154\uffb7\155\uffb7\156\uffb7\157\uffb7\160\uffb7\161\uffb7\162" +
    "\uffb7\163\uffb7\001\002\000\214\011\uffb6\016\uffb6\017\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\036\uffb6\037\uffb6\040\uffb6\046\uffb6\047\uffb6\075" +
    "\uffb6\076\uffb6\077\uffb6\102\uffb6\103\uffb6\104\uffb6\110\uffb6" +
    "\111\uffb6\115\uffb6\116\uffb6\117\uffb6\120\uffb6\121\uffb6\122" +
    "\uffb6\123\uffb6\124\uffb6\125\uffb6\126\uffb6\127\uffb6\130\uffb6" +
    "\131\uffb6\132\uffb6\133\uffb6\134\uffb6\135\uffb6\136\uffb6\137" +
    "\uffb6\140\uffb6\141\uffb6\142\uffb6\143\uffb6\144\uffb6\145\uffb6" +
    "\146\uffb6\147\uffb6\150\uffb6\151\uffb6\152\uffb6\153\uffb6\154" +
    "\uffb6\155\uffb6\156\uffb6\157\uffb6\160\uffb6\161\uffb6\162\uffb6" +
    "\163\uffb6\001\002\000\004\014\u019d\001\002\000\214\011" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5" +
    "\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032" +
    "\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5" +
    "\046\uffb5\047\uffb5\075\uffb5\076\uffb5\077\uffb5\102\uffb5\103" +
    "\uffb5\104\uffb5\110\uffb5\111\uffb5\115\uffb5\116\uffb5\117\uffb5" +
    "\120\uffb5\121\uffb5\122\uffb5\123\uffb5\124\uffb5\125\uffb5\126" +
    "\uffb5\127\uffb5\130\uffb5\131\uffb5\132\uffb5\133\uffb5\134\uffb5" +
    "\135\uffb5\136\uffb5\137\uffb5\140\uffb5\141\uffb5\142\uffb5\143" +
    "\uffb5\144\uffb5\145\uffb5\146\uffb5\147\uffb5\150\uffb5\151\uffb5" +
    "\152\uffb5\153\uffb5\154\uffb5\155\uffb5\156\uffb5\157\uffb5\160" +
    "\uffb5\161\uffb5\162\uffb5\163\uffb5\001\002\000\004\014\uffb4" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u019c\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\063" +
    "\005\051\006\043\007\065\011\076\014\101\016\022\021" +
    "\042\067\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\u0195\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\u0194" +
    "\006\043\007\065\014\101\016\022\021\042\067\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\145\005\051\006\043" +
    "\007\065\011\076\014\101\016\022\021\042\067\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\144" +
    "\014\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\120\007\065" +
    "\014\101\067\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\123\001\001\000\004\017\125\001\001\000\002\001" +
    "\001\000\004\020\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\133\070\134\001\001\000\004\017\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\133\070\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\140" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\165\005\051\006\043\007\065\011" +
    "\076\014\101\016\022\021\042\067\106\001\001\000\002" +
    "\001\001\000\004\140\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\173\001\001" +
    "\000\002\001\001\000\004\075\176\001\001\000\004\016" +
    "\u0190\001\001\000\002\001\001\000\004\076\201\001\001" +
    "\000\002\001\001\000\004\077\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\022" +
    "\021\214\074\215\001\001\000\010\016\022\021\214\074" +
    "\u018f\001\001\000\030\013\241\026\226\046\235\050\220" +
    "\057\240\061\237\062\243\073\222\100\221\131\230\134" +
    "\227\001\001\000\002\001\001\000\006\034\273\036\u0181" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\013" +
    "\241\026\226\046\235\050\220\057\240\061\237\062\243" +
    "\073\222\100\u017c\131\230\134\227\001\001\000\006\031" +
    "\362\035\u017b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\034\321\105\332\130\325\136\333\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\273\036\u0155\001" +
    "\001\000\002\001\001\000\004\106\u014c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\051\255\071\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\053\u012c\054\u0127\055\u0128\103\u0129" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\051\314\056\u010a\071\247\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\263\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\266\001\001\000\006\034\273\036\u0107\001\001\000" +
    "\002\001\001\000\006\034\273\036\305\001\001\000\006" +
    "\034\273\036\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\304\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\026\310\046" +
    "\235\131\230\134\227\001\001\000\012\034\321\105\332" +
    "\130\325\136\333\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\051\313\071\247\001\001\000\010\051\314" +
    "\056\315\071\247\001\001\000\010\051\314\056\317\071" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\u0106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\357\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\132\340\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\133\345\001\001\000\002\001\001\000\004\132\346\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\133\351\001\001\000\002\001" +
    "\001\000\010\034\321\130\325\136\353\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\362\035\u0101\001" +
    "\001\000\004\135\361\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\362\035\372\001\001\000\004\027" +
    "\377\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\135\u0104\001\001\000\006\031\362\035" +
    "\u0105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\026\u0109\046\235\131\230\134\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\u010e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\u0112" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\051" +
    "\u0115\071\247\001\001\000\010\051\314\056\u0116\071\247" +
    "\001\001\000\002\001\001\000\004\072\u0118\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\051\u011b\071\247" +
    "\001\001\000\010\051\314\056\u011c\071\247\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\u0120\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\051\u0123\071\247\001\001\000\010\051\314\056\u0124" +
    "\071\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\026\u0130\046\235\131\230\134\227\001" +
    "\001\000\004\041\u012d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\u0132\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\026\u0135\046\235\131\230\134\227\001" +
    "\001\000\002\001\001\000\012\026\u0137\046\235\131\230" +
    "\134\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\053\u012c\055\u0128\103\u013b\001\001" +
    "\000\002\001\001\000\006\051\u013d\071\247\001\001\000" +
    "\010\051\314\056\u013e\071\247\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\u0142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\026\u0149\046\235\131\230\134\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\034\u014e\120\u0150\130\u014f\001\001\000\004" +
    "\032\u0154\001\001\000\004\027\u0153\001\001\000\002\001" +
    "\001\000\004\132\u0152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\u0157\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\051\u015a\071\247\001\001\000\010\051\314\056\u015b\071" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\u015e\001\001\000\002\001\001\000\004\032\u0160\001" +
    "\001\000\002\001\001\000\012\026\u0162\046\235\131\230" +
    "\134\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\051\u0165\071\247\001\001\000\010\051\314\056\u0166" +
    "\071\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\026\u016d\046\235\064\u016a\102\u016b" +
    "\104\u016c\131\230\134\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\u016f\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\026\u0172\046\235\131\230\134\227\001\001\000\002" +
    "\001\001\000\012\026\u0174\046\235\131\230\134\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\034\321\130\325\136\353\001\001\000\020\026" +
    "\u016d\046\235\064\u016a\102\u016b\104\u0179\131\230\134\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\026\u017e\046\235\131\230" +
    "\134\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\u0183\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\051\u0186\071" +
    "\247\001\001\000\010\051\314\056\u0187\071\247\001\001" +
    "\000\002\001\001\000\004\063\u018a\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\051\u018c\071\247\001\001" +
    "\000\010\051\314\056\u018d\071\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\075\u0192\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\u0196\001\001\000\002" +
    "\001\001\000\006\023\u019b\047\u0199\001\001\000\012\026" +
    "\u019d\046\235\131\230\134\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static LinkedList<TError> TablaES = new LinkedList<TError>(); 

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.left;
        int columna = s.right;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.left;
        int columna = s.right;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
     
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico$actions {



  private final analisis_sintactico parser;

  /** Constructor */
  CUP$analisis_sintactico$actions(analisis_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action_part00000000(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico$parser.done_parsing();
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= pragma solidity techo numero numero punto_coma contract ident O_Parent_L BODY_CONTRACT C_Parent_L INICIO_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO_S ::= contract ident O_Parent_L BODY_CONTRACT C_Parent_L INICIO_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_S",94, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_S",94, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BODY_CONTRACT ::= EN BODY_CONTRACT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BODY_CONTRACT ::= BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BODY_CONTRACT_P ::= VAR_CONTRACT BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BODY_CONTRACT_P ::= BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BODY_CONTRACT_PP ::= STRUCTURE BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BODY_CONTRACT_PP ::= BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BODY_CONTRACT_PPP ::= FUNC BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BODY_CONTRACT_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNC ::= functionSoli ident O_Parent_R TIPO ident FUNC_PARAM C_Parent_R FUNC_MOD FUNC_RETURNS O_Parent_L CUERPO_ASSIGN CUERPO_M returnSoli EXP punto_coma C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-15)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNC ::= functionSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNC_PARAM ::= coma TIPO ident FUNC_PARAM 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNC_PARAM ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNC_MOD ::= payableSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNC_MOD ::= privateSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNC_MOD ::= publicSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNC_MOD ::= internalSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNC_MOD ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNC_RETURNS ::= returns O_Parent_R TIPO ident C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_RETURNS",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNC_RETURNS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_RETURNS",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO_M ::= CUERPO CUERPO_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO_M ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPO ::= ident igual CUERPO_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPO ::= ident punto ident igual CUERPO_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CUERPO ::= EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPO ::= STRU 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPO_P ::= ASSIGN_NOT_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_P",66, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPO_P ::= STRU_IF_LINE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_P",66, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPO_ASSIGN ::= VAR_CONTRACT CUERPO_ASSIGN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN",58, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUERPO_ASSIGN ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN",58, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // STRUCTURE ::= structSoli ident O_Parent_L TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // STRUCTURE_VAR ::= TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // STRUCTURE_VAR ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // STRU ::= STRU_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // STRU ::= STRU_FOR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // STRU ::= STRU_DO_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // STRU ::= STRU_IF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // STRU_WHILE ::= whileSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_WHILE",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // STRU_FOR ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_FOR",45, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STRU_DO_WHILE ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_DO_WHILE",47, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STRU_IF ::= ifSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L STRU_ELSE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF",48, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STRU_ELSE ::= elseSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STRU_ELSE ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // STRU_IF_LINE ::= O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP punto_punto EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_LINE",50, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BODY_SENT_M ::= BODY_SENT BODY_SENT_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BODY_SENT_M ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BODY_SENT ::= ident BODY_SENT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BODY_SENT ::= thisSoli punto ident igual EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BODY_SENT ::= whileSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BODY_SENT ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BODY_SENT ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BODY_SENT ::= STRU_IF_ELSE_IN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BODY_SENT ::= returnSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BODY_SENT ::= breakSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BODY_SENT ::= continueSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BODY_SENT_P ::= punto ident BODY_SENT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BODY_SENT_P ::= BODY_SENT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BODY_SENT_PP ::= BODY_ASSIGN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BODY_SENT_PP ::= BODY_FUN_CALL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BODY_SENT_PP ::= igual O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP punto_punto EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // STRU_IF_ELSE_IN ::= ifSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L STRU_ELSE_IN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_ELSE_IN",55, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // STRU_ELSE_IN ::= elseSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // STRU_ELSE_IN ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BODY_ASSIGN ::= igual EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_ASSIGN",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BODY_FUN_CALL ::= O_Parent_R FUNC_CALL_PARAMS C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_FUN_CALL",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FOR_VAR ::= ident igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FOR_VAR",46, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ASSIGN_NOT_VAR ::= EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ASSIGN_NOT_VAR",64, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EN ::= enumSoli ident O_Parent_L ident EN_IDENT C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EN ::= enumSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EN_IDENT ::= coma ident EN_IDENT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EN_IDENT ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VAR_CONTRACT ::= TIPO VAR_ARR VAR_ACCESS ident VAR_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VAR_CONTRACT_P ::= punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VAR_CONTRACT_P ::= VAR_CONTRACT_C punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VAR_CONTRACT_C ::= igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_C",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VAR_ARR ::= O_Parent_C C_Parent_C 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VAR_ARR ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VAR_ACCESS ::= publicSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VAR_ACCESS ::= privateSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VAR_ACCESS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= ident EXP_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= thisSoli EXP_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= BODY_LIT_TF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= ARIT_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= BOOL_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // BOOL_GATE ::= trueSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BOOL_GATE",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // BOOL_GATE ::= falseSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BOOL_GATE",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ARIT_GATE ::= numero OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARIT_GATE",90, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP_P ::= punto ident EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P",67, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP_P ::= EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P",67, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP_P_S ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP_P_S ::= OP_EXCL OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP_P_S ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP_P_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP_PP ::= punto ident EXP_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PP",68, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP_PPP ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP_PPP ::= OP_EXCL OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP_PPP ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FUNC_CALL_CASE ::= ident FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FUNC_CALL_CASE ::= thisSoli punto ident FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FUNC_CALL_CASE ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FUNC_CALL_CASE_P ::= coma FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE_P",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FUNC_CALL_CASE_P ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE_P",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OP_ARIT ::= numero OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OP_ARIT ::= ident OP_ARIT_Parent OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OP_ARIT ::= thisSoli punto ident OP_ARIT_Parent OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OP_ARIT_P ::= OP OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OP_ARIT_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OP_ARIT_Parent ::= punto ident 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_Parent",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OP_ARIT_Parent ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_Parent",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OP ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OP ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OP ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OP ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OP ::= O_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OP ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OP ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OP ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OP ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OP ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OP ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OP_EXCL ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OP_EXCL ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OP_EXCL ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OP_EXCL ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OP_EXCL ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OP_EXCL ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OP_EXCL ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OP_EXCL ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OP_EXCL ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OP_BOOL ::= trueSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OP_BOOL ::= falseSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OP_BOOL ::= ident OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OP_BOOL_P ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OP_BOOL_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OP_OP_BOOL ::= igual_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OP_OP_BOOL ::= mayor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OP_OP_BOOL ::= mayor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OP_OP_BOOL ::= menor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OP_OP_BOOL ::= menor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OP_OP_BOOL ::= diferente 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OP_OP_BOOL ::= op_or 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OP_OP_BOOL ::= op_and 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OP_OP_BOOL ::= negacion 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // BODY_LIT_TF ::= numero_HEX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // BODY_LIT_TF ::= stringSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // TIPO ::= bool 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // TIPO ::= byteSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // TIPO ::= bytes 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // TIPO ::= string 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // TIPO ::= uint 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // TIPO ::= uint_O 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TIPO ::= uint_DS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TIPO ::= uint_TD 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // TIPO ::= uint_SC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // TIPO ::= uint_CVO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // TIPO ::= uint_DCS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // TIPO ::= intSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // TIPO ::= int_O 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // TIPO ::= int_DS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // TIPO ::= int_TD 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // TIPO ::= int_SC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // TIPO ::= int_CVO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // TIPO ::= int_DCS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // TIPO ::= address 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // TIPO ::= address_payable 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // TIPO ::= charss 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // TIPO ::= ufixedSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // TIPO ::= B_I 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // TIPO ::= B_II 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // TIPO ::= B_III 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // TIPO ::= B_IV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // TIPO ::= B_V 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // TIPO ::= B_VI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // TIPO ::= B_VII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // TIPO ::= B_IIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // TIPO ::= B_IX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // TIPO ::= B_X 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // TIPO ::= B_XI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // TIPO ::= B_XII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // TIPO ::= B_XIII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // TIPO ::= B_XIV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // TIPO ::= B_XV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // TIPO ::= B_XVI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // TIPO ::= B_XVII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // TIPO ::= B_XIIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // TIPO ::= B_XIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // TIPO ::= B_XX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // TIPO ::= B_XXI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // TIPO ::= B_XXII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // TIPO ::= B_XXIII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // TIPO ::= B_XXIV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // TIPO ::= B_XXV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // TIPO ::= B_XXVI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // TIPO ::= B_XXVII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // TIPO ::= B_XXIIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // TIPO ::= B_XXIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // TIPO ::= B_XXX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // TIPO ::= B_XXXI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // TIPO ::= B_XXXII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$analisis_sintactico$do_action_part00000000(
                               CUP$analisis_sintactico$act_num,
                               CUP$analisis_sintactico$parser,
                               CUP$analisis_sintactico$stack,
                               CUP$analisis_sintactico$top);
    }
}

}
