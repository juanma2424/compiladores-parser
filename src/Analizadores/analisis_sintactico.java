
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symb.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\247\000\002\002\004\000\002\002\010\000\002\002" +
    "\002\000\002\004\004\000\002\004\003\000\002\005\004" +
    "\000\002\005\003\000\002\006\004\000\002\006\003\000" +
    "\002\007\004\000\002\007\002\000\002\014\022\000\002" +
    "\075\006\000\002\075\002\000\002\076\003\000\002\076" +
    "\003\000\002\076\003\000\002\076\003\000\002\076\002" +
    "\000\002\077\007\000\002\077\002\000\002\100\004\000" +
    "\002\100\002\000\002\073\005\000\002\073\007\000\002" +
    "\073\004\000\002\073\003\000\002\104\003\000\002\104" +
    "\003\000\002\074\004\000\002\074\002\000\002\067\014" +
    "\000\002\070\010\000\002\070\002\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\050\012\000\002\057\016\000\002\061\014\000\002\062" +
    "\013\000\002\063\007\000\002\063\002\000\002\064\012" +
    "\000\002\056\004\000\002\056\002\000\002\051\004\000" +
    "\002\051\010\000\002\051\012\000\002\051\016\000\002" +
    "\051\014\000\002\051\003\000\002\051\004\000\002\051" +
    "\004\000\002\051\004\000\002\054\005\000\002\054\003" +
    "\000\002\103\003\000\002\103\003\000\002\103\013\000" +
    "\002\071\013\000\002\072\007\000\002\072\002\000\002" +
    "\053\005\000\002\055\006\000\002\060\005\000\002\102" +
    "\004\000\002\011\010\000\002\015\005\000\002\015\002" +
    "\000\002\021\007\000\002\047\003\000\002\047\004\000" +
    "\002\023\004\000\002\017\004\000\002\017\002\000\002" +
    "\020\003\000\002\020\003\000\002\020\002\000\002\026" +
    "\004\000\002\026\004\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\131\004\000\002\131\004\000" +
    "\002\134\004\000\002\105\005\000\002\105\003\000\002" +
    "\136\004\000\002\136\004\000\002\136\004\000\002\136" +
    "\002\000\002\106\005\000\002\120\004\000\002\120\004" +
    "\000\002\120\004\000\002\120\002\000\002\132\004\000" +
    "\002\132\006\000\002\132\003\000\002\133\004\000\002" +
    "\133\003\000\002\027\004\000\002\027\005\000\002\027" +
    "\007\000\002\035\004\000\002\035\002\000\002\135\004" +
    "\000\002\135\002\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\130\003" +
    "\000\002\130\003\000\002\130\003\000\002\130\003\000" +
    "\002\130\003\000\002\130\003\000\002\130\003\000\002" +
    "\130\003\000\002\130\003\000\002\032\004\000\002\032" +
    "\004\000\002\032\004\000\002\036\004\000\002\036\002" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\046" +
    "\003\000\002\046\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016a\000\006\002\uffff\007\004\001\002\000\004\117" +
    "\007\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\004\010\010\001\002\000\062\011\ufff7\013" +
    "\037\016\027\017\046\020\031\021\026\022\023\023\024" +
    "\024\014\025\043\026\011\027\012\030\013\031\047\032" +
    "\044\033\036\034\022\035\032\036\033\037\015\040\045" +
    "\110\034\111\050\116\016\001\002\000\012\041\uff65\043" +
    "\uff65\044\uff65\117\uff65\001\002\000\012\041\uff64\043\uff64" +
    "\044\uff64\117\uff64\001\002\000\012\041\uff63\043\uff63\044" +
    "\uff63\117\uff63\001\002\000\012\041\uff67\043\uff67\044\uff67" +
    "\117\uff67\001\002\000\012\041\uff5c\043\uff5c\044\uff5c\117" +
    "\uff5c\001\002\000\012\041\uff6b\043\uff6b\044\uff6b\117\uff6b" +
    "\001\002\000\004\011\ufff9\001\002\000\004\011\ufffb\001" +
    "\002\000\004\011\ufffd\001\002\000\012\041\uff5f\043\uff5f" +
    "\044\uff5f\117\uff5f\001\002\000\012\041\uff69\043\uff69\044" +
    "\uff69\117\uff69\001\002\000\012\041\uff68\043\uff68\044\uff68" +
    "\117\uff68\001\002\000\012\041\u0153\043\uffb5\044\uffb5\117" +
    "\uffb5\001\002\000\012\041\uff6a\043\uff6a\044\uff6a\117\uff6a" +
    "\001\002\000\012\041\uff6e\043\uff6e\044\uff6e\117\uff6e\001" +
    "\002\000\006\011\ufff7\111\050\001\002\000\012\041\uff6c" +
    "\043\uff6c\044\uff6c\117\uff6c\001\002\000\012\041\uff5e\043" +
    "\uff5e\044\uff5e\117\uff5e\001\002\000\012\041\uff5d\043\uff5d" +
    "\044\uff5d\117\uff5d\001\002\000\004\117\u0150\001\002\000" +
    "\010\011\ufff7\110\034\111\050\001\002\000\012\041\uff60" +
    "\043\uff60\044\uff60\117\uff60\001\002\000\004\117\u0147\001" +
    "\002\000\004\011\u0145\001\002\000\060\011\ufff7\016\027" +
    "\017\046\020\031\021\026\022\023\023\024\024\014\025" +
    "\043\026\011\027\012\030\013\031\047\032\044\033\036" +
    "\034\022\035\032\036\033\037\015\040\045\110\034\111" +
    "\050\116\016\001\002\000\062\011\ufff7\013\037\016\027" +
    "\017\046\020\031\021\026\022\023\023\024\024\014\025" +
    "\043\026\011\027\012\030\013\031\047\032\044\033\036" +
    "\034\022\035\032\036\033\037\015\040\045\110\034\111" +
    "\050\116\016\001\002\000\012\041\uff66\043\uff66\044\uff66" +
    "\117\uff66\001\002\000\012\041\uff61\043\uff61\044\uff61\117" +
    "\uff61\001\002\000\012\041\uff5b\043\uff5b\044\uff5b\117\uff5b" +
    "\001\002\000\012\041\uff6d\043\uff6d\044\uff6d\117\uff6d\001" +
    "\002\000\012\041\uff62\043\uff62\044\uff62\117\uff62\001\002" +
    "\000\004\117\051\001\002\000\004\065\052\001\002\000" +
    "\052\016\027\017\046\020\031\021\026\022\023\023\024" +
    "\024\014\025\043\026\011\027\012\030\013\031\047\032" +
    "\044\033\036\034\022\035\032\036\033\037\015\040\045" +
    "\116\016\001\002\000\004\117\054\001\002\000\006\015" +
    "\055\066\ufff4\001\002\000\052\016\027\017\046\020\031" +
    "\021\026\022\023\023\024\024\014\025\043\026\011\027" +
    "\012\030\013\031\047\032\044\033\036\034\022\035\032" +
    "\036\033\037\015\040\045\116\016\001\002\000\004\066" +
    "\057\001\002\000\016\010\uffef\043\060\044\062\112\064" +
    "\113\063\114\uffef\001\002\000\006\010\ufff1\114\ufff1\001" +
    "\002\000\006\010\uffed\114\066\001\002\000\006\010\ufff2" +
    "\114\ufff2\001\002\000\006\010\ufff0\114\ufff0\001\002\000" +
    "\006\010\ufff3\114\ufff3\001\002\000\004\010\073\001\002" +
    "\000\004\065\067\001\002\000\052\016\027\017\046\020" +
    "\031\021\026\022\023\023\024\024\014\025\043\026\011" +
    "\027\012\030\013\031\047\032\044\033\036\034\022\035" +
    "\032\036\033\037\015\040\045\116\016\001\002\000\004" +
    "\117\071\001\002\000\004\066\072\001\002\000\004\010" +
    "\uffee\001\002\000\102\016\027\017\046\020\031\021\026" +
    "\022\023\023\024\024\014\025\043\026\011\027\012\030" +
    "\013\031\047\032\044\033\036\034\022\035\032\036\033" +
    "\037\015\040\045\046\uffe3\047\uffe3\075\uffe3\076\uffe3\077" +
    "\uffe3\102\uffe3\103\uffe3\104\uffe3\116\016\117\uffe3\120\uffe3" +
    "\121\uffe3\122\uffe3\001\002\000\032\046\101\047\115\075" +
    "\117\076\114\077\uffeb\102\113\103\124\104\100\117\112" +
    "\120\105\121\106\122\077\001\002\000\102\016\027\017" +
    "\046\020\031\021\026\022\023\023\024\024\014\025\043" +
    "\026\011\027\012\030\013\031\047\032\044\033\036\034" +
    "\022\035\032\036\033\037\015\040\045\046\uffe3\047\uffe3" +
    "\075\uffe3\076\uffe3\077\uffe3\102\uffe3\103\uffe3\104\uffe3\116" +
    "\016\117\uffe3\120\uffe3\121\uffe3\122\uffe3\001\002\000\032" +
    "\046\uffe4\047\uffe4\075\uffe4\076\uffe4\077\uffe4\102\uffe4\103" +
    "\uffe4\104\uffe4\117\uffe4\120\uffe4\121\uffe4\122\uffe4\001\002" +
    "\000\010\014\uff6f\066\uff6f\107\uff6f\001\002\000\004\065" +
    "\u0133\001\002\000\032\014\uff7a\050\160\051\161\052\163" +
    "\053\157\054\155\055\156\056\153\057\164\060\162\066" +
    "\uff7a\107\uff7a\001\002\000\032\046\uffdf\047\uffdf\075\uffdf" +
    "\076\uffdf\077\uffdf\102\uffdf\103\uffdf\104\uffdf\117\uffdf\120" +
    "\uffdf\121\uffdf\122\uffdf\001\002\000\004\077\u012e\001\002" +
    "\000\032\046\101\047\115\075\117\076\114\077\uffeb\102" +
    "\113\103\124\104\100\117\112\120\105\121\106\122\077" +
    "\001\002\000\034\014\uff95\061\256\062\250\063\245\064" +
    "\254\065\255\066\257\067\247\070\246\071\244\072\251" +
    "\073\252\107\uff95\001\002\000\010\014\uff70\066\uff70\107" +
    "\uff70\001\002\000\004\014\u012b\001\002\000\010\014\uffae" +
    "\066\uffae\107\uffae\001\002\000\010\014\uffad\066\uffad\107" +
    "\uffad\001\002\000\056\014\uffa4\045\u011a\050\160\051\161" +
    "\052\163\053\157\054\155\055\156\056\153\057\164\060" +
    "\162\061\217\062\207\063\212\064\204\065\216\067\203" +
    "\070\215\071\205\072\201\073\211\074\u0119\001\002\000" +
    "\004\065\u010e\001\002\000\004\065\u0107\001\002\000\032" +
    "\014\uff7a\050\160\051\161\052\163\053\157\054\155\055" +
    "\156\056\153\057\164\060\162\066\uff7a\107\uff7a\001\002" +
    "\000\010\014\uffaf\066\uffaf\107\uffaf\001\002\000\004\074" +
    "\374\001\002\000\032\046\uffdd\047\uffdd\075\uffdd\076\uffdd" +
    "\077\uffdd\102\uffdd\103\uffdd\104\uffdd\117\uffdd\120\uffdd\121" +
    "\uffdd\122\uffdd\001\002\000\032\046\uffde\047\uffde\075\uffde" +
    "\076\uffde\077\uffde\102\uffde\103\uffde\104\uffde\117\uffde\120" +
    "\uffde\121\uffde\122\uffde\001\002\000\032\046\uffe7\047\uffe7" +
    "\075\uffe7\076\uffe7\077\uffe7\102\uffe7\103\uffe7\104\uffe7\117" +
    "\uffe7\120\uffe7\121\uffe7\122\uffe7\001\002\000\032\046\uffdc" +
    "\047\uffdc\075\uffdc\076\uffdc\077\uffdc\102\uffdc\103\uffdc\104" +
    "\uffdc\117\uffdc\120\uffdc\121\uffdc\122\uffdc\001\002\000\004" +
    "\010\125\001\002\000\024\075\126\076\133\077\140\100" +
    "\134\101\127\102\137\103\131\104\135\117\132\001\002" +
    "\000\004\074\367\001\002\000\004\014\366\001\002\000" +
    "\026\011\uffcd\075\uffcd\076\uffcd\077\uffcd\100\uffcd\101\uffcd" +
    "\102\uffcd\103\uffcd\104\uffcd\117\uffcd\001\002\000\004\010" +
    "\355\001\002\000\010\045\333\065\334\074\327\001\002" +
    "\000\004\065\320\001\002\000\004\014\317\001\002\000" +
    "\004\065\302\001\002\000\026\011\uffd3\075\126\076\133" +
    "\077\140\100\134\101\127\102\137\103\131\104\135\117" +
    "\132\001\002\000\004\065\142\001\002\000\004\014\141" +
    "\001\002\000\026\011\uffcc\075\uffcc\076\uffcc\077\uffcc\100" +
    "\uffcc\101\uffcc\102\uffcc\103\uffcc\104\uffcc\117\uffcc\001\002" +
    "\000\004\117\143\001\002\000\004\045\271\001\002\000" +
    "\004\014\145\001\002\000\010\046\151\047\146\117\150" +
    "\001\002\000\032\014\uff7a\050\160\051\161\052\163\053" +
    "\157\054\155\055\156\056\153\057\164\060\162\066\uff7a" +
    "\107\uff7a\001\002\000\004\014\167\001\002\000\032\014" +
    "\uff7a\050\160\051\161\052\163\053\157\054\155\055\156" +
    "\056\153\057\164\060\162\066\uff7a\107\uff7a\001\002\000" +
    "\032\014\uff7a\050\160\051\161\052\163\053\157\054\155" +
    "\055\156\056\153\057\164\060\162\066\uff7a\107\uff7a\001" +
    "\002\000\010\014\uff7e\066\uff7e\107\uff7e\001\002\000\010" +
    "\046\uff73\047\uff73\117\uff73\001\002\000\010\046\151\047" +
    "\146\117\150\001\002\000\010\046\uff75\047\uff75\117\uff75" +
    "\001\002\000\010\046\uff74\047\uff74\117\uff74\001\002\000" +
    "\010\046\uff76\047\uff76\117\uff76\001\002\000\010\046\uff79" +
    "\047\uff79\117\uff79\001\002\000\010\046\uff78\047\uff78\117" +
    "\uff78\001\002\000\010\046\uff71\047\uff71\117\uff71\001\002" +
    "\000\010\046\uff77\047\uff77\117\uff77\001\002\000\010\046" +
    "\uff72\047\uff72\117\uff72\001\002\000\010\014\uff7b\066\uff7b" +
    "\107\uff7b\001\002\000\010\014\uff7c\066\uff7c\107\uff7c\001" +
    "\002\000\020\046\101\047\115\075\117\117\170\120\105" +
    "\121\106\122\077\001\002\000\060\014\uffa4\050\160\051" +
    "\161\052\163\053\157\054\155\055\156\056\153\057\164" +
    "\060\162\061\217\062\207\063\212\064\204\065\216\066" +
    "\uffa4\067\203\070\215\071\205\072\201\073\211\074\210" +
    "\107\uffa4\001\002\000\004\066\172\001\002\000\004\010" +
    "\173\001\002\000\024\075\126\076\133\077\140\100\134" +
    "\101\127\102\137\103\131\104\135\117\132\001\002\000" +
    "\026\011\uffd3\075\126\076\133\077\140\100\134\101\127" +
    "\102\137\103\131\104\135\117\132\001\002\000\026\011" +
    "\uffd3\075\126\076\133\077\140\100\134\101\127\102\137" +
    "\103\131\104\135\117\132\001\002\000\004\011\177\001" +
    "\002\000\026\011\uffcf\075\uffcf\076\uffcf\077\uffcf\100\uffcf" +
    "\101\uffcf\102\uffcf\103\uffcf\104\uffcf\117\uffcf\001\002\000" +
    "\004\011\uffd4\001\002\000\010\075\uff80\117\uff80\120\uff80" +
    "\001\002\000\010\046\151\047\146\117\150\001\002\000" +
    "\010\075\uff83\117\uff83\120\uff83\001\002\000\010\075\uff84" +
    "\117\uff84\120\uff84\001\002\000\010\075\uff81\117\uff81\120" +
    "\uff81\001\002\000\010\075\235\117\237\120\236\001\002" +
    "\000\010\075\uff86\117\uff86\120\uff86\001\002\000\004\117" +
    "\233\001\002\000\010\075\uff7f\117\uff7f\120\uff7f\001\002" +
    "\000\010\075\uff85\117\uff85\120\uff85\001\002\000\010\014" +
    "\uffb1\066\uffb1\107\uffb1\001\002\000\010\014\uffa8\066\uffa8" +
    "\107\uffa8\001\002\000\010\075\uff82\117\uff82\120\uff82\001" +
    "\002\000\010\066\223\075\220\117\222\001\002\000\010" +
    "\075\uff87\117\uff87\120\uff87\001\002\000\004\074\230\001" +
    "\002\000\010\014\uffa7\066\uffa7\107\uffa7\001\002\000\006" +
    "\015\224\066\225\001\002\000\010\014\uff9c\066\uff9c\107" +
    "\uff9c\001\002\000\010\066\223\075\220\117\222\001\002" +
    "\000\010\014\uff9a\066\uff9a\107\uff9a\001\002\000\010\014" +
    "\uff9e\066\uff9e\107\uff9e\001\002\000\010\014\uff9b\066\uff9b" +
    "\107\uff9b\001\002\000\004\117\231\001\002\000\006\015" +
    "\224\066\225\001\002\000\010\014\uff9d\066\uff9d\107\uff9d" +
    "\001\002\000\056\014\uffa4\050\160\051\161\052\163\053" +
    "\157\054\155\055\156\056\153\057\164\060\162\061\217" +
    "\062\207\063\212\064\204\065\216\066\uffa4\067\203\070" +
    "\215\071\205\072\201\073\211\107\uffa4\001\002\000\010" +
    "\014\uffa9\066\uffa9\107\uffa9\001\002\000\004\074\263\001" +
    "\002\000\034\014\uff95\061\256\062\250\063\245\064\254" +
    "\065\255\066\257\067\247\070\246\071\244\072\251\073" +
    "\252\107\uff95\001\002\000\036\014\uff93\061\uff93\062\uff93" +
    "\063\uff93\064\uff93\065\uff93\066\uff93\067\uff93\070\uff93\071" +
    "\uff93\072\uff93\073\uff93\074\241\107\uff93\001\002\000\010" +
    "\014\uffa6\066\uffa6\107\uffa6\001\002\000\004\117\261\001" +
    "\002\000\034\014\uff95\061\256\062\250\063\245\064\254" +
    "\065\255\066\257\067\247\070\246\071\244\072\251\073" +
    "\252\107\uff95\001\002\000\010\075\235\117\237\120\236" +
    "\001\002\000\010\075\uff8a\117\uff8a\120\uff8a\001\002\000" +
    "\010\075\uff90\117\uff90\120\uff90\001\002\000\010\075\uff8b" +
    "\117\uff8b\120\uff8b\001\002\000\010\075\uff8c\117\uff8c\120" +
    "\uff8c\001\002\000\010\075\uff91\117\uff91\120\uff91\001\002" +
    "\000\010\075\uff89\117\uff89\120\uff89\001\002\000\010\075" +
    "\uff88\117\uff88\120\uff88\001\002\000\010\014\uff98\066\uff98" +
    "\107\uff98\001\002\000\010\075\uff8f\117\uff8f\120\uff8f\001" +
    "\002\000\010\075\uff8e\117\uff8e\120\uff8e\001\002\000\010" +
    "\075\uff92\117\uff92\120\uff92\001\002\000\010\075\uff8d\117" +
    "\uff8d\120\uff8d\001\002\000\010\014\uff96\066\uff96\107\uff96" +
    "\001\002\000\034\014\uff94\061\uff94\062\uff94\063\uff94\064" +
    "\uff94\065\uff94\066\uff94\067\uff94\070\uff94\071\uff94\072\uff94" +
    "\073\uff94\107\uff94\001\002\000\010\014\uff99\066\uff99\107" +
    "\uff99\001\002\000\004\117\264\001\002\000\036\014\uff93" +
    "\061\uff93\062\uff93\063\uff93\064\uff93\065\uff93\066\uff93\067" +
    "\uff93\070\uff93\071\uff93\072\uff93\073\uff93\074\241\107\uff93" +
    "\001\002\000\034\014\uff95\061\256\062\250\063\245\064" +
    "\254\065\255\066\257\067\247\070\246\071\244\072\251" +
    "\073\252\107\uff95\001\002\000\010\014\uff97\066\uff97\107" +
    "\uff97\001\002\000\010\014\uffa5\066\uffa5\107\uffa5\001\002" +
    "\000\010\014\uff7d\066\uff7d\107\uff7d\001\002\000\020\046" +
    "\101\047\115\075\117\117\170\120\105\121\106\122\077" +
    "\001\002\000\004\014\uffbf\001\002\000\004\011\274\001" +
    "\002\000\004\076\275\001\002\000\004\065\276\001\002" +
    "\000\010\046\151\047\146\117\150\001\002\000\004\066" +
    "\300\001\002\000\004\014\301\001\002\000\032\046\uffd9" +
    "\047\uffd9\075\uffd9\076\uffd9\077\uffd9\102\uffd9\103\uffd9\104" +
    "\uffd9\117\uffd9\120\uffd9\121\uffd9\122\uffd9\001\002\000\010" +
    "\046\151\047\146\117\150\001\002\000\004\066\304\001" +
    "\002\000\004\010\305\001\002\000\024\075\126\076\133" +
    "\077\140\100\134\101\127\102\137\103\131\104\135\117" +
    "\132\001\002\000\026\011\uffd3\075\126\076\133\077\140" +
    "\100\134\101\127\102\137\103\131\104\135\117\132\001" +
    "\002\000\004\011\310\001\002\000\030\011\uffc2\075\uffc2" +
    "\076\uffc2\077\uffc2\100\uffc2\101\uffc2\102\uffc2\103\uffc2\104" +
    "\uffc2\105\312\117\uffc2\001\002\000\026\011\uffc4\075\uffc4" +
    "\076\uffc4\077\uffc4\100\uffc4\101\uffc4\102\uffc4\103\uffc4\104" +
    "\uffc4\117\uffc4\001\002\000\004\010\313\001\002\000\024" +
    "\075\126\076\133\077\140\100\134\101\127\102\137\103" +
    "\131\104\135\117\132\001\002\000\026\011\uffd3\075\126" +
    "\076\133\077\140\100\134\101\127\102\137\103\131\104" +
    "\135\117\132\001\002\000\004\011\316\001\002\000\026" +
    "\011\uffc3\075\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\102" +
    "\uffc3\103\uffc3\104\uffc3\117\uffc3\001\002\000\026\011\uffcb" +
    "\075\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb\102\uffcb\103" +
    "\uffcb\104\uffcb\117\uffcb\001\002\000\010\046\151\047\146" +
    "\117\150\001\002\000\004\066\322\001\002\000\004\010" +
    "\323\001\002\000\024\075\126\076\133\077\140\100\134" +
    "\101\127\102\137\103\131\104\135\117\132\001\002\000" +
    "\026\011\uffd3\075\126\076\133\077\140\100\134\101\127" +
    "\102\137\103\131\104\135\117\132\001\002\000\004\011" +
    "\326\001\002\000\026\011\uffd0\075\uffd0\076\uffd0\077\uffd0" +
    "\100\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0\117\uffd0\001" +
    "\002\000\004\117\353\001\002\000\026\011\uffd2\075\uffd2" +
    "\076\uffd2\077\uffd2\100\uffd2\101\uffd2\102\uffd2\103\uffd2\104" +
    "\uffd2\117\uffd2\001\002\000\026\011\uffc6\075\uffc6\076\uffc6" +
    "\077\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\117" +
    "\uffc6\001\002\000\026\011\uffc8\075\uffc8\076\uffc8\077\uffc8" +
    "\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\117\uffc8\001" +
    "\002\000\022\046\101\047\115\065\342\075\117\117\170" +
    "\120\105\121\106\122\077\001\002\000\002\001\002\000" +
    "\026\011\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7" +
    "\102\uffc7\103\uffc7\104\uffc7\117\uffc7\001\002\000\004\066" +
    "\337\001\002\000\004\014\340\001\002\000\026\011\uffc0" +
    "\075\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0\103" +
    "\uffc0\104\uffc0\117\uffc0\001\002\000\004\014\352\001\002" +
    "\000\010\046\151\047\146\117\150\001\002\000\004\066" +
    "\344\001\002\000\004\106\345\001\002\000\020\046\101" +
    "\047\115\075\117\117\170\120\105\121\106\122\077\001" +
    "\002\000\004\107\347\001\002\000\020\046\101\047\115" +
    "\075\117\117\170\120\105\121\106\122\077\001\002\000" +
    "\004\014\351\001\002\000\026\011\uffc5\075\uffc5\076\uffc5" +
    "\077\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\117" +
    "\uffc5\001\002\000\026\011\uffc1\075\uffc1\076\uffc1\077\uffc1" +
    "\100\uffc1\101\uffc1\102\uffc1\103\uffc1\104\uffc1\117\uffc1\001" +
    "\002\000\006\045\333\065\334\001\002\000\026\011\uffc9" +
    "\075\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9\102\uffc9\103" +
    "\uffc9\104\uffc9\117\uffc9\001\002\000\024\075\126\076\133" +
    "\077\140\100\134\101\127\102\137\103\131\104\135\117" +
    "\132\001\002\000\026\011\uffd3\075\126\076\133\077\140" +
    "\100\134\101\127\102\137\103\131\104\135\117\132\001" +
    "\002\000\004\011\360\001\002\000\004\076\361\001\002" +
    "\000\004\065\362\001\002\000\010\046\151\047\146\117" +
    "\150\001\002\000\004\066\364\001\002\000\004\014\365" +
    "\001\002\000\026\011\uffce\075\uffce\076\uffce\077\uffce\100" +
    "\uffce\101\uffce\102\uffce\103\uffce\104\uffce\117\uffce\001\002" +
    "\000\026\011\uffca\075\uffca\076\uffca\077\uffca\100\uffca\101" +
    "\uffca\102\uffca\103\uffca\104\uffca\117\uffca\001\002\000\004" +
    "\117\370\001\002\000\004\045\371\001\002\000\020\046" +
    "\101\047\115\075\117\117\170\120\105\121\106\122\077" +
    "\001\002\000\004\014\373\001\002\000\026\011\uffd1\075" +
    "\uffd1\076\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1\103\uffd1" +
    "\104\uffd1\117\uffd1\001\002\000\004\117\376\001\002\000" +
    "\010\014\uffb0\066\uffb0\107\uffb0\001\002\000\056\014\uff9f" +
    "\050\160\051\161\052\163\053\157\054\155\055\156\056" +
    "\153\057\164\060\162\061\217\062\207\063\212\064\204" +
    "\065\u0102\066\uff9f\067\203\070\215\071\205\072\201\073" +
    "\211\107\uff9f\001\002\000\010\046\151\047\146\117\150" +
    "\001\002\000\010\075\235\117\237\120\236\001\002\000" +
    "\010\014\uffa3\066\uffa3\107\uffa3\001\002\000\010\066\223" +
    "\075\220\117\222\001\002\000\010\014\uffa2\066\uffa2\107" +
    "\uffa2\001\002\000\010\014\uffa1\066\uffa1\107\uffa1\001\002" +
    "\000\010\014\uffa0\066\uffa0\107\uffa0\001\002\000\010\014" +
    "\uffab\066\uffab\107\uffab\001\002\000\020\046\101\047\115" +
    "\075\117\117\170\120\105\121\106\122\077\001\002\000" +
    "\004\066\u0109\001\002\000\004\010\u010a\001\002\000\024" +
    "\075\126\076\133\077\140\100\134\101\127\102\137\103" +
    "\131\104\135\117\132\001\002\000\026\011\uffd3\075\126" +
    "\076\133\077\140\100\134\101\127\102\137\103\131\104" +
    "\135\117\132\001\002\000\004\011\u010d\001\002\000\032" +
    "\046\uffdb\047\uffdb\075\uffdb\076\uffdb\077\uffdb\102\uffdb\103" +
    "\uffdb\104\uffdb\117\uffdb\120\uffdb\121\uffdb\122\uffdb\001\002" +
    "\000\004\117\143\001\002\000\004\014\u0110\001\002\000" +
    "\010\046\151\047\146\117\150\001\002\000\004\014\u0112" +
    "\001\002\000\020\046\101\047\115\075\117\117\170\120" +
    "\105\121\106\122\077\001\002\000\004\066\u0114\001\002" +
    "\000\004\010\u0115\001\002\000\024\075\126\076\133\077" +
    "\140\100\134\101\127\102\137\103\131\104\135\117\132" +
    "\001\002\000\026\011\uffd3\075\126\076\133\077\140\100" +
    "\134\101\127\102\137\103\131\104\135\117\132\001\002" +
    "\000\004\011\u0118\001\002\000\032\046\uffda\047\uffda\075" +
    "\uffda\076\uffda\077\uffda\102\uffda\103\uffda\104\uffda\117\uffda" +
    "\120\uffda\121\uffda\122\uffda\001\002\000\004\117\u0128\001" +
    "\002\000\022\046\101\047\115\065\u011f\075\117\117\170" +
    "\120\105\121\106\122\077\001\002\000\032\046\uffe5\047" +
    "\uffe5\075\uffe5\076\uffe5\077\uffe5\102\uffe5\103\uffe5\104\uffe5" +
    "\117\uffe5\120\uffe5\121\uffe5\122\uffe5\001\002\000\032\046" +
    "\uffe6\047\uffe6\075\uffe6\076\uffe6\077\uffe6\102\uffe6\103\uffe6" +
    "\104\uffe6\117\uffe6\120\uffe6\121\uffe6\122\uffe6\001\002\000" +
    "\032\046\uffea\047\uffea\075\uffea\076\uffea\077\uffea\102\uffea" +
    "\103\uffea\104\uffea\117\uffea\120\uffea\121\uffea\122\uffea\001" +
    "\002\000\004\014\u0127\001\002\000\010\046\151\047\146" +
    "\117\150\001\002\000\004\066\u0121\001\002\000\004\106" +
    "\u0122\001\002\000\020\046\101\047\115\075\117\117\170" +
    "\120\105\121\106\122\077\001\002\000\004\107\u0124\001" +
    "\002\000\020\046\101\047\115\075\117\117\170\120\105" +
    "\121\106\122\077\001\002\000\004\014\u0126\001\002\000" +
    "\032\046\uffd5\047\uffd5\075\uffd5\076\uffd5\077\uffd5\102\uffd5" +
    "\103\uffd5\104\uffd5\117\uffd5\120\uffd5\121\uffd5\122\uffd5\001" +
    "\002\000\032\046\uffbe\047\uffbe\075\uffbe\076\uffbe\077\uffbe" +
    "\102\uffbe\103\uffbe\104\uffbe\117\uffbe\120\uffbe\121\uffbe\122" +
    "\uffbe\001\002\000\054\014\uffa4\045\u0129\050\160\051\161" +
    "\052\163\053\157\054\155\055\156\056\153\057\164\060" +
    "\162\061\217\062\207\063\212\064\204\065\216\067\203" +
    "\070\215\071\205\072\201\073\211\001\002\000\022\046" +
    "\101\047\115\065\u011f\075\117\117\170\120\105\121\106" +
    "\122\077\001\002\000\032\046\uffe9\047\uffe9\075\uffe9\076" +
    "\uffe9\077\uffe9\102\uffe9\103\uffe9\104\uffe9\117\uffe9\120\uffe9" +
    "\121\uffe9\122\uffe9\001\002\000\032\046\uffe8\047\uffe8\075" +
    "\uffe8\076\uffe8\077\uffe8\102\uffe8\103\uffe8\104\uffe8\117\uffe8" +
    "\120\uffe8\121\uffe8\122\uffe8\001\002\000\010\014\uffaa\066" +
    "\uffaa\107\uffaa\001\002\000\004\077\uffec\001\002\000\020" +
    "\046\101\047\115\075\117\117\170\120\105\121\106\122" +
    "\077\001\002\000\004\014\u0130\001\002\000\004\011\u0131" +
    "\001\002\000\006\011\ufff6\111\ufff6\001\002\000\010\014" +
    "\uffac\066\uffac\107\uffac\001\002\000\010\046\151\047\146" +
    "\117\150\001\002\000\004\066\u0135\001\002\000\004\010" +
    "\u0136\001\002\000\024\075\126\076\133\077\140\100\134" +
    "\101\127\102\137\103\131\104\135\117\132\001\002\000" +
    "\026\011\uffd3\075\126\076\133\077\140\100\134\101\127" +
    "\102\137\103\131\104\135\117\132\001\002\000\004\011" +
    "\u0139\001\002\000\034\046\uffd6\047\uffd6\075\uffd6\076\uffd6" +
    "\077\uffd6\102\uffd6\103\uffd6\104\uffd6\105\u013a\117\uffd6\120" +
    "\uffd6\121\uffd6\122\uffd6\001\002\000\004\010\u013c\001\002" +
    "\000\032\046\uffd8\047\uffd8\075\uffd8\076\uffd8\077\uffd8\102" +
    "\uffd8\103\uffd8\104\uffd8\117\uffd8\120\uffd8\121\uffd8\122\uffd8" +
    "\001\002\000\024\075\126\076\133\077\140\100\134\101" +
    "\127\102\137\103\131\104\135\117\132\001\002\000\026" +
    "\011\uffd3\075\126\076\133\077\140\100\134\101\127\102" +
    "\137\103\131\104\135\117\132\001\002\000\004\011\u013f" +
    "\001\002\000\032\046\uffd7\047\uffd7\075\uffd7\076\uffd7\077" +
    "\uffd7\102\uffd7\103\uffd7\104\uffd7\117\uffd7\120\uffd7\121\uffd7" +
    "\122\uffd7\001\002\000\004\117\u0141\001\002\000\006\015" +
    "\055\066\ufff4\001\002\000\004\066\ufff5\001\002\000\004" +
    "\011\ufffe\001\002\000\004\011\ufffc\001\002\000\006\002" +
    "\uffff\007\004\001\002\000\004\002\000\001\002\000\004" +
    "\010\u0148\001\002\000\004\117\u0149\001\002\000\006\011" +
    "\uffbb\015\u014a\001\002\000\004\117\u014d\001\002\000\004" +
    "\011\u014c\001\002\000\062\011\uffbd\013\uffbd\016\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\110\uffbd\111\uffbd" +
    "\116\uffbd\001\002\000\006\011\uffbb\015\u014a\001\002\000" +
    "\004\011\uffbc\001\002\000\004\011\ufffa\001\002\000\004" +
    "\010\u0151\001\002\000\052\016\027\017\046\020\031\021" +
    "\026\022\023\023\024\024\014\025\043\026\011\027\012" +
    "\030\013\031\047\032\044\033\036\034\022\035\032\036" +
    "\033\037\015\040\045\116\016\001\002\000\012\041\u0153" +
    "\043\uffb5\044\uffb5\117\uffb5\001\002\000\004\042\u0162\001" +
    "\002\000\010\043\u0155\044\u0156\117\uffb2\001\002\000\004" +
    "\117\uffb4\001\002\000\004\117\uffb3\001\002\000\004\117" +
    "\u0158\001\002\000\004\014\u0159\001\002\000\054\011\uffe0" +
    "\016\027\017\046\020\031\021\026\022\023\023\024\024" +
    "\014\025\043\026\011\027\012\030\013\031\047\032\044" +
    "\033\036\034\022\035\032\036\033\037\015\040\045\116" +
    "\016\001\002\000\004\011\u0161\001\002\000\012\041\u0153" +
    "\043\uffb5\044\uffb5\117\uffb5\001\002\000\010\043\u0155\044" +
    "\u0156\117\uffb2\001\002\000\004\117\u015e\001\002\000\004" +
    "\014\u015f\001\002\000\054\011\uffe0\016\027\017\046\020" +
    "\031\021\026\022\023\023\024\024\014\025\043\026\011" +
    "\027\012\030\013\031\047\032\044\033\036\034\022\035" +
    "\032\036\033\037\015\040\045\116\016\001\002\000\004" +
    "\011\uffe1\001\002\000\010\011\uffe2\110\uffe2\111\uffe2\001" +
    "\002\000\010\043\uffb6\044\uffb6\117\uffb6\001\002\000\004" +
    "\011\ufff8\001\002\000\010\043\u0155\044\u0156\117\uffb2\001" +
    "\002\000\004\117\u0166\001\002\000\006\014\u0169\045\u0167" +
    "\001\002\000\020\046\101\047\115\075\117\117\170\120" +
    "\105\121\106\122\077\001\002\000\110\011\uffba\016\uffba" +
    "\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025" +
    "\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\046\uffba\047" +
    "\uffba\075\uffba\076\uffba\077\uffba\102\uffba\103\uffba\104\uffba" +
    "\110\uffba\111\uffba\116\uffba\117\uffba\120\uffba\121\uffba\122" +
    "\uffba\001\002\000\110\011\uffb9\016\uffb9\017\uffb9\020\uffb9" +
    "\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027" +
    "\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\037\uffb9\040\uffb9\046\uffb9\047\uffb9\075\uffb9\076" +
    "\uffb9\077\uffb9\102\uffb9\103\uffb9\104\uffb9\110\uffb9\111\uffb9" +
    "\116\uffb9\117\uffb9\120\uffb9\121\uffb9\122\uffb9\001\002\000" +
    "\004\014\u016b\001\002\000\110\011\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\035\uffb8\036\uffb8\037\uffb8\040\uffb8\046\uffb8\047\uffb8\075" +
    "\uffb8\076\uffb8\077\uffb8\102\uffb8\103\uffb8\104\uffb8\110\uffb8" +
    "\111\uffb8\116\uffb8\117\uffb8\120\uffb8\121\uffb8\122\uffb8\001" +
    "\002\000\004\014\uffb7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016a\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\004\037\005\020\006\017\007\016\011\041\014\027\016" +
    "\024\021\040\067\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\u0163\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\u0162\014\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\u014e\007\016\014\027\067\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\u0143\006\017\007\016\014\027\016\024\021" +
    "\040\067\034\001\001\000\024\004\u0142\005\020\006\017" +
    "\007\016\011\041\014\027\016\024\021\040\067\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\052\001\001\000\002\001\001" +
    "\000\004\075\055\001\001\000\004\016\u013f\001\001\000" +
    "\002\001\001\000\004\076\060\001\001\000\002\001\001" +
    "\000\004\077\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\024\021\074\074\073" +
    "\001\001\000\030\013\121\026\106\046\115\050\101\057" +
    "\120\061\117\062\122\073\103\100\102\131\110\134\107" +
    "\001\001\000\010\016\024\021\074\074\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\153\036\u0131\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\013\121\026\106\046\115\050\101\057\120" +
    "\061\117\062\122\073\103\100\u012c\131\110\134\107\001" +
    "\001\000\006\031\242\035\u012b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\034\201\105\212\130\205\136\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\153\036\u0105\001" +
    "\001\000\002\001\001\000\004\106\374\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\051\135\071\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\053\334\054\327\055\330\103\331" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\051\174\056\272\071\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\146\001\001\000\006\034\153\036\267\001\001\000" +
    "\002\001\001\000\006\034\153\036\165\001\001\000\006" +
    "\034\153\036\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\026\170\046" +
    "\115\131\110\134\107\001\001\000\012\034\201\105\212" +
    "\130\205\136\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\051\173\071\127\001\001\000\010\051\174" +
    "\056\175\071\127\001\001\000\010\051\174\056\177\071" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\266\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\132\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\133\225\001\001\000\002\001\001\000\004\132\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\133\231\001\001\000\002\001" +
    "\001\000\010\034\201\130\205\136\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\242\035\261\001" +
    "\001\000\004\135\241\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\242\035\252\001\001\000\004\027" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\135\264\001\001\000\006\031\242\035" +
    "\265\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\026\271\046\115\131\110\134\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\276\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\302" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\051" +
    "\305\071\127\001\001\000\010\051\174\056\306\071\127" +
    "\001\001\000\002\001\001\000\004\072\310\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\051\313\071\127" +
    "\001\001\000\010\051\174\056\314\071\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\320\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\051\323\071\127\001\001\000\010\051\174\056\324" +
    "\071\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\026\340\046\115\131\110\134\107\001" +
    "\001\000\004\041\335\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\342\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\026\345\046\115\131\110\134\107\001" +
    "\001\000\002\001\001\000\012\026\347\046\115\131\110" +
    "\134\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\053\334\055\330\103\353\001\001" +
    "\000\002\001\001\000\006\051\355\071\127\001\001\000" +
    "\010\051\174\056\356\071\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\362\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\026\371\046\115\131\110\134\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\034\376\120\u0100\130\377\001\001\000\004" +
    "\032\u0104\001\001\000\004\027\u0103\001\001\000\002\001" +
    "\001\000\004\132\u0102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\026" +
    "\u0107\046\115\131\110\134\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\051\u010a\071\127\001\001\000" +
    "\010\051\174\056\u010b\071\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\u010e\001\001\000\002\001" +
    "\001\000\004\032\u0110\001\001\000\002\001\001\000\012" +
    "\026\u0112\046\115\131\110\134\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\051\u0115\071\127\001\001" +
    "\000\010\051\174\056\u0116\071\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\026\u011d" +
    "\046\115\064\u011a\102\u011b\104\u011c\131\110\134\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\u011f\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\026\u0122\046\115\131\110" +
    "\134\107\001\001\000\002\001\001\000\012\026\u0124\046" +
    "\115\131\110\134\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\034\201\130\205\136" +
    "\233\001\001\000\020\026\u011d\046\115\064\u011a\102\u011b" +
    "\104\u0129\131\110\134\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\026\u012e\046\115\131\110\134\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\u0133\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\051\u0136\071\127\001\001\000\010\051\174" +
    "\056\u0137\071\127\001\001\000\002\001\001\000\004\063" +
    "\u013a\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\051\u013c\071\127\001\001\000\010\051\174\056\u013d\071" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\075\u0141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\u0145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u014a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\u014d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\u0151" +
    "\001\001\000\004\017\u0153\001\001\000\002\001\001\000" +
    "\004\020\u0156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\u015a\070" +
    "\u0159\001\001\000\002\001\001\000\004\017\u015b\001\001" +
    "\000\004\020\u015c\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\u015a\070\u015f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\u0164\001\001\000\002\001\001\000\006\023\u0169" +
    "\047\u0167\001\001\000\012\026\u016b\046\115\131\110\134" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static LinkedList<TError> TablaES = new LinkedList<TError>(); 

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
     
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico$actions {



  private final analisis_sintactico parser;

  /** Constructor */
  CUP$analisis_sintactico$actions(analisis_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action_part00000000(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico$parser.done_parsing();
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= contract ident O_Parent_L BODY_CONTRACT C_Parent_L INICIO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BODY_CONTRACT ::= EN BODY_CONTRACT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BODY_CONTRACT ::= BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BODY_CONTRACT_P ::= VAR_CONTRACT BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BODY_CONTRACT_P ::= BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BODY_CONTRACT_PP ::= STRUCTURE BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BODY_CONTRACT_PP ::= BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BODY_CONTRACT_PPP ::= FUNC BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BODY_CONTRACT_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNC ::= functionSoli ident O_Parent_R TIPO ident FUNC_PARAM C_Parent_R FUNC_MOD FUNC_RETURNS O_Parent_L CUERPO_ASSIGN CUERPO_M returnSoli EXP punto_coma C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-15)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNC_PARAM ::= coma TIPO ident FUNC_PARAM 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNC_PARAM ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNC_MOD ::= payableSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNC_MOD ::= privateSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNC_MOD ::= publicSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNC_MOD ::= internalSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNC_MOD ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNC_RETURNS ::= returns O_Parent_R TIPO ident C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_RETURNS",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNC_RETURNS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_RETURNS",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPO_M ::= CUERPO CUERPO_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPO_M ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO ::= ident igual CUERPO_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO ::= ident punto ident igual CUERPO_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPO ::= EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPO ::= STRU 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CUERPO_P ::= ASSIGN_NOT_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_P",66, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPO_P ::= STRU_IF_LINE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_P",66, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPO_ASSIGN ::= VAR_CONTRACT CUERPO_ASSIGN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN",58, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPO_ASSIGN ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN",58, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // STRUCTURE ::= structSoli ident O_Parent_L TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // STRUCTURE_VAR ::= TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // STRUCTURE_VAR ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // STRU ::= STRU_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // STRU ::= STRU_FOR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // STRU ::= STRU_DO_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // STRU ::= STRU_IF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // STRU_WHILE ::= whileSoli O_Parent_R EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_WHILE",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // STRU_FOR ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_FOR",45, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // STRU_DO_WHILE ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_DO_WHILE",47, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // STRU_IF ::= ifSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L STRU_ELSE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF",48, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STRU_ELSE ::= elseSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STRU_ELSE ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STRU_IF_LINE ::= O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP punto_punto EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_LINE",50, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BODY_SENT_M ::= BODY_SENT BODY_SENT_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BODY_SENT_M ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BODY_SENT ::= ident BODY_SENT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BODY_SENT ::= thisSoli punto ident igual EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BODY_SENT ::= whileSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BODY_SENT ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BODY_SENT ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BODY_SENT ::= STRU_IF_ELSE_IN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BODY_SENT ::= returnSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BODY_SENT ::= breakSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BODY_SENT ::= continueSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BODY_SENT_P ::= punto ident BODY_SENT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BODY_SENT_P ::= BODY_SENT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BODY_SENT_PP ::= BODY_ASSIGN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BODY_SENT_PP ::= BODY_FUN_CALL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BODY_SENT_PP ::= igual O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP punto_punto EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // STRU_IF_ELSE_IN ::= ifSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L STRU_ELSE_IN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_ELSE_IN",55, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // STRU_ELSE_IN ::= elseSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // STRU_ELSE_IN ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BODY_ASSIGN ::= igual EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_ASSIGN",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BODY_FUN_CALL ::= O_Parent_R FUNC_CALL_PARAMS C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_FUN_CALL",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FOR_VAR ::= ident igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FOR_VAR",46, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASSIGN_NOT_VAR ::= EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ASSIGN_NOT_VAR",64, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EN ::= enumSoli ident O_Parent_L ident EN_IDENT C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EN_IDENT ::= coma ident EN_IDENT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EN_IDENT ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VAR_CONTRACT ::= TIPO VAR_ARR VAR_ACCESS ident VAR_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VAR_CONTRACT_P ::= punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VAR_CONTRACT_P ::= VAR_CONTRACT_C punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VAR_CONTRACT_C ::= igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_C",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VAR_ARR ::= O_Parent_C C_Parent_C 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VAR_ARR ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VAR_ACCESS ::= publicSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VAR_ACCESS ::= privateSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VAR_ACCESS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= ident EXP_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= thisSoli EXP_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= BODY_LIT_TF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= ARIT_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= BOOL_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // BOOL_GATE ::= trueSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BOOL_GATE",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // BOOL_GATE ::= falseSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BOOL_GATE",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ARIT_GATE ::= numero OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARIT_GATE",90, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP_P ::= punto ident EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P",67, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP_P ::= EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P",67, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP_P_S ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP_P_S ::= OP_EXCL OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP_P_S ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP_P_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP_PP ::= punto ident EXP_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PP",68, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP_PPP ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP_PPP ::= OP_EXCL OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP_PPP ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FUNC_CALL_CASE ::= ident FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FUNC_CALL_CASE ::= thisSoli punto ident FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FUNC_CALL_CASE ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FUNC_CALL_CASE_P ::= coma FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE_P",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FUNC_CALL_CASE_P ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE_P",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OP_ARIT ::= numero OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OP_ARIT ::= ident OP_ARIT_Parent OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OP_ARIT ::= thisSoli punto ident OP_ARIT_Parent OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OP_ARIT_P ::= OP OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OP_ARIT_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OP_ARIT_Parent ::= punto ident 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_Parent",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OP_ARIT_Parent ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_Parent",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OP ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OP ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OP ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OP ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OP ::= O_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OP ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OP ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OP ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OP ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OP ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OP ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OP_EXCL ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OP_EXCL ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OP_EXCL ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OP_EXCL ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OP_EXCL ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OP_EXCL ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OP_EXCL ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OP_EXCL ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OP_EXCL ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OP_BOOL ::= trueSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OP_BOOL ::= falseSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OP_BOOL ::= ident OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OP_BOOL_P ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OP_BOOL_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OP_OP_BOOL ::= igual_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OP_OP_BOOL ::= mayor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OP_OP_BOOL ::= mayor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OP_OP_BOOL ::= menor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OP_OP_BOOL ::= menor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OP_OP_BOOL ::= diferente 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OP_OP_BOOL ::= op_or 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OP_OP_BOOL ::= op_and 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OP_OP_BOOL ::= negacion 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // BODY_LIT_TF ::= numero_HEX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // BODY_LIT_TF ::= string 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // TIPO ::= bool 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // TIPO ::= byteSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // TIPO ::= bytes 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // TIPO ::= stringSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // TIPO ::= uint 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // TIPO ::= uint_O 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // TIPO ::= uint_DS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // TIPO ::= uint_TD 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // TIPO ::= uint_SC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TIPO ::= uint_CVO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TIPO ::= uint_DCS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // TIPO ::= intSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // TIPO ::= int_O 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // TIPO ::= int_DS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // TIPO ::= int_TD 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // TIPO ::= int_SC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // TIPO ::= int_CVO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // TIPO ::= int_DCS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // TIPO ::= address 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // TIPO ::= address_payable 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$analisis_sintactico$do_action_part00000000(
                               CUP$analisis_sintactico$act_num,
                               CUP$analisis_sintactico$parser,
                               CUP$analisis_sintactico$stack,
                               CUP$analisis_sintactico$top);
    }
}

}
