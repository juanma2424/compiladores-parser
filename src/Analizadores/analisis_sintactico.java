
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symb.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\320\000\002\002\004\000\002\002\016\000\002\140" +
    "\010\000\002\140\002\000\002\004\004\000\002\004\003" +
    "\000\002\005\004\000\002\005\003\000\002\006\004\000" +
    "\002\006\003\000\002\007\004\000\002\007\002\000\002" +
    "\014\021\000\002\014\005\000\002\075\006\000\002\075" +
    "\002\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\076\003\000\002\076\002\000\002\077\007\000" +
    "\002\077\002\000\002\100\004\000\002\100\002\000\002" +
    "\141\007\000\002\141\003\000\002\073\005\000\002\073" +
    "\007\000\002\073\004\000\002\073\003\000\002\104\003" +
    "\000\002\104\003\000\002\142\004\000\002\142\003\000" +
    "\002\143\003\000\002\143\003\000\002\067\014\000\002" +
    "\070\010\000\002\070\002\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\050\012" +
    "\000\002\057\016\000\002\061\014\000\002\062\013\000" +
    "\002\063\007\000\002\063\002\000\002\064\012\000\002" +
    "\056\004\000\002\056\002\000\002\051\004\000\002\051" +
    "\010\000\002\051\012\000\002\051\016\000\002\051\014" +
    "\000\002\051\003\000\002\051\004\000\002\051\004\000" +
    "\002\051\004\000\002\054\005\000\002\054\003\000\002" +
    "\103\003\000\002\103\003\000\002\103\013\000\002\071" +
    "\013\000\002\072\007\000\002\072\002\000\002\053\005" +
    "\000\002\055\006\000\002\060\005\000\002\102\004\000" +
    "\002\011\010\000\002\011\005\000\002\015\005\000\002" +
    "\015\002\000\002\021\007\000\002\047\003\000\002\047" +
    "\004\000\002\023\004\000\002\017\004\000\002\017\002" +
    "\000\002\020\003\000\002\020\003\000\002\020\002\000" +
    "\002\026\004\000\002\026\004\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\131\004\000\002\131" +
    "\004\000\002\134\004\000\002\105\005\000\002\105\003" +
    "\000\002\136\004\000\002\136\004\000\002\136\004\000" +
    "\002\136\002\000\002\106\005\000\002\120\004\000\002" +
    "\120\004\000\002\120\004\000\002\120\002\000\002\132" +
    "\004\000\002\132\006\000\002\132\003\000\002\133\004" +
    "\000\002\133\003\000\002\027\004\000\002\027\005\000" +
    "\002\027\007\000\002\035\004\000\002\035\002\000\002" +
    "\135\004\000\002\135\002\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\130\003\000\002\130\003\000\002\130\003\000\002\130" +
    "\003\000\002\130\003\000\002\130\003\000\002\130\003" +
    "\000\002\130\003\000\002\130\003\000\002\032\004\000" +
    "\002\032\004\000\002\032\004\000\002\036\004\000\002" +
    "\036\002\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\046\003\000\002\046\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a4\000\004\004\004\001\002\000\004\005\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\006\010\001\002\000\004\161\011\001\002\000" +
    "\004\161\012\001\002\000\004\014\013\001\002\000\004" +
    "\007\014\001\002\000\004\160\015\001\002\000\004\010" +
    "\016\001\002\000\166\011\ufff6\013\073\016\020\017\022" +
    "\020\037\021\104\022\063\023\116\024\111\025\034\026" +
    "\105\027\106\030\030\031\031\032\075\033\065\034\114" +
    "\035\072\036\077\037\110\040\070\110\103\111\055\115" +
    "\062\116\040\117\112\120\067\121\061\122\113\123\046" +
    "\124\053\125\042\126\050\127\102\130\045\131\051\132" +
    "\071\133\032\134\025\135\017\136\057\137\115\140\074" +
    "\141\117\142\120\143\056\144\041\145\047\146\033\147" +
    "\036\150\026\151\027\152\100\153\021\154\035\155\024" +
    "\156\060\157\054\001\002\000\012\041\uff44\043\uff44\044" +
    "\uff44\160\uff44\001\002\000\012\041\uff67\043\uff67\044\uff67" +
    "\160\uff67\001\002\000\012\041\uff36\043\uff36\044\uff36\160" +
    "\uff36\001\002\000\012\041\uff66\043\uff66\044\uff66\160\uff66" +
    "\001\002\000\012\041\125\043\uffae\044\uffae\160\uffae\001" +
    "\002\000\012\041\uff34\043\uff34\044\uff34\160\uff34\001\002" +
    "\000\012\041\uff45\043\uff45\044\uff45\160\uff45\001\002\000" +
    "\012\041\uff39\043\uff39\044\uff39\160\uff39\001\002\000\012" +
    "\041\uff38\043\uff38\044\uff38\160\uff38\001\002\000\012\041" +
    "\uff5c\043\uff5c\044\uff5c\160\uff5c\001\002\000\012\041\uff5b" +
    "\043\uff5b\044\uff5b\160\uff5b\001\002\000\012\041\uff46\043" +
    "\uff46\044\uff46\160\uff46\001\002\000\012\041\uff3b\043\uff3b" +
    "\044\uff3b\160\uff3b\001\002\000\012\041\uff5f\043\uff5f\044" +
    "\uff5f\160\uff5f\001\002\000\012\041\uff35\043\uff35\044\uff35" +
    "\160\uff35\001\002\000\012\041\uff3a\043\uff3a\044\uff3a\160" +
    "\uff3a\001\002\000\012\041\uff65\043\uff65\044\uff65\160\uff65" +
    "\001\002\000\012\041\uff64\043\uff64\044\uff64\160\uff64\001" +
    "\002\000\012\041\uff3d\043\uff3d\044\uff3d\160\uff3d\001\002" +
    "\000\012\041\uff4c\043\uff4c\044\uff4c\160\uff4c\001\002\000" +
    "\164\011\ufff6\016\020\017\022\020\037\021\104\022\063" +
    "\023\116\024\111\025\034\026\105\027\106\030\030\031" +
    "\031\032\075\033\065\034\114\035\072\036\077\037\110" +
    "\040\070\110\103\111\055\115\062\116\040\117\112\120" +
    "\067\121\061\122\113\123\046\124\053\125\042\126\050" +
    "\127\102\130\045\131\051\132\071\133\032\134\025\135" +
    "\017\136\057\137\115\140\074\141\117\142\120\143\056" +
    "\144\041\145\047\146\033\147\036\150\026\151\027\152" +
    "\100\153\021\154\035\155\024\156\060\157\054\001\002" +
    "\000\004\011\ufffa\001\002\000\012\041\uff49\043\uff49\044" +
    "\uff49\160\uff49\001\002\000\012\041\uff4e\043\uff4e\044\uff4e" +
    "\160\uff4e\001\002\000\012\041\uff3c\043\uff3c\044\uff3c\160" +
    "\uff3c\001\002\000\012\041\uff4b\043\uff4b\044\uff4b\160\uff4b" +
    "\001\002\000\012\041\uff48\043\uff48\044\uff48\160\uff48\001" +
    "\002\000\004\011\ufffc\001\002\000\012\041\uff4d\043\uff4d" +
    "\044\uff4d\160\uff4d\001\002\000\012\041\uff32\043\uff32\044" +
    "\uff32\160\uff32\001\002\000\006\003\171\160\172\001\002" +
    "\000\012\041\uff3e\043\uff3e\044\uff3e\160\uff3e\001\002\000" +
    "\012\041\uff43\043\uff43\044\uff43\160\uff43\001\002\000\012" +
    "\041\uff33\043\uff33\044\uff33\160\uff33\001\002\000\012\041" +
    "\uff50\043\uff50\044\uff50\160\uff50\001\002\000\012\041\uff53" +
    "\043\uff53\044\uff53\160\uff53\001\002\000\012\041\uff62\043" +
    "\uff62\044\uff62\160\uff62\001\002\000\004\011\161\001\002" +
    "\000\012\041\uff59\043\uff59\044\uff59\160\uff59\001\002\000" +
    "\004\011\ufff8\001\002\000\012\041\uff51\043\uff51\044\uff51" +
    "\160\uff51\001\002\000\012\041\uff54\043\uff54\044\uff54\160" +
    "\uff54\001\002\000\012\041\uff47\043\uff47\044\uff47\160\uff47" +
    "\001\002\000\012\041\uff57\043\uff57\044\uff57\160\uff57\001" +
    "\002\000\006\003\147\160\150\001\002\000\012\041\uff41" +
    "\043\uff41\044\uff41\160\uff41\001\002\000\012\041\uff5a\043" +
    "\uff5a\044\uff5a\160\uff5a\001\002\000\166\011\ufff6\013\073" +
    "\016\020\017\022\020\037\021\104\022\063\023\116\024" +
    "\111\025\034\026\105\027\106\030\030\031\031\032\075" +
    "\033\065\034\114\035\072\036\077\037\110\040\070\110" +
    "\103\111\055\115\062\116\040\117\112\120\067\121\061" +
    "\122\113\123\046\124\053\125\042\126\050\127\102\130" +
    "\045\131\051\132\071\133\032\134\025\135\017\136\057" +
    "\137\115\140\074\141\117\142\120\143\056\144\041\145" +
    "\047\146\033\147\036\150\026\151\027\152\100\153\021" +
    "\154\035\155\024\156\060\157\054\001\002\000\012\041" +
    "\uff56\043\uff56\044\uff56\160\uff56\001\002\000\012\041\uff37" +
    "\043\uff37\044\uff37\160\uff37\001\002\000\006\011\ufff6\111" +
    "\055\001\002\000\012\041\uff4a\043\uff4a\044\uff4a\160\uff4a" +
    "\001\002\000\004\160\122\001\002\000\012\041\uff63\043" +
    "\uff63\044\uff63\160\uff63\001\002\000\012\041\uff5e\043\uff5e" +
    "\044\uff5e\160\uff5e\001\002\000\012\041\uff5d\043\uff5d\044" +
    "\uff5d\160\uff5d\001\002\000\010\011\ufff6\110\103\111\055" +
    "\001\002\000\012\041\uff55\043\uff55\044\uff55\160\uff55\001" +
    "\002\000\012\041\uff60\043\uff60\044\uff60\160\uff60\001\002" +
    "\000\012\041\uff52\043\uff52\044\uff52\160\uff52\001\002\000" +
    "\012\041\uff4f\043\uff4f\044\uff4f\160\uff4f\001\002\000\012" +
    "\041\uff58\043\uff58\044\uff58\160\uff58\001\002\000\012\041" +
    "\uff42\043\uff42\044\uff42\160\uff42\001\002\000\012\041\uff61" +
    "\043\uff61\044\uff61\160\uff61\001\002\000\012\041\uff40\043" +
    "\uff40\044\uff40\160\uff40\001\002\000\012\041\uff3f\043\uff3f" +
    "\044\uff3f\160\uff3f\001\002\000\004\011\ufff9\001\002\000" +
    "\004\010\123\001\002\000\156\016\020\017\022\020\037" +
    "\021\104\022\063\023\116\024\111\025\034\026\105\027" +
    "\106\030\030\031\031\032\075\033\065\034\114\035\072" +
    "\036\077\037\110\040\070\115\062\116\040\117\112\120" +
    "\067\121\061\122\113\123\046\124\053\125\042\126\050" +
    "\127\102\130\045\131\051\132\071\133\032\134\025\135" +
    "\017\136\057\137\115\140\074\141\117\142\120\143\056" +
    "\144\041\145\047\146\033\147\036\150\026\151\027\152" +
    "\100\153\021\154\035\155\024\156\060\157\054\001\002" +
    "\000\012\041\125\043\uffae\044\uffae\160\uffae\001\002\000" +
    "\004\042\144\001\002\000\010\043\127\044\130\160\uffab" +
    "\001\002\000\004\160\uffad\001\002\000\004\160\uffac\001" +
    "\002\000\004\160\132\001\002\000\004\014\133\001\002" +
    "\000\160\011\uffda\016\020\017\022\020\037\021\104\022" +
    "\063\023\116\024\111\025\034\026\105\027\106\030\030" +
    "\031\031\032\075\033\065\034\114\035\072\036\077\037" +
    "\110\040\070\115\062\116\040\117\112\120\067\121\061" +
    "\122\113\123\046\124\053\125\042\126\050\127\102\130" +
    "\045\131\051\132\071\133\032\134\025\135\017\136\057" +
    "\137\115\140\074\141\117\142\120\143\056\144\041\145" +
    "\047\146\033\147\036\150\026\151\027\152\100\153\021" +
    "\154\035\155\024\156\060\157\054\001\002\000\012\041" +
    "\125\043\uffae\044\uffae\160\uffae\001\002\000\004\011\136" +
    "\001\002\000\010\011\uffdc\110\uffdc\111\uffdc\001\002\000" +
    "\010\043\127\044\130\160\uffab\001\002\000\004\160\141" +
    "\001\002\000\004\014\142\001\002\000\160\011\uffda\016" +
    "\020\017\022\020\037\021\104\022\063\023\116\024\111" +
    "\025\034\026\105\027\106\030\030\031\031\032\075\033" +
    "\065\034\114\035\072\036\077\037\110\040\070\115\062" +
    "\116\040\117\112\120\067\121\061\122\113\123\046\124" +
    "\053\125\042\126\050\127\102\130\045\131\051\132\071" +
    "\133\032\134\025\135\017\136\057\137\115\140\074\141" +
    "\117\142\120\143\056\144\041\145\047\146\033\147\036" +
    "\150\026\151\027\152\100\153\021\154\035\155\024\156" +
    "\060\157\054\001\002\000\004\011\uffdb\001\002\000\010" +
    "\043\uffaf\044\uffaf\160\uffaf\001\002\000\004\011\ufff7\001" +
    "\002\000\004\011\ufffd\001\002\000\004\011\160\001\002" +
    "\000\004\010\151\001\002\000\004\160\152\001\002\000" +
    "\006\011\uffb4\015\153\001\002\000\004\160\156\001\002" +
    "\000\004\011\155\001\002\000\166\011\uffb7\013\uffb7\016" +
    "\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7" +
    "\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033" +
    "\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\110\uffb7" +
    "\111\uffb7\115\uffb7\116\uffb7\117\uffb7\120\uffb7\121\uffb7\122" +
    "\uffb7\123\uffb7\124\uffb7\125\uffb7\126\uffb7\127\uffb7\130\uffb7" +
    "\131\uffb7\132\uffb7\133\uffb7\134\uffb7\135\uffb7\136\uffb7\137" +
    "\uffb7\140\uffb7\141\uffb7\142\uffb7\143\uffb7\144\uffb7\145\uffb7" +
    "\146\uffb7\147\uffb7\150\uffb7\151\uffb7\152\uffb7\153\uffb7\154" +
    "\uffb7\155\uffb7\156\uffb7\157\uffb7\001\002\000\006\011\uffb4" +
    "\015\153\001\002\000\004\011\uffb5\001\002\000\166\011" +
    "\uffb6\013\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6" +
    "\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031" +
    "\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6" +
    "\040\uffb6\110\uffb6\111\uffb6\115\uffb6\116\uffb6\117\uffb6\120" +
    "\uffb6\121\uffb6\122\uffb6\123\uffb6\124\uffb6\125\uffb6\126\uffb6" +
    "\127\uffb6\130\uffb6\131\uffb6\132\uffb6\133\uffb6\134\uffb6\135" +
    "\uffb6\136\uffb6\137\uffb6\140\uffb6\141\uffb6\142\uffb6\143\uffb6" +
    "\144\uffb6\145\uffb6\146\uffb6\147\uffb6\150\uffb6\151\uffb6\152" +
    "\uffb6\153\uffb6\154\uffb6\155\uffb6\156\uffb6\157\uffb6\001\002" +
    "\000\006\002\ufffe\007\163\001\002\000\004\002\000\001" +
    "\002\000\004\160\164\001\002\000\004\010\165\001\002" +
    "\000\166\011\ufff6\013\073\016\020\017\022\020\037\021" +
    "\104\022\063\023\116\024\111\025\034\026\105\027\106" +
    "\030\030\031\031\032\075\033\065\034\114\035\072\036" +
    "\077\037\110\040\070\110\103\111\055\115\062\116\040" +
    "\117\112\120\067\121\061\122\113\123\046\124\053\125" +
    "\042\126\050\127\102\130\045\131\051\132\071\133\032" +
    "\134\025\135\017\136\057\137\115\140\074\141\117\142" +
    "\120\143\056\144\041\145\047\146\033\147\036\150\026" +
    "\151\027\152\100\153\021\154\035\155\024\156\060\157" +
    "\054\001\002\000\004\011\167\001\002\000\006\002\ufffe" +
    "\007\163\001\002\000\004\002\uffff\001\002\000\004\011" +
    "\u019c\001\002\000\004\065\173\001\002\000\156\016\020" +
    "\017\022\020\037\021\104\022\063\023\116\024\111\025" +
    "\034\026\105\027\106\030\030\031\031\032\075\033\065" +
    "\034\114\035\072\036\077\037\110\040\070\115\062\116" +
    "\040\117\112\120\067\121\061\122\113\123\046\124\053" +
    "\125\042\126\050\127\102\130\045\131\051\132\071\133" +
    "\032\134\025\135\017\136\057\137\115\140\074\141\117" +
    "\142\120\143\056\144\041\145\047\146\033\147\036\150" +
    "\026\151\027\152\100\153\021\154\035\155\024\156\060" +
    "\157\054\001\002\000\004\160\175\001\002\000\006\015" +
    "\176\066\ufff2\001\002\000\156\016\020\017\022\020\037" +
    "\021\104\022\063\023\116\024\111\025\034\026\105\027" +
    "\106\030\030\031\031\032\075\033\065\034\114\035\072" +
    "\036\077\037\110\040\070\115\062\116\040\117\112\120" +
    "\067\121\061\122\113\123\046\124\053\125\042\126\050" +
    "\127\102\130\045\131\051\132\071\133\032\134\025\135" +
    "\017\136\057\137\115\140\074\141\117\142\120\143\056" +
    "\144\041\145\047\146\033\147\036\150\026\151\027\152" +
    "\100\153\021\154\035\155\024\156\060\157\054\001\002" +
    "\000\004\066\200\001\002\000\016\010\uffed\043\201\044" +
    "\203\112\205\113\204\114\uffed\001\002\000\006\010\uffef" +
    "\114\uffef\001\002\000\006\010\uffeb\114\207\001\002\000" +
    "\006\010\ufff0\114\ufff0\001\002\000\006\010\uffee\114\uffee" +
    "\001\002\000\006\010\ufff1\114\ufff1\001\002\000\004\010" +
    "\214\001\002\000\004\065\210\001\002\000\156\016\020" +
    "\017\022\020\037\021\104\022\063\023\116\024\111\025" +
    "\034\026\105\027\106\030\030\031\031\032\075\033\065" +
    "\034\114\035\072\036\077\037\110\040\070\115\062\116" +
    "\040\117\112\120\067\121\061\122\113\123\046\124\053" +
    "\125\042\126\050\127\102\130\045\131\051\132\071\133" +
    "\032\134\025\135\017\136\057\137\115\140\074\141\117" +
    "\142\120\143\056\144\041\145\047\146\033\147\036\150" +
    "\026\151\027\152\100\153\021\154\035\155\024\156\060" +
    "\157\054\001\002\000\004\160\212\001\002\000\004\066" +
    "\213\001\002\000\004\010\uffec\001\002\000\206\016\020" +
    "\017\022\020\037\021\104\022\063\023\116\024\111\025" +
    "\034\026\105\027\106\030\030\031\031\032\075\033\065" +
    "\034\114\035\072\036\077\037\110\040\070\046\231\047" +
    "\223\075\242\076\243\077\uffe9\102\221\103\224\104\237" +
    "\115\062\116\040\117\112\120\067\121\061\122\113\123" +
    "\046\124\053\125\042\126\050\127\102\130\045\131\051" +
    "\132\071\133\032\134\025\135\017\136\057\137\115\140" +
    "\074\141\117\142\120\143\056\144\041\145\047\146\033" +
    "\147\036\150\026\151\027\152\100\153\021\154\035\155" +
    "\024\156\060\157\054\160\216\161\235\162\222\163\244" +
    "\001\002\000\004\014\u0198\001\002\000\056\014\uff9d\045" +
    "\u0191\050\260\051\261\052\263\053\257\054\255\055\256" +
    "\056\253\057\264\060\262\061\342\062\332\063\334\064" +
    "\327\065\341\067\326\070\340\071\330\072\324\073\335" +
    "\074\u0190\001\002\000\004\077\u018c\001\002\000\206\016" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\046\uffd7" +
    "\047\uffd7\075\uffd7\076\uffd7\077\uffd7\102\uffd7\103\uffd7\104" +
    "\uffd7\115\uffd7\116\uffd7\117\uffd7\120\uffd7\121\uffd7\122\uffd7" +
    "\123\uffd7\124\uffd7\125\uffd7\126\uffd7\127\uffd7\130\uffd7\131" +
    "\uffd7\132\uffd7\133\uffd7\134\uffd7\135\uffd7\136\uffd7\137\uffd7" +
    "\140\uffd7\141\uffd7\142\uffd7\143\uffd7\144\uffd7\145\uffd7\146" +
    "\uffd7\147\uffd7\150\uffd7\151\uffd7\152\uffd7\153\uffd7\154\uffd7" +
    "\155\uffd7\156\uffd7\157\uffd7\160\uffd7\161\uffd7\162\uffd7\163" +
    "\uffd7\001\002\000\004\065\u0181\001\002\000\010\014\uff69" +
    "\066\uff69\107\uff69\001\002\000\032\014\uff73\050\260\051" +
    "\261\052\263\053\257\054\255\055\256\056\253\057\264" +
    "\060\262\066\uff73\107\uff73\001\002\000\004\010\u0177\001" +
    "\002\000\206\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031" +
    "\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7" +
    "\040\uffe7\046\uffe7\047\uffe7\075\uffe7\076\uffe7\077\uffe7\102" +
    "\uffe7\103\uffe7\104\uffe7\115\uffe7\116\uffe7\117\uffe7\120\uffe7" +
    "\121\uffe7\122\uffe7\123\uffe7\124\uffe7\125\uffe7\126\uffe7\127" +
    "\uffe7\130\uffe7\131\uffe7\132\uffe7\133\uffe7\134\uffe7\135\uffe7" +
    "\136\uffe7\137\uffe7\140\uffe7\141\uffe7\142\uffe7\143\uffe7\144" +
    "\uffe7\145\uffe7\146\uffe7\147\uffe7\150\uffe7\151\uffe7\152\uffe7" +
    "\153\uffe7\154\uffe7\155\uffe7\156\uffe7\157\uffe7\160\uffe7\161" +
    "\uffe7\162\uffe7\163\uffe7\001\002\000\010\014\uffa6\066\uffa6" +
    "\107\uffa6\001\002\000\012\041\125\043\uffae\044\uffae\160" +
    "\uffae\001\002\000\206\016\uffd8\017\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\046\uffd8\047\uffd8\075\uffd8\076\uffd8\077" +
    "\uffd8\102\uffd8\103\uffd8\104\uffd8\115\uffd8\116\uffd8\117\uffd8" +
    "\120\uffd8\121\uffd8\122\uffd8\123\uffd8\124\uffd8\125\uffd8\126" +
    "\uffd8\127\uffd8\130\uffd8\131\uffd8\132\uffd8\133\uffd8\134\uffd8" +
    "\135\uffd8\136\uffd8\137\uffd8\140\uffd8\141\uffd8\142\uffd8\143" +
    "\uffd8\144\uffd8\145\uffd8\146\uffd8\147\uffd8\150\uffd8\151\uffd8" +
    "\152\uffd8\153\uffd8\154\uffd8\155\uffd8\156\uffd8\157\uffd8\160" +
    "\uffd8\161\uffd8\162\uffd8\163\uffd8\001\002\000\032\014\uff73" +
    "\050\260\051\261\052\263\053\257\054\255\055\256\056" +
    "\253\057\264\060\262\066\uff73\107\uff73\001\002\000\010" +
    "\014\uffa8\066\uffa8\107\uffa8\001\002\000\206\016\020\017" +
    "\022\020\037\021\104\022\063\023\116\024\111\025\034" +
    "\026\105\027\106\030\030\031\031\032\075\033\065\034" +
    "\114\035\072\036\077\037\110\040\070\046\231\047\223" +
    "\075\242\076\243\077\uffe9\102\221\103\224\104\237\115" +
    "\062\116\040\117\112\120\067\121\061\122\113\123\046" +
    "\124\053\125\042\126\050\127\102\130\045\131\051\132" +
    "\071\133\032\134\025\135\017\136\057\137\115\140\074" +
    "\141\117\142\120\143\056\144\041\145\047\146\033\147" +
    "\036\150\026\151\027\152\100\153\021\154\035\155\024" +
    "\156\060\157\054\160\216\161\235\162\222\163\244\001" +
    "\002\000\010\014\uffa7\066\uffa7\107\uffa7\001\002\000\034" +
    "\014\uff8e\061\u0100\062\373\063\370\064\377\065\u0101\066" +
    "\u0102\067\372\070\371\071\366\072\374\073\375\107\uff8e" +
    "\001\002\000\206\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\046\uffd9\047\uffd9\075\uffd9\076\uffd9\077\uffd9" +
    "\102\uffd9\103\uffd9\104\uffd9\115\uffd9\116\uffd9\117\uffd9\120" +
    "\uffd9\121\uffd9\122\uffd9\123\uffd9\124\uffd9\125\uffd9\126\uffd9" +
    "\127\uffd9\130\uffd9\131\uffd9\132\uffd9\133\uffd9\134\uffd9\135" +
    "\uffd9\136\uffd9\137\uffd9\140\uffd9\141\uffd9\142\uffd9\143\uffd9" +
    "\144\uffd9\145\uffd9\146\uffd9\147\uffd9\150\uffd9\151\uffd9\152" +
    "\uffd9\153\uffd9\154\uffd9\155\uffd9\156\uffd9\157\uffd9\160\uffd9" +
    "\161\uffd9\162\uffd9\163\uffd9\001\002\000\004\065\u0154\001" +
    "\002\000\206\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\046\uffe3\047\uffe3\075\uffe3\076\uffe3\077\uffe3\102" +
    "\uffe3\103\uffe3\104\uffe3\115\uffe3\116\uffe3\117\uffe3\120\uffe3" +
    "\121\uffe3\122\uffe3\123\uffe3\124\uffe3\125\uffe3\126\uffe3\127" +
    "\uffe3\130\uffe3\131\uffe3\132\uffe3\133\uffe3\134\uffe3\135\uffe3" +
    "\136\uffe3\137\uffe3\140\uffe3\141\uffe3\142\uffe3\143\uffe3\144" +
    "\uffe3\145\uffe3\146\uffe3\147\uffe3\150\uffe3\151\uffe3\152\uffe3" +
    "\153\uffe3\154\uffe3\155\uffe3\156\uffe3\157\uffe3\160\uffe3\161" +
    "\uffe3\162\uffe3\163\uffe3\001\002\000\206\016\uffd6\017\uffd6" +
    "\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\046\uffd6\047\uffd6\075" +
    "\uffd6\076\uffd6\077\uffd6\102\uffd6\103\uffd6\104\uffd6\115\uffd6" +
    "\116\uffd6\117\uffd6\120\uffd6\121\uffd6\122\uffd6\123\uffd6\124" +
    "\uffd6\125\uffd6\126\uffd6\127\uffd6\130\uffd6\131\uffd6\132\uffd6" +
    "\133\uffd6\134\uffd6\135\uffd6\136\uffd6\137\uffd6\140\uffd6\141" +
    "\uffd6\142\uffd6\143\uffd6\144\uffd6\145\uffd6\146\uffd6\147\uffd6" +
    "\150\uffd6\151\uffd6\152\uffd6\153\uffd6\154\uffd6\155\uffd6\156" +
    "\uffd6\157\uffd6\160\uffd6\161\uffd6\162\uffd6\163\uffd6\001\002" +
    "\000\004\074\u014a\001\002\000\004\065\245\001\002\000" +
    "\010\014\uff68\066\uff68\107\uff68\001\002\000\010\046\251" +
    "\047\246\160\250\001\002\000\032\014\uff73\050\260\051" +
    "\261\052\263\053\257\054\255\055\256\056\253\057\264" +
    "\060\262\066\uff73\107\uff73\001\002\000\004\066\267\001" +
    "\002\000\032\014\uff73\050\260\051\261\052\263\053\257" +
    "\054\255\055\256\056\253\057\264\060\262\066\uff73\107" +
    "\uff73\001\002\000\032\014\uff73\050\260\051\261\052\263" +
    "\053\257\054\255\055\256\056\253\057\264\060\262\066" +
    "\uff73\107\uff73\001\002\000\010\014\uff77\066\uff77\107\uff77" +
    "\001\002\000\010\046\uff6c\047\uff6c\160\uff6c\001\002\000" +
    "\010\046\251\047\246\160\250\001\002\000\010\046\uff6e" +
    "\047\uff6e\160\uff6e\001\002\000\010\046\uff6d\047\uff6d\160" +
    "\uff6d\001\002\000\010\046\uff6f\047\uff6f\160\uff6f\001\002" +
    "\000\010\046\uff72\047\uff72\160\uff72\001\002\000\010\046" +
    "\uff71\047\uff71\160\uff71\001\002\000\010\046\uff6a\047\uff6a" +
    "\160\uff6a\001\002\000\010\046\uff70\047\uff70\160\uff70\001" +
    "\002\000\010\046\uff6b\047\uff6b\160\uff6b\001\002\000\010" +
    "\014\uff74\066\uff74\107\uff74\001\002\000\010\014\uff75\066" +
    "\uff75\107\uff75\001\002\000\004\010\270\001\002\000\024" +
    "\075\271\076\276\077\303\100\277\101\272\102\302\103" +
    "\274\104\300\160\275\001\002\000\004\074\u0144\001\002" +
    "\000\004\014\u0143\001\002\000\026\011\uffc7\075\uffc7\076" +
    "\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7" +
    "\160\uffc7\001\002\000\004\010\u013a\001\002\000\010\045" +
    "\u0126\065\u0129\074\u0124\001\002\000\004\065\u011d\001\002" +
    "\000\004\014\u011c\001\002\000\004\065\u010f\001\002\000" +
    "\026\011\uffcd\075\271\076\276\077\303\100\277\101\272" +
    "\102\302\103\274\104\300\160\275\001\002\000\004\065" +
    "\305\001\002\000\004\014\304\001\002\000\026\011\uffc6" +
    "\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6\103" +
    "\uffc6\104\uffc6\160\uffc6\001\002\000\004\160\306\001\002" +
    "\000\004\045\u010b\001\002\000\004\014\310\001\002\000" +
    "\010\046\251\047\246\160\250\001\002\000\004\014\312" +
    "\001\002\000\020\046\231\047\223\075\242\160\313\161" +
    "\235\162\222\163\244\001\002\000\060\014\uff9d\050\260" +
    "\051\261\052\263\053\257\054\255\055\256\056\253\057" +
    "\264\060\262\061\342\062\332\063\334\064\327\065\341" +
    "\066\uff9d\067\326\070\340\071\330\072\324\073\335\074" +
    "\333\107\uff9d\001\002\000\004\066\315\001\002\000\004" +
    "\010\316\001\002\000\024\075\271\076\276\077\303\100" +
    "\277\101\272\102\302\103\274\104\300\160\275\001\002" +
    "\000\026\011\uffcd\075\271\076\276\077\303\100\277\101" +
    "\272\102\302\103\274\104\300\160\275\001\002\000\026" +
    "\011\uffcd\075\271\076\276\077\303\100\277\101\272\102" +
    "\302\103\274\104\300\160\275\001\002\000\004\011\322" +
    "\001\002\000\026\011\uffc9\075\uffc9\076\uffc9\077\uffc9\100" +
    "\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\160\uffc9\001\002" +
    "\000\004\011\uffce\001\002\000\010\075\uff79\160\uff79\161" +
    "\uff79\001\002\000\010\046\251\047\246\160\250\001\002" +
    "\000\010\075\uff7c\160\uff7c\161\uff7c\001\002\000\010\075" +
    "\uff7d\160\uff7d\161\uff7d\001\002\000\010\075\uff7a\160\uff7a" +
    "\161\uff7a\001\002\000\010\075\360\160\362\161\361\001" +
    "\002\000\010\075\uff7f\160\uff7f\161\uff7f\001\002\000\004" +
    "\160\356\001\002\000\010\075\uff7e\160\uff7e\161\uff7e\001" +
    "\002\000\010\075\uff78\160\uff78\161\uff78\001\002\000\010" +
    "\014\uffaa\066\uffaa\107\uffaa\001\002\000\010\014\uffa1\066" +
    "\uffa1\107\uffa1\001\002\000\010\075\uff7b\160\uff7b\161\uff7b" +
    "\001\002\000\010\066\346\075\343\160\345\001\002\000" +
    "\010\075\uff80\160\uff80\161\uff80\001\002\000\004\074\353" +
    "\001\002\000\010\014\uffa0\066\uffa0\107\uffa0\001\002\000" +
    "\006\015\347\066\350\001\002\000\010\014\uff95\066\uff95" +
    "\107\uff95\001\002\000\010\066\346\075\343\160\345\001" +
    "\002\000\010\014\uff93\066\uff93\107\uff93\001\002\000\010" +
    "\014\uff97\066\uff97\107\uff97\001\002\000\010\014\uff94\066" +
    "\uff94\107\uff94\001\002\000\004\160\354\001\002\000\006" +
    "\015\347\066\350\001\002\000\010\014\uff96\066\uff96\107" +
    "\uff96\001\002\000\056\014\uff9d\050\260\051\261\052\263" +
    "\053\257\054\255\055\256\056\253\057\264\060\262\061" +
    "\342\062\332\063\334\064\327\065\341\066\uff9d\067\326" +
    "\070\340\071\330\072\324\073\335\107\uff9d\001\002\000" +
    "\010\014\uffa2\066\uffa2\107\uffa2\001\002\000\004\074\u0106" +
    "\001\002\000\034\014\uff8e\061\u0100\062\373\063\370\064" +
    "\377\065\u0101\066\u0102\067\372\070\371\071\366\072\374" +
    "\073\375\107\uff8e\001\002\000\036\014\uff8c\061\uff8c\062" +
    "\uff8c\063\uff8c\064\uff8c\065\uff8c\066\uff8c\067\uff8c\070\uff8c" +
    "\071\uff8c\072\uff8c\073\uff8c\074\364\107\uff8c\001\002\000" +
    "\010\014\uff9f\066\uff9f\107\uff9f\001\002\000\004\160\u0104" +
    "\001\002\000\034\014\uff8e\061\u0100\062\373\063\370\064" +
    "\377\065\u0101\066\u0102\067\372\070\371\071\366\072\374" +
    "\073\375\107\uff8e\001\002\000\010\075\uff83\160\uff83\161" +
    "\uff83\001\002\000\010\075\360\160\362\161\361\001\002" +
    "\000\010\075\uff89\160\uff89\161\uff89\001\002\000\010\075" +
    "\uff84\160\uff84\161\uff84\001\002\000\010\075\uff85\160\uff85" +
    "\161\uff85\001\002\000\010\075\uff8a\160\uff8a\161\uff8a\001" +
    "\002\000\010\075\uff82\160\uff82\161\uff82\001\002\000\010" +
    "\075\uff81\160\uff81\161\uff81\001\002\000\010\014\uff91\066" +
    "\uff91\107\uff91\001\002\000\010\075\uff88\160\uff88\161\uff88" +
    "\001\002\000\010\075\uff8b\160\uff8b\161\uff8b\001\002\000" +
    "\010\075\uff87\160\uff87\161\uff87\001\002\000\010\075\uff86" +
    "\160\uff86\161\uff86\001\002\000\010\014\uff8f\066\uff8f\107" +
    "\uff8f\001\002\000\034\014\uff8d\061\uff8d\062\uff8d\063\uff8d" +
    "\064\uff8d\065\uff8d\066\uff8d\067\uff8d\070\uff8d\071\uff8d\072" +
    "\uff8d\073\uff8d\107\uff8d\001\002\000\010\014\uff92\066\uff92" +
    "\107\uff92\001\002\000\004\160\u0107\001\002\000\036\014" +
    "\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c\065\uff8c\066\uff8c" +
    "\067\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c\074\364\107" +
    "\uff8c\001\002\000\034\014\uff8e\061\u0100\062\373\063\370" +
    "\064\377\065\u0101\066\u0102\067\372\070\371\071\366\072" +
    "\374\073\375\107\uff8e\001\002\000\010\014\uff90\066\uff90" +
    "\107\uff90\001\002\000\010\014\uff9e\066\uff9e\107\uff9e\001" +
    "\002\000\020\046\231\047\223\075\242\160\313\161\235" +
    "\162\222\163\244\001\002\000\004\014\uffb9\001\002\000" +
    "\004\011\u010e\001\002\000\206\016\uffd5\017\uffd5\020\uffd5" +
    "\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\037\uffd5\040\uffd5\046\uffd5\047\uffd5\075\uffd5\076" +
    "\uffd5\077\uffd5\102\uffd5\103\uffd5\104\uffd5\115\uffd5\116\uffd5" +
    "\117\uffd5\120\uffd5\121\uffd5\122\uffd5\123\uffd5\124\uffd5\125" +
    "\uffd5\126\uffd5\127\uffd5\130\uffd5\131\uffd5\132\uffd5\133\uffd5" +
    "\134\uffd5\135\uffd5\136\uffd5\137\uffd5\140\uffd5\141\uffd5\142" +
    "\uffd5\143\uffd5\144\uffd5\145\uffd5\146\uffd5\147\uffd5\150\uffd5" +
    "\151\uffd5\152\uffd5\153\uffd5\154\uffd5\155\uffd5\156\uffd5\157" +
    "\uffd5\160\uffd5\161\uffd5\162\uffd5\163\uffd5\001\002\000\010" +
    "\046\251\047\246\160\250\001\002\000\004\066\u0111\001" +
    "\002\000\004\010\u0112\001\002\000\024\075\271\076\276" +
    "\077\303\100\277\101\272\102\302\103\274\104\300\160" +
    "\275\001\002\000\026\011\uffcd\075\271\076\276\077\303" +
    "\100\277\101\272\102\302\103\274\104\300\160\275\001" +
    "\002\000\004\011\u0115\001\002\000\030\011\uffbc\075\uffbc" +
    "\076\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc\104" +
    "\uffbc\105\u0117\160\uffbc\001\002\000\026\011\uffbe\075\uffbe" +
    "\076\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe\104" +
    "\uffbe\160\uffbe\001\002\000\004\010\u0118\001\002\000\024" +
    "\075\271\076\276\077\303\100\277\101\272\102\302\103" +
    "\274\104\300\160\275\001\002\000\026\011\uffcd\075\271" +
    "\076\276\077\303\100\277\101\272\102\302\103\274\104" +
    "\300\160\275\001\002\000\004\011\u011b\001\002\000\026" +
    "\011\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\101\uffbd\102" +
    "\uffbd\103\uffbd\104\uffbd\160\uffbd\001\002\000\026\011\uffc5" +
    "\075\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5\103" +
    "\uffc5\104\uffc5\160\uffc5\001\002\000\010\046\251\047\246" +
    "\160\250\001\002\000\004\066\u011f\001\002\000\004\010" +
    "\u0120\001\002\000\024\075\271\076\276\077\303\100\277" +
    "\101\272\102\302\103\274\104\300\160\275\001\002\000" +
    "\026\011\uffcd\075\271\076\276\077\303\100\277\101\272" +
    "\102\302\103\274\104\300\160\275\001\002\000\004\011" +
    "\u0123\001\002\000\026\011\uffca\075\uffca\076\uffca\077\uffca" +
    "\100\uffca\101\uffca\102\uffca\103\uffca\104\uffca\160\uffca\001" +
    "\002\000\004\160\u0138\001\002\000\026\011\uffcc\075\uffcc" +
    "\076\uffcc\077\uffcc\100\uffcc\101\uffcc\102\uffcc\103\uffcc\104" +
    "\uffcc\160\uffcc\001\002\000\022\046\231\047\223\065\u012f" +
    "\075\242\160\313\161\235\162\222\163\244\001\002\000" +
    "\026\011\uffc0\075\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0" +
    "\102\uffc0\103\uffc0\104\uffc0\160\uffc0\001\002\000\026\011" +
    "\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2\101\uffc2\102\uffc2" +
    "\103\uffc2\104\uffc2\160\uffc2\001\002\000\002\001\002\000" +
    "\026\011\uffc1\075\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1" +
    "\102\uffc1\103\uffc1\104\uffc1\160\uffc1\001\002\000\004\066" +
    "\u012c\001\002\000\004\014\u012d\001\002\000\026\011\uffba" +
    "\075\uffba\076\uffba\077\uffba\100\uffba\101\uffba\102\uffba\103" +
    "\uffba\104\uffba\160\uffba\001\002\000\004\014\u0137\001\002" +
    "\000\010\046\251\047\246\160\250\001\002\000\004\066" +
    "\u0131\001\002\000\004\106\u0132\001\002\000\020\046\231" +
    "\047\223\075\242\160\313\161\235\162\222\163\244\001" +
    "\002\000\004\107\u0134\001\002\000\020\046\231\047\223" +
    "\075\242\160\313\161\235\162\222\163\244\001\002\000" +
    "\004\014\u0136\001\002\000\026\011\uffbf\075\uffbf\076\uffbf" +
    "\077\uffbf\100\uffbf\101\uffbf\102\uffbf\103\uffbf\104\uffbf\160" +
    "\uffbf\001\002\000\026\011\uffbb\075\uffbb\076\uffbb\077\uffbb" +
    "\100\uffbb\101\uffbb\102\uffbb\103\uffbb\104\uffbb\160\uffbb\001" +
    "\002\000\006\045\u0126\065\u0129\001\002\000\026\011\uffc3" +
    "\075\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103" +
    "\uffc3\104\uffc3\160\uffc3\001\002\000\024\075\271\076\276" +
    "\077\303\100\277\101\272\102\302\103\274\104\300\160" +
    "\275\001\002\000\026\011\uffcd\075\271\076\276\077\303" +
    "\100\277\101\272\102\302\103\274\104\300\160\275\001" +
    "\002\000\004\011\u013d\001\002\000\004\076\u013e\001\002" +
    "\000\004\065\u013f\001\002\000\010\046\251\047\246\160" +
    "\250\001\002\000\004\066\u0141\001\002\000\004\014\u0142" +
    "\001\002\000\026\011\uffc8\075\uffc8\076\uffc8\077\uffc8\100" +
    "\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\160\uffc8\001\002" +
    "\000\026\011\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101" +
    "\uffc4\102\uffc4\103\uffc4\104\uffc4\160\uffc4\001\002\000\004" +
    "\160\u0145\001\002\000\004\045\u0146\001\002\000\020\046" +
    "\231\047\223\075\242\160\313\161\235\162\222\163\244" +
    "\001\002\000\004\014\u0148\001\002\000\026\011\uffcb\075" +
    "\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb\102\uffcb\103\uffcb" +
    "\104\uffcb\160\uffcb\001\002\000\010\014\uff76\066\uff76\107" +
    "\uff76\001\002\000\004\160\u014c\001\002\000\010\014\uffa9" +
    "\066\uffa9\107\uffa9\001\002\000\056\014\uff98\050\260\051" +
    "\261\052\263\053\257\054\255\055\256\056\253\057\264" +
    "\060\262\061\342\062\332\063\334\064\327\065\u0150\066" +
    "\uff98\067\326\070\340\071\330\072\324\073\335\107\uff98" +
    "\001\002\000\010\046\251\047\246\160\250\001\002\000" +
    "\010\075\360\160\362\161\361\001\002\000\010\014\uff9c" +
    "\066\uff9c\107\uff9c\001\002\000\010\066\346\075\343\160" +
    "\345\001\002\000\010\014\uff9b\066\uff9b\107\uff9b\001\002" +
    "\000\010\014\uff9a\066\uff9a\107\uff9a\001\002\000\010\014" +
    "\uff99\066\uff99\107\uff99\001\002\000\010\046\251\047\246" +
    "\160\250\001\002\000\004\066\u0156\001\002\000\004\010" +
    "\u0157\001\002\000\024\075\271\076\276\077\303\100\277" +
    "\101\272\102\302\103\274\104\300\160\275\001\002\000" +
    "\026\011\uffcd\075\271\076\276\077\303\100\277\101\272" +
    "\102\302\103\274\104\300\160\275\001\002\000\004\011" +
    "\u015a\001\002\000\210\016\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\037\uffd0\040\uffd0\046\uffd0\047\uffd0\075\uffd0\076\uffd0\077" +
    "\uffd0\102\uffd0\103\uffd0\104\uffd0\105\u015b\115\uffd0\116\uffd0" +
    "\117\uffd0\120\uffd0\121\uffd0\122\uffd0\123\uffd0\124\uffd0\125" +
    "\uffd0\126\uffd0\127\uffd0\130\uffd0\131\uffd0\132\uffd0\133\uffd0" +
    "\134\uffd0\135\uffd0\136\uffd0\137\uffd0\140\uffd0\141\uffd0\142" +
    "\uffd0\143\uffd0\144\uffd0\145\uffd0\146\uffd0\147\uffd0\150\uffd0" +
    "\151\uffd0\152\uffd0\153\uffd0\154\uffd0\155\uffd0\156\uffd0\157" +
    "\uffd0\160\uffd0\161\uffd0\162\uffd0\163\uffd0\001\002\000\004" +
    "\010\u015d\001\002\000\206\016\uffd2\017\uffd2\020\uffd2\021" +
    "\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036" +
    "\uffd2\037\uffd2\040\uffd2\046\uffd2\047\uffd2\075\uffd2\076\uffd2" +
    "\077\uffd2\102\uffd2\103\uffd2\104\uffd2\115\uffd2\116\uffd2\117" +
    "\uffd2\120\uffd2\121\uffd2\122\uffd2\123\uffd2\124\uffd2\125\uffd2" +
    "\126\uffd2\127\uffd2\130\uffd2\131\uffd2\132\uffd2\133\uffd2\134" +
    "\uffd2\135\uffd2\136\uffd2\137\uffd2\140\uffd2\141\uffd2\142\uffd2" +
    "\143\uffd2\144\uffd2\145\uffd2\146\uffd2\147\uffd2\150\uffd2\151" +
    "\uffd2\152\uffd2\153\uffd2\154\uffd2\155\uffd2\156\uffd2\157\uffd2" +
    "\160\uffd2\161\uffd2\162\uffd2\163\uffd2\001\002\000\024\075" +
    "\271\076\276\077\303\100\277\101\272\102\302\103\274" +
    "\104\300\160\275\001\002\000\026\011\uffcd\075\271\076" +
    "\276\077\303\100\277\101\272\102\302\103\274\104\300" +
    "\160\275\001\002\000\004\011\u0160\001\002\000\206\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\046\uffd1" +
    "\047\uffd1\075\uffd1\076\uffd1\077\uffd1\102\uffd1\103\uffd1\104" +
    "\uffd1\115\uffd1\116\uffd1\117\uffd1\120\uffd1\121\uffd1\122\uffd1" +
    "\123\uffd1\124\uffd1\125\uffd1\126\uffd1\127\uffd1\130\uffd1\131" +
    "\uffd1\132\uffd1\133\uffd1\134\uffd1\135\uffd1\136\uffd1\137\uffd1" +
    "\140\uffd1\141\uffd1\142\uffd1\143\uffd1\144\uffd1\145\uffd1\146" +
    "\uffd1\147\uffd1\150\uffd1\151\uffd1\152\uffd1\153\uffd1\154\uffd1" +
    "\155\uffd1\156\uffd1\157\uffd1\160\uffd1\161\uffd1\162\uffd1\163" +
    "\uffd1\001\002\000\010\014\uffa3\066\uffa3\107\uffa3\001\002" +
    "\000\004\077\uffea\001\002\000\010\014\uffa5\066\uffa5\107" +
    "\uffa5\001\002\000\010\043\127\044\130\160\uffab\001\002" +
    "\000\004\160\u0166\001\002\000\006\014\u0169\045\u0168\001" +
    "\002\000\206\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\046\uffe8\047\uffe8\075\uffe8\076\uffe8\077\uffe8\102" +
    "\uffe8\103\uffe8\104\uffe8\115\uffe8\116\uffe8\117\uffe8\120\uffe8" +
    "\121\uffe8\122\uffe8\123\uffe8\124\uffe8\125\uffe8\126\uffe8\127" +
    "\uffe8\130\uffe8\131\uffe8\132\uffe8\133\uffe8\134\uffe8\135\uffe8" +
    "\136\uffe8\137\uffe8\140\uffe8\141\uffe8\142\uffe8\143\uffe8\144" +
    "\uffe8\145\uffe8\146\uffe8\147\uffe8\150\uffe8\151\uffe8\152\uffe8" +
    "\153\uffe8\154\uffe8\155\uffe8\156\uffe8\157\uffe8\160\uffe8\161" +
    "\uffe8\162\uffe8\163\uffe8\001\002\000\022\046\231\047\223" +
    "\065\u016e\075\242\160\313\161\235\162\222\163\244\001" +
    "\002\000\206\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\046\uffdf\047\uffdf\075\uffdf\076\uffdf\077\uffdf\102" +
    "\uffdf\103\uffdf\104\uffdf\115\uffdf\116\uffdf\117\uffdf\120\uffdf" +
    "\121\uffdf\122\uffdf\123\uffdf\124\uffdf\125\uffdf\126\uffdf\127" +
    "\uffdf\130\uffdf\131\uffdf\132\uffdf\133\uffdf\134\uffdf\135\uffdf" +
    "\136\uffdf\137\uffdf\140\uffdf\141\uffdf\142\uffdf\143\uffdf\144" +
    "\uffdf\145\uffdf\146\uffdf\147\uffdf\150\uffdf\151\uffdf\152\uffdf" +
    "\153\uffdf\154\uffdf\155\uffdf\156\uffdf\157\uffdf\160\uffdf\161" +
    "\uffdf\162\uffdf\163\uffdf\001\002\000\206\016\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\040\uffe0\046\uffe0\047\uffe0\075" +
    "\uffe0\076\uffe0\077\uffe0\102\uffe0\103\uffe0\104\uffe0\115\uffe0" +
    "\116\uffe0\117\uffe0\120\uffe0\121\uffe0\122\uffe0\123\uffe0\124" +
    "\uffe0\125\uffe0\126\uffe0\127\uffe0\130\uffe0\131\uffe0\132\uffe0" +
    "\133\uffe0\134\uffe0\135\uffe0\136\uffe0\137\uffe0\140\uffe0\141" +
    "\uffe0\142\uffe0\143\uffe0\144\uffe0\145\uffe0\146\uffe0\147\uffe0" +
    "\150\uffe0\151\uffe0\152\uffe0\153\uffe0\154\uffe0\155\uffe0\156" +
    "\uffe0\157\uffe0\160\uffe0\161\uffe0\162\uffe0\163\uffe0\001\002" +
    "\000\206\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\046\uffdd\047\uffdd\075\uffdd\076\uffdd\077\uffdd\102\uffdd" +
    "\103\uffdd\104\uffdd\115\uffdd\116\uffdd\117\uffdd\120\uffdd\121" +
    "\uffdd\122\uffdd\123\uffdd\124\uffdd\125\uffdd\126\uffdd\127\uffdd" +
    "\130\uffdd\131\uffdd\132\uffdd\133\uffdd\134\uffdd\135\uffdd\136" +
    "\uffdd\137\uffdd\140\uffdd\141\uffdd\142\uffdd\143\uffdd\144\uffdd" +
    "\145\uffdd\146\uffdd\147\uffdd\150\uffdd\151\uffdd\152\uffdd\153" +
    "\uffdd\154\uffdd\155\uffdd\156\uffdd\157\uffdd\160\uffdd\161\uffdd" +
    "\162\uffdd\163\uffdd\001\002\000\206\016\uffde\017\uffde\020" +
    "\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035" +
    "\uffde\036\uffde\037\uffde\040\uffde\046\uffde\047\uffde\075\uffde" +
    "\076\uffde\077\uffde\102\uffde\103\uffde\104\uffde\115\uffde\116" +
    "\uffde\117\uffde\120\uffde\121\uffde\122\uffde\123\uffde\124\uffde" +
    "\125\uffde\126\uffde\127\uffde\130\uffde\131\uffde\132\uffde\133" +
    "\uffde\134\uffde\135\uffde\136\uffde\137\uffde\140\uffde\141\uffde" +
    "\142\uffde\143\uffde\144\uffde\145\uffde\146\uffde\147\uffde\150" +
    "\uffde\151\uffde\152\uffde\153\uffde\154\uffde\155\uffde\156\uffde" +
    "\157\uffde\160\uffde\161\uffde\162\uffde\163\uffde\001\002\000" +
    "\004\014\u0176\001\002\000\010\046\251\047\246\160\250" +
    "\001\002\000\004\066\u0170\001\002\000\004\106\u0171\001" +
    "\002\000\020\046\231\047\223\075\242\160\313\161\235" +
    "\162\222\163\244\001\002\000\004\107\u0173\001\002\000" +
    "\020\046\231\047\223\075\242\160\313\161\235\162\222" +
    "\163\244\001\002\000\004\014\u0175\001\002\000\206\016" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\046\uffcf" +
    "\047\uffcf\075\uffcf\076\uffcf\077\uffcf\102\uffcf\103\uffcf\104" +
    "\uffcf\115\uffcf\116\uffcf\117\uffcf\120\uffcf\121\uffcf\122\uffcf" +
    "\123\uffcf\124\uffcf\125\uffcf\126\uffcf\127\uffcf\130\uffcf\131" +
    "\uffcf\132\uffcf\133\uffcf\134\uffcf\135\uffcf\136\uffcf\137\uffcf" +
    "\140\uffcf\141\uffcf\142\uffcf\143\uffcf\144\uffcf\145\uffcf\146" +
    "\uffcf\147\uffcf\150\uffcf\151\uffcf\152\uffcf\153\uffcf\154\uffcf" +
    "\155\uffcf\156\uffcf\157\uffcf\160\uffcf\161\uffcf\162\uffcf\163" +
    "\uffcf\001\002\000\206\016\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\046\uffb8\047\uffb8\075\uffb8\076\uffb8\077" +
    "\uffb8\102\uffb8\103\uffb8\104\uffb8\115\uffb8\116\uffb8\117\uffb8" +
    "\120\uffb8\121\uffb8\122\uffb8\123\uffb8\124\uffb8\125\uffb8\126" +
    "\uffb8\127\uffb8\130\uffb8\131\uffb8\132\uffb8\133\uffb8\134\uffb8" +
    "\135\uffb8\136\uffb8\137\uffb8\140\uffb8\141\uffb8\142\uffb8\143" +
    "\uffb8\144\uffb8\145\uffb8\146\uffb8\147\uffb8\150\uffb8\151\uffb8" +
    "\152\uffb8\153\uffb8\154\uffb8\155\uffb8\156\uffb8\157\uffb8\160" +
    "\uffb8\161\uffb8\162\uffb8\163\uffb8\001\002\000\024\075\271" +
    "\076\276\077\303\100\277\101\272\102\302\103\274\104" +
    "\300\160\275\001\002\000\026\011\uffcd\075\271\076\276" +
    "\077\303\100\277\101\272\102\302\103\274\104\300\160" +
    "\275\001\002\000\004\011\u017a\001\002\000\004\076\u017b" +
    "\001\002\000\004\065\u017c\001\002\000\010\046\251\047" +
    "\246\160\250\001\002\000\004\066\u017e\001\002\000\004" +
    "\014\u017f\001\002\000\206\016\uffd3\017\uffd3\020\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\046\uffd3\047\uffd3\075\uffd3\076\uffd3" +
    "\077\uffd3\102\uffd3\103\uffd3\104\uffd3\115\uffd3\116\uffd3\117" +
    "\uffd3\120\uffd3\121\uffd3\122\uffd3\123\uffd3\124\uffd3\125\uffd3" +
    "\126\uffd3\127\uffd3\130\uffd3\131\uffd3\132\uffd3\133\uffd3\134" +
    "\uffd3\135\uffd3\136\uffd3\137\uffd3\140\uffd3\141\uffd3\142\uffd3" +
    "\143\uffd3\144\uffd3\145\uffd3\146\uffd3\147\uffd3\150\uffd3\151" +
    "\uffd3\152\uffd3\153\uffd3\154\uffd3\155\uffd3\156\uffd3\157\uffd3" +
    "\160\uffd3\161\uffd3\162\uffd3\163\uffd3\001\002\000\010\014" +
    "\uffa4\066\uffa4\107\uffa4\001\002\000\004\160\306\001\002" +
    "\000\004\014\u0183\001\002\000\010\046\251\047\246\160" +
    "\250\001\002\000\004\014\u0185\001\002\000\020\046\231" +
    "\047\223\075\242\160\313\161\235\162\222\163\244\001" +
    "\002\000\004\066\u0187\001\002\000\004\010\u0188\001\002" +
    "\000\024\075\271\076\276\077\303\100\277\101\272\102" +
    "\302\103\274\104\300\160\275\001\002\000\026\011\uffcd" +
    "\075\271\076\276\077\303\100\277\101\272\102\302\103" +
    "\274\104\300\160\275\001\002\000\004\011\u018b\001\002" +
    "\000\206\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\046\uffd4\047\uffd4\075\uffd4\076\uffd4\077\uffd4\102\uffd4" +
    "\103\uffd4\104\uffd4\115\uffd4\116\uffd4\117\uffd4\120\uffd4\121" +
    "\uffd4\122\uffd4\123\uffd4\124\uffd4\125\uffd4\126\uffd4\127\uffd4" +
    "\130\uffd4\131\uffd4\132\uffd4\133\uffd4\134\uffd4\135\uffd4\136" +
    "\uffd4\137\uffd4\140\uffd4\141\uffd4\142\uffd4\143\uffd4\144\uffd4" +
    "\145\uffd4\146\uffd4\147\uffd4\150\uffd4\151\uffd4\152\uffd4\153" +
    "\uffd4\154\uffd4\155\uffd4\156\uffd4\157\uffd4\160\uffd4\161\uffd4" +
    "\162\uffd4\163\uffd4\001\002\000\020\046\231\047\223\075" +
    "\242\160\313\161\235\162\222\163\244\001\002\000\004" +
    "\014\u018e\001\002\000\004\011\u018f\001\002\000\006\011" +
    "\ufff5\111\ufff5\001\002\000\004\160\u0195\001\002\000\022" +
    "\046\231\047\223\065\u016e\075\242\160\313\161\235\162" +
    "\222\163\244\001\002\000\206\016\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\040\uffe1\046\uffe1\047\uffe1\075\uffe1\076" +
    "\uffe1\077\uffe1\102\uffe1\103\uffe1\104\uffe1\115\uffe1\116\uffe1" +
    "\117\uffe1\120\uffe1\121\uffe1\122\uffe1\123\uffe1\124\uffe1\125" +
    "\uffe1\126\uffe1\127\uffe1\130\uffe1\131\uffe1\132\uffe1\133\uffe1" +
    "\134\uffe1\135\uffe1\136\uffe1\137\uffe1\140\uffe1\141\uffe1\142" +
    "\uffe1\143\uffe1\144\uffe1\145\uffe1\146\uffe1\147\uffe1\150\uffe1" +
    "\151\uffe1\152\uffe1\153\uffe1\154\uffe1\155\uffe1\156\uffe1\157" +
    "\uffe1\160\uffe1\161\uffe1\162\uffe1\163\uffe1\001\002\000\206" +
    "\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\046" +
    "\uffe2\047\uffe2\075\uffe2\076\uffe2\077\uffe2\102\uffe2\103\uffe2" +
    "\104\uffe2\115\uffe2\116\uffe2\117\uffe2\120\uffe2\121\uffe2\122" +
    "\uffe2\123\uffe2\124\uffe2\125\uffe2\126\uffe2\127\uffe2\130\uffe2" +
    "\131\uffe2\132\uffe2\133\uffe2\134\uffe2\135\uffe2\136\uffe2\137" +
    "\uffe2\140\uffe2\141\uffe2\142\uffe2\143\uffe2\144\uffe2\145\uffe2" +
    "\146\uffe2\147\uffe2\150\uffe2\151\uffe2\152\uffe2\153\uffe2\154" +
    "\uffe2\155\uffe2\156\uffe2\157\uffe2\160\uffe2\161\uffe2\162\uffe2" +
    "\163\uffe2\001\002\000\206\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036" +
    "\uffe6\037\uffe6\040\uffe6\046\uffe6\047\uffe6\075\uffe6\076\uffe6" +
    "\077\uffe6\102\uffe6\103\uffe6\104\uffe6\115\uffe6\116\uffe6\117" +
    "\uffe6\120\uffe6\121\uffe6\122\uffe6\123\uffe6\124\uffe6\125\uffe6" +
    "\126\uffe6\127\uffe6\130\uffe6\131\uffe6\132\uffe6\133\uffe6\134" +
    "\uffe6\135\uffe6\136\uffe6\137\uffe6\140\uffe6\141\uffe6\142\uffe6" +
    "\143\uffe6\144\uffe6\145\uffe6\146\uffe6\147\uffe6\150\uffe6\151" +
    "\uffe6\152\uffe6\153\uffe6\154\uffe6\155\uffe6\156\uffe6\157\uffe6" +
    "\160\uffe6\161\uffe6\162\uffe6\163\uffe6\001\002\000\054\014" +
    "\uff9d\045\u0196\050\260\051\261\052\263\053\257\054\255" +
    "\055\256\056\253\057\264\060\262\061\342\062\332\063" +
    "\334\064\327\065\341\067\326\070\340\071\330\072\324" +
    "\073\335\001\002\000\022\046\231\047\223\065\u016e\075" +
    "\242\160\313\161\235\162\222\163\244\001\002\000\206" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\046" +
    "\uffe5\047\uffe5\075\uffe5\076\uffe5\077\uffe5\102\uffe5\103\uffe5" +
    "\104\uffe5\115\uffe5\116\uffe5\117\uffe5\120\uffe5\121\uffe5\122" +
    "\uffe5\123\uffe5\124\uffe5\125\uffe5\126\uffe5\127\uffe5\130\uffe5" +
    "\131\uffe5\132\uffe5\133\uffe5\134\uffe5\135\uffe5\136\uffe5\137" +
    "\uffe5\140\uffe5\141\uffe5\142\uffe5\143\uffe5\144\uffe5\145\uffe5" +
    "\146\uffe5\147\uffe5\150\uffe5\151\uffe5\152\uffe5\153\uffe5\154" +
    "\uffe5\155\uffe5\156\uffe5\157\uffe5\160\uffe5\161\uffe5\162\uffe5" +
    "\163\uffe5\001\002\000\206\016\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\040\uffe4\046\uffe4\047\uffe4\075\uffe4\076\uffe4" +
    "\077\uffe4\102\uffe4\103\uffe4\104\uffe4\115\uffe4\116\uffe4\117" +
    "\uffe4\120\uffe4\121\uffe4\122\uffe4\123\uffe4\124\uffe4\125\uffe4" +
    "\126\uffe4\127\uffe4\130\uffe4\131\uffe4\132\uffe4\133\uffe4\134" +
    "\uffe4\135\uffe4\136\uffe4\137\uffe4\140\uffe4\141\uffe4\142\uffe4" +
    "\143\uffe4\144\uffe4\145\uffe4\146\uffe4\147\uffe4\150\uffe4\151" +
    "\uffe4\152\uffe4\153\uffe4\154\uffe4\155\uffe4\156\uffe4\157\uffe4" +
    "\160\uffe4\161\uffe4\162\uffe4\163\uffe4\001\002\000\004\160" +
    "\u019a\001\002\000\006\015\176\066\ufff2\001\002\000\004" +
    "\066\ufff3\001\002\000\006\011\ufff4\111\ufff4\001\002\000" +
    "\004\011\ufffb\001\002\000\010\043\127\044\130\160\uffab" +
    "\001\002\000\004\160\u01a0\001\002\000\006\014\u01a3\045" +
    "\u01a1\001\002\000\020\046\231\047\223\075\242\160\313" +
    "\161\235\162\222\163\244\001\002\000\164\011\uffb3\016" +
    "\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3" +
    "\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033" +
    "\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\110\uffb3" +
    "\111\uffb3\115\uffb3\116\uffb3\117\uffb3\120\uffb3\121\uffb3\122" +
    "\uffb3\123\uffb3\124\uffb3\125\uffb3\126\uffb3\127\uffb3\130\uffb3" +
    "\131\uffb3\132\uffb3\133\uffb3\134\uffb3\135\uffb3\136\uffb3\137" +
    "\uffb3\140\uffb3\141\uffb3\142\uffb3\143\uffb3\144\uffb3\145\uffb3" +
    "\146\uffb3\147\uffb3\150\uffb3\151\uffb3\152\uffb3\153\uffb3\154" +
    "\uffb3\155\uffb3\156\uffb3\157\uffb3\001\002\000\164\011\uffb2" +
    "\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024" +
    "\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\110" +
    "\uffb2\111\uffb2\115\uffb2\116\uffb2\117\uffb2\120\uffb2\121\uffb2" +
    "\122\uffb2\123\uffb2\124\uffb2\125\uffb2\126\uffb2\127\uffb2\130" +
    "\uffb2\131\uffb2\132\uffb2\133\uffb2\134\uffb2\135\uffb2\136\uffb2" +
    "\137\uffb2\140\uffb2\141\uffb2\142\uffb2\143\uffb2\144\uffb2\145" +
    "\uffb2\146\uffb2\147\uffb2\150\uffb2\151\uffb2\152\uffb2\153\uffb2" +
    "\154\uffb2\155\uffb2\156\uffb2\157\uffb2\001\002\000\004\014" +
    "\u01a5\001\002\000\164\011\uffb1\016\uffb1\017\uffb1\020\uffb1" +
    "\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027" +
    "\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\110\uffb1\111\uffb1\115\uffb1\116" +
    "\uffb1\117\uffb1\120\uffb1\121\uffb1\122\uffb1\123\uffb1\124\uffb1" +
    "\125\uffb1\126\uffb1\127\uffb1\130\uffb1\131\uffb1\132\uffb1\133" +
    "\uffb1\134\uffb1\135\uffb1\136\uffb1\137\uffb1\140\uffb1\141\uffb1" +
    "\142\uffb1\143\uffb1\144\uffb1\145\uffb1\146\uffb1\147\uffb1\150" +
    "\uffb1\151\uffb1\152\uffb1\153\uffb1\154\uffb1\155\uffb1\156\uffb1" +
    "\157\uffb1\001\002\000\004\014\uffb0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a4\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\063" +
    "\005\051\006\043\007\065\011\075\014\100\016\022\021" +
    "\042\067\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\u019d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\u019c" +
    "\006\043\007\065\014\100\016\022\021\042\067\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\004\145\005\051\006\043\007\065\011\075" +
    "\014\100\016\022\021\042\067\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\144\014\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\120\007\065" +
    "\014\100\067\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\123\001\001\000\004\017\125\001\001\000\002\001" +
    "\001\000\004\020\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\133\070\134\001\001\000\004\017\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\133\070\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\140" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\165\005\051\006\043\007\065\011" +
    "\075\014\100\016\022\021\042\067\106\001\001\000\002" +
    "\001\001\000\004\140\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\173\001\001" +
    "\000\002\001\001\000\004\075\176\001\001\000\004\016" +
    "\u0198\001\001\000\002\001\001\000\004\076\201\001\001" +
    "\000\002\001\001\000\004\077\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\013\237" +
    "\016\226\026\214\046\231\050\235\057\227\061\217\062" +
    "\240\073\224\100\216\131\225\134\233\141\232\001\001" +
    "\000\002\001\001\000\012\034\324\105\335\130\330\136" +
    "\336\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\253\036\u017f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\u0163\001\001\000\002\001\001\000\006\034" +
    "\253\036\u0162\001\001\000\002\001\001\000\034\013\237" +
    "\016\226\026\214\046\231\050\235\057\227\061\217\062" +
    "\240\073\224\100\u0161\131\225\134\233\141\232\001\001" +
    "\000\002\001\001\000\006\031\366\035\u0160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\106\u014a\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\246\001\001\000\006\034\253" +
    "\036\u0148\001\001\000\002\001\001\000\006\034\253\036" +
    "\265\001\001\000\006\034\253\036\251\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\264\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\051\300\071\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\053\u0129\054\u0124\055\u0126\103\u0127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\051\317\056\u010c\071\272\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\060\306" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\310\001\001\000\002\001\001\000\012\026\313\046\231" +
    "\131\225\134\233\001\001\000\012\034\324\105\335\130" +
    "\330\136\336\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\051\316\071\272\001\001\000\010\051\317\056" +
    "\320\071\272\001\001\000\010\051\317\056\322\071\272" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\u0109\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\362\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\132\343\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\133" +
    "\350\001\001\000\002\001\001\000\004\132\351\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\133\354\001\001\000\002\001\001" +
    "\000\010\034\324\130\330\136\356\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\366\035\u0104\001\001" +
    "\000\004\135\364\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\366\035\375\001\001\000\002\001\001" +
    "\000\004\027\u0102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\135\u0107\001\001\000\006\031\366\035\u0108" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\026" +
    "\u010b\046\231\131\225\134\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\u010f\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\051\u0112" +
    "\071\272\001\001\000\010\051\317\056\u0113\071\272\001" +
    "\001\000\002\001\001\000\004\072\u0115\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\051\u0118\071\272\001" +
    "\001\000\010\051\317\056\u0119\071\272\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\u011d\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\051\u0120\071\272\001\001\000\010\051\317\056\u0121\071" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\026\u012d\046\231\131" +
    "\225\134\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\u012a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\u012f\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\026\u0132\046\231\131\225\134\233\001\001" +
    "\000\002\001\001\000\012\026\u0134\046\231\131\225\134" +
    "\233\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\053\u0129\055\u0126\103\u0138\001\001\000" +
    "\002\001\001\000\006\051\u013a\071\272\001\001\000\010" +
    "\051\317\056\u013b\071\272\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\u013f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\026\u0146\046\231\131\225\134\233\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\034\u014c\120\u014e\130\u014d\001" +
    "\001\000\004\032\u0152\001\001\000\004\027\u0151\001\001" +
    "\000\002\001\001\000\004\132\u0150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\u0154" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\051" +
    "\u0157\071\272\001\001\000\010\051\317\056\u0158\071\272" +
    "\001\001\000\002\001\001\000\004\063\u015b\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\051\u015d\071\272" +
    "\001\001\000\010\051\317\056\u015e\071\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\u0164\001\001\000" +
    "\002\001\001\000\004\142\u0166\001\001\000\002\001\001" +
    "\000\020\026\u016c\046\231\064\u016a\102\u016b\131\225\134" +
    "\233\143\u0169\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\u016e\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\026\u0171\046\231\131\225\134\233\001\001\000" +
    "\002\001\001\000\012\026\u0173\046\231\131\225\134\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\051\u0177\071\272\001\001\000\010\051\317" +
    "\056\u0178\071\272\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\u017c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\060\u0181\001\001\000\002\001\001\000\004" +
    "\032\u0183\001\001\000\002\001\001\000\012\026\u0185\046" +
    "\231\131\225\134\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\051\u0188\071\272\001\001\000\010\051" +
    "\317\056\u0189\071\272\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\026\u018c\046\231\131\225\134\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\026\u016c\046\231\064\u0191\102" +
    "\u0192\104\u0193\131\225\134\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\034\324\130" +
    "\330\136\356\001\001\000\020\026\u016c\046\231\064\u0191" +
    "\102\u0192\104\u0196\131\225\134\233\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\075\u019a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u019e\001\001\000\002\001\001\000\006" +
    "\023\u01a3\047\u01a1\001\001\000\012\026\u01a5\046\231\131" +
    "\225\134\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static LinkedList<TError> TablaES = new LinkedList<TError>(); 

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        if(s.value != null){
            String lexema = s.value.toString();
            int fila = s.left;
            int columna = s.right;
            TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
            TablaES.add(datos);
            System.out.println("------ Recuperacion exitosa ------");
            System.out.println("\t\tLexema: "+lexema);
        }

        // System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        // System.out.println("\t\tLexema: "+lexema);
        // System.out.println("\t\tFila: "+fila);
        // System.out.println("\t\tColumna: "+columna);        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        if(s.value != null){
            String lexema = s.value.toString();
            int fila = s.left;
            int columna = s.right;
            TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
            TablaES.add(datos);
            System.out.println("------ Error Sintactico irrecuperable ------");
            System.out.println("\t\tLexema: "+lexema);
        }
        

        // System.out.println("\t\tFila: "+fila);
        // System.out.println("\t\tColumna: "+columna);


     
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico$actions {



  private final analisis_sintactico parser;

  /** Constructor */
  CUP$analisis_sintactico$actions(analisis_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action_part00000000(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico$parser.done_parsing();
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= pragma solidity techo numero numero punto_coma contract ident O_Parent_L BODY_CONTRACT C_Parent_L INICIO_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO_S ::= contract ident O_Parent_L BODY_CONTRACT C_Parent_L INICIO_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_S",94, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_S",94, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BODY_CONTRACT ::= EN BODY_CONTRACT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BODY_CONTRACT ::= BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BODY_CONTRACT_P ::= VAR_CONTRACT BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BODY_CONTRACT_P ::= BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BODY_CONTRACT_PP ::= STRUCTURE BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BODY_CONTRACT_PP ::= BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BODY_CONTRACT_PPP ::= FUNC BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BODY_CONTRACT_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNC ::= functionSoli ident O_Parent_R TIPO ident FUNC_PARAM C_Parent_R FUNC_MOD FUNC_RETURNS O_Parent_L CUERPO_M returnSoli EXP punto_coma C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNC ::= functionSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNC_PARAM ::= coma TIPO ident FUNC_PARAM 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNC_PARAM ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNC_MOD ::= payableSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNC_MOD ::= privateSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNC_MOD ::= publicSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNC_MOD ::= internalSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNC_MOD ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNC_RETURNS ::= returns O_Parent_R TIPO ident C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_RETURNS",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNC_RETURNS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_RETURNS",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO_M ::= CUERPO_MA CUERPO_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO_M ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPO_MA ::= TIPO VAR_ARR VAR_ACCESS ident CUERPO_ASSIGN_F 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_MA",95, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPO_MA ::= CUERPO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_MA",95, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CUERPO ::= ident igual CUERPO_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPO ::= ident punto ident igual CUERPO_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPO ::= EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPO ::= STRU 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPO_P ::= ASSIGN_NOT_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_P",66, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUERPO_P ::= STRU_IF_LINE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_P",66, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CUERPO_ASSIGN_F ::= igual CUERPO_ASSIGN_FP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_F",96, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CUERPO_ASSIGN_F ::= punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_F",96, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CUERPO_ASSIGN_FP ::= ASSIGN_NOT_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_FP",97, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUERPO_ASSIGN_FP ::= STRU_IF_LINE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN_FP",97, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // STRUCTURE ::= structSoli ident O_Parent_L TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // STRUCTURE_VAR ::= TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // STRUCTURE_VAR ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // STRU ::= STRU_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // STRU ::= STRU_FOR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STRU ::= STRU_DO_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STRU ::= STRU_IF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STRU_WHILE ::= whileSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_WHILE",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STRU_FOR ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_FOR",45, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // STRU_DO_WHILE ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_DO_WHILE",47, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STRU_IF ::= ifSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L STRU_ELSE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF",48, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STRU_ELSE ::= elseSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STRU_ELSE ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STRU_IF_LINE ::= O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP punto_punto EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_LINE",50, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BODY_SENT_M ::= BODY_SENT BODY_SENT_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BODY_SENT_M ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BODY_SENT ::= ident BODY_SENT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BODY_SENT ::= thisSoli punto ident igual EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BODY_SENT ::= whileSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BODY_SENT ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BODY_SENT ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BODY_SENT ::= STRU_IF_ELSE_IN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BODY_SENT ::= returnSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BODY_SENT ::= breakSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BODY_SENT ::= continueSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BODY_SENT_P ::= punto ident BODY_SENT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BODY_SENT_P ::= BODY_SENT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BODY_SENT_PP ::= BODY_ASSIGN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BODY_SENT_PP ::= BODY_FUN_CALL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BODY_SENT_PP ::= igual O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP punto_punto EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // STRU_IF_ELSE_IN ::= ifSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L STRU_ELSE_IN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_ELSE_IN",55, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // STRU_ELSE_IN ::= elseSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // STRU_ELSE_IN ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BODY_ASSIGN ::= igual EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_ASSIGN",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BODY_FUN_CALL ::= O_Parent_R FUNC_CALL_PARAMS C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_FUN_CALL",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FOR_VAR ::= ident igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FOR_VAR",46, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ASSIGN_NOT_VAR ::= EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ASSIGN_NOT_VAR",64, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EN ::= enumSoli ident O_Parent_L ident EN_IDENT C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EN ::= enumSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EN_IDENT ::= coma ident EN_IDENT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EN_IDENT ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VAR_CONTRACT ::= TIPO VAR_ARR VAR_ACCESS ident VAR_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VAR_CONTRACT_P ::= punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VAR_CONTRACT_P ::= VAR_CONTRACT_C punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VAR_CONTRACT_C ::= igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_C",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VAR_ARR ::= O_Parent_C C_Parent_C 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VAR_ARR ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VAR_ACCESS ::= publicSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VAR_ACCESS ::= privateSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VAR_ACCESS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= ident EXP_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= thisSoli EXP_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= BODY_LIT_TF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= ARIT_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= BOOL_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BOOL_GATE ::= trueSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BOOL_GATE",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BOOL_GATE ::= falseSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BOOL_GATE",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ARIT_GATE ::= numero OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARIT_GATE",90, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP_P ::= punto ident EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P",67, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP_P ::= EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P",67, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP_P_S ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP_P_S ::= OP_EXCL OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP_P_S ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP_P_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP_PP ::= punto ident EXP_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PP",68, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP_PPP ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP_PPP ::= OP_EXCL OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP_PPP ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FUNC_CALL_CASE ::= ident FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FUNC_CALL_CASE ::= thisSoli punto ident FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FUNC_CALL_CASE ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FUNC_CALL_CASE_P ::= coma FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE_P",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // FUNC_CALL_CASE_P ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE_P",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OP_ARIT ::= numero OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OP_ARIT ::= ident OP_ARIT_Parent OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OP_ARIT ::= thisSoli punto ident OP_ARIT_Parent OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OP_ARIT_P ::= OP OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OP_ARIT_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OP_ARIT_Parent ::= punto ident 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_Parent",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OP_ARIT_Parent ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_Parent",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OP ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OP ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OP ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OP ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OP ::= O_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OP ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OP ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OP ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OP ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OP ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OP ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OP_EXCL ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OP_EXCL ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OP_EXCL ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OP_EXCL ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OP_EXCL ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OP_EXCL ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OP_EXCL ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OP_EXCL ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OP_EXCL ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OP_BOOL ::= trueSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OP_BOOL ::= falseSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OP_BOOL ::= ident OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OP_BOOL_P ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OP_BOOL_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OP_OP_BOOL ::= igual_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OP_OP_BOOL ::= mayor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OP_OP_BOOL ::= mayor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OP_OP_BOOL ::= menor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OP_OP_BOOL ::= menor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OP_OP_BOOL ::= diferente 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OP_OP_BOOL ::= op_or 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OP_OP_BOOL ::= op_and 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OP_OP_BOOL ::= negacion 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // BODY_LIT_TF ::= numero_HEX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // BODY_LIT_TF ::= stringSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // TIPO ::= bool 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // TIPO ::= byteSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TIPO ::= bytes 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TIPO ::= string 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // TIPO ::= uint 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // TIPO ::= uint_O 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // TIPO ::= uint_DS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // TIPO ::= uint_TD 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // TIPO ::= uint_SC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // TIPO ::= uint_CVO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // TIPO ::= uint_DCS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // TIPO ::= intSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // TIPO ::= int_O 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // TIPO ::= int_DS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // TIPO ::= int_TD 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // TIPO ::= int_SC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // TIPO ::= int_CVO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // TIPO ::= int_DCS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // TIPO ::= address 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // TIPO ::= address_payable 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // TIPO ::= charss 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // TIPO ::= ufixedSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // TIPO ::= B_I 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // TIPO ::= B_II 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // TIPO ::= B_III 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // TIPO ::= B_IV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // TIPO ::= B_V 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // TIPO ::= B_VI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // TIPO ::= B_VII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // TIPO ::= B_IIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // TIPO ::= B_IX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // TIPO ::= B_X 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // TIPO ::= B_XI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // TIPO ::= B_XII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // TIPO ::= B_XIII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // TIPO ::= B_XIV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // TIPO ::= B_XV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // TIPO ::= B_XVI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // TIPO ::= B_XVII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // TIPO ::= B_XIIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // TIPO ::= B_XIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // TIPO ::= B_XX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // TIPO ::= B_XXI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // TIPO ::= B_XXII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // TIPO ::= B_XXIII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // TIPO ::= B_XXIV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // TIPO ::= B_XXV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // TIPO ::= B_XXVI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // TIPO ::= B_XXVII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // TIPO ::= B_XXIIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // TIPO ::= B_XXIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // TIPO ::= B_XXX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // TIPO ::= B_XXXI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // TIPO ::= B_XXXII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$analisis_sintactico$do_action_part00000000(
                               CUP$analisis_sintactico$act_num,
                               CUP$analisis_sintactico$parser,
                               CUP$analisis_sintactico$stack,
                               CUP$analisis_sintactico$top);
    }
}

}
