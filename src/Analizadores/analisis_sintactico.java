
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symb.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\325\000\002\002\004\000\002\002\016\000\002\002" +
    "\005\000\002\140\010\000\002\140\005\000\002\140\002" +
    "\000\002\004\004\000\002\004\003\000\002\005\004\000" +
    "\002\005\003\000\002\006\004\000\002\006\003\000\002" +
    "\007\004\000\002\007\002\000\002\014\022\000\002\014" +
    "\005\000\002\075\006\000\002\075\002\000\002\076\003" +
    "\000\002\076\003\000\002\076\003\000\002\076\003\000" +
    "\002\076\002\000\002\077\007\000\002\077\002\000\002" +
    "\100\004\000\002\100\002\000\002\073\005\000\002\073" +
    "\007\000\002\073\004\000\002\073\003\000\002\104\003" +
    "\000\002\104\003\000\002\074\004\000\002\074\002\000" +
    "\002\067\014\000\002\067\005\000\002\070\010\000\002" +
    "\070\002\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\050\012\000\002\050\005" +
    "\000\002\057\016\000\002\057\005\000\002\061\014\000" +
    "\002\061\005\000\002\062\013\000\002\062\005\000\002" +
    "\063\007\000\002\063\005\000\002\063\002\000\002\064" +
    "\012\000\002\056\004\000\002\056\002\000\002\051\004" +
    "\000\002\051\010\000\002\051\012\000\002\051\016\000" +
    "\002\051\014\000\002\051\003\000\002\051\004\000\002" +
    "\051\004\000\002\051\004\000\002\054\005\000\002\054" +
    "\003\000\002\103\003\000\002\103\003\000\002\103\013" +
    "\000\002\071\013\000\002\072\007\000\002\072\002\000" +
    "\002\053\005\000\002\055\006\000\002\060\005\000\002" +
    "\102\004\000\002\011\010\000\002\011\005\000\002\015" +
    "\005\000\002\015\002\000\002\021\007\000\002\021\005" +
    "\000\002\047\003\000\002\047\004\000\002\023\004\000" +
    "\002\017\004\000\002\017\002\000\002\020\003\000\002" +
    "\020\003\000\002\020\002\000\002\026\004\000\002\026" +
    "\004\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\131\004\000\002\131\004\000\002\134\004\000" +
    "\002\105\005\000\002\105\003\000\002\136\004\000\002" +
    "\136\004\000\002\136\004\000\002\136\002\000\002\106" +
    "\005\000\002\120\004\000\002\120\004\000\002\120\004" +
    "\000\002\120\002\000\002\132\004\000\002\132\006\000" +
    "\002\132\003\000\002\133\004\000\002\133\003\000\002" +
    "\027\004\000\002\027\005\000\002\027\007\000\002\035" +
    "\004\000\002\035\002\000\002\135\004\000\002\135\002" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\130\003\000\002\130\003" +
    "\000\002\130\003\000\002\130\003\000\002\130\003\000" +
    "\002\130\003\000\002\130\003\000\002\130\003\000\002" +
    "\130\003\000\002\032\004\000\002\032\004\000\002\032" +
    "\004\000\002\036\004\000\002\036\002\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\046\003\000\002\046" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01ae\000\004\004\004\001\002\000\006\003\007\005" +
    "\010\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\004\014\u01b0\001\002\000\004\006\011\001" +
    "\002\000\004\161\012\001\002\000\004\161\013\001\002" +
    "\000\004\014\014\001\002\000\004\007\015\001\002\000" +
    "\004\160\016\001\002\000\004\010\017\001\002\000\166" +
    "\011\ufff4\013\075\016\021\017\023\020\037\021\105\022" +
    "\064\023\117\024\112\025\035\026\106\027\107\030\030" +
    "\031\032\032\076\033\066\034\115\035\073\036\077\037" +
    "\111\040\067\110\104\111\056\115\063\116\041\117\113" +
    "\120\071\121\062\122\114\123\047\124\054\125\043\126" +
    "\051\127\103\130\046\131\052\132\072\133\033\134\026" +
    "\135\020\136\060\137\116\140\074\141\120\142\121\143" +
    "\057\144\042\145\050\146\034\147\040\150\027\151\031" +
    "\152\101\153\022\154\036\155\025\156\061\157\055\001" +
    "\002\000\014\003\uff3f\041\uff3f\043\uff3f\044\uff3f\160\uff3f" +
    "\001\002\000\014\003\uff62\041\uff62\043\uff62\044\uff62\160" +
    "\uff62\001\002\000\014\003\uff31\041\uff31\043\uff31\044\uff31" +
    "\160\uff31\001\002\000\014\003\uff61\041\uff61\043\uff61\044" +
    "\uff61\160\uff61\001\002\000\014\003\u01a5\041\127\043\uffa9" +
    "\044\uffa9\160\uffa9\001\002\000\014\003\uff2f\041\uff2f\043" +
    "\uff2f\044\uff2f\160\uff2f\001\002\000\014\003\uff40\041\uff40" +
    "\043\uff40\044\uff40\160\uff40\001\002\000\014\003\uff34\041" +
    "\uff34\043\uff34\044\uff34\160\uff34\001\002\000\014\003\uff57" +
    "\041\uff57\043\uff57\044\uff57\160\uff57\001\002\000\014\003" +
    "\uff33\041\uff33\043\uff33\044\uff33\160\uff33\001\002\000\014" +
    "\003\uff56\041\uff56\043\uff56\044\uff56\160\uff56\001\002\000" +
    "\014\003\uff41\041\uff41\043\uff41\044\uff41\160\uff41\001\002" +
    "\000\014\003\uff36\041\uff36\043\uff36\044\uff36\160\uff36\001" +
    "\002\000\014\003\uff5a\041\uff5a\043\uff5a\044\uff5a\160\uff5a" +
    "\001\002\000\014\003\uff30\041\uff30\043\uff30\044\uff30\160" +
    "\uff30\001\002\000\014\003\uff60\041\uff60\043\uff60\044\uff60" +
    "\160\uff60\001\002\000\014\003\uff35\041\uff35\043\uff35\044" +
    "\uff35\160\uff35\001\002\000\014\003\uff5f\041\uff5f\043\uff5f" +
    "\044\uff5f\160\uff5f\001\002\000\014\003\uff38\041\uff38\043" +
    "\uff38\044\uff38\160\uff38\001\002\000\014\003\uff47\041\uff47" +
    "\043\uff47\044\uff47\160\uff47\001\002\000\164\011\ufff4\016" +
    "\021\017\023\020\037\021\105\022\064\023\117\024\112" +
    "\025\035\026\106\027\107\030\030\031\032\032\076\033" +
    "\066\034\115\035\073\036\077\037\111\040\067\110\104" +
    "\111\056\115\063\116\041\117\113\120\071\121\062\122" +
    "\114\123\047\124\054\125\043\126\051\127\103\130\046" +
    "\131\052\132\072\133\033\134\026\135\020\136\060\137" +
    "\116\140\074\141\120\142\121\143\057\144\042\145\050" +
    "\146\034\147\040\150\027\151\031\152\101\153\022\154" +
    "\036\155\025\156\061\157\055\001\002\000\004\011\ufff8" +
    "\001\002\000\014\003\uff44\041\uff44\043\uff44\044\uff44\160" +
    "\uff44\001\002\000\014\003\uff49\041\uff49\043\uff49\044\uff49" +
    "\160\uff49\001\002\000\014\003\uff37\041\uff37\043\uff37\044" +
    "\uff37\160\uff37\001\002\000\014\003\uff46\041\uff46\043\uff46" +
    "\044\uff46\160\uff46\001\002\000\014\003\uff43\041\uff43\043" +
    "\uff43\044\uff43\160\uff43\001\002\000\004\011\ufffa\001\002" +
    "\000\014\003\uff48\041\uff48\043\uff48\044\uff48\160\uff48\001" +
    "\002\000\014\003\uff2d\041\uff2d\043\uff2d\044\uff2d\160\uff2d" +
    "\001\002\000\006\003\176\160\177\001\002\000\014\003" +
    "\uff39\041\uff39\043\uff39\044\uff39\160\uff39\001\002\000\014" +
    "\003\uff3e\041\uff3e\043\uff3e\044\uff3e\160\uff3e\001\002\000" +
    "\014\003\uff2e\041\uff2e\043\uff2e\044\uff2e\160\uff2e\001\002" +
    "\000\014\003\uff4b\041\uff4b\043\uff4b\044\uff4b\160\uff4b\001" +
    "\002\000\014\003\uff4e\041\uff4e\043\uff4e\044\uff4e\160\uff4e" +
    "\001\002\000\014\003\uff5d\041\uff5d\043\uff5d\044\uff5d\160" +
    "\uff5d\001\002\000\004\011\164\001\002\000\014\003\uff54" +
    "\041\uff54\043\uff54\044\uff54\160\uff54\001\002\000\014\003" +
    "\uff4f\041\uff4f\043\uff4f\044\uff4f\160\uff4f\001\002\000\004" +
    "\011\ufff6\001\002\000\014\003\uff4c\041\uff4c\043\uff4c\044" +
    "\uff4c\160\uff4c\001\002\000\014\003\uff42\041\uff42\043\uff42" +
    "\044\uff42\160\uff42\001\002\000\014\003\uff52\041\uff52\043" +
    "\uff52\044\uff52\160\uff52\001\002\000\014\003\uff3c\041\uff3c" +
    "\043\uff3c\044\uff3c\160\uff3c\001\002\000\006\003\152\160" +
    "\153\001\002\000\014\003\uff55\041\uff55\043\uff55\044\uff55" +
    "\160\uff55\001\002\000\014\003\uff51\041\uff51\043\uff51\044" +
    "\uff51\160\uff51\001\002\000\166\011\ufff4\013\075\016\021" +
    "\017\023\020\037\021\105\022\064\023\117\024\112\025" +
    "\035\026\106\027\107\030\030\031\032\032\076\033\066" +
    "\034\115\035\073\036\077\037\111\040\067\110\104\111" +
    "\056\115\063\116\041\117\113\120\071\121\062\122\114" +
    "\123\047\124\054\125\043\126\051\127\103\130\046\131" +
    "\052\132\072\133\033\134\026\135\020\136\060\137\116" +
    "\140\074\141\120\142\121\143\057\144\042\145\050\146" +
    "\034\147\040\150\027\151\031\152\101\153\022\154\036" +
    "\155\025\156\061\157\055\001\002\000\014\003\uff32\041" +
    "\uff32\043\uff32\044\uff32\160\uff32\001\002\000\006\011\ufff4" +
    "\111\056\001\002\000\014\003\uff45\041\uff45\043\uff45\044" +
    "\uff45\160\uff45\001\002\000\006\003\123\160\124\001\002" +
    "\000\014\003\uff5e\041\uff5e\043\uff5e\044\uff5e\160\uff5e\001" +
    "\002\000\014\003\uff59\041\uff59\043\uff59\044\uff59\160\uff59" +
    "\001\002\000\014\003\uff58\041\uff58\043\uff58\044\uff58\160" +
    "\uff58\001\002\000\010\011\ufff4\110\104\111\056\001\002" +
    "\000\014\003\uff50\041\uff50\043\uff50\044\uff50\160\uff50\001" +
    "\002\000\014\003\uff5b\041\uff5b\043\uff5b\044\uff5b\160\uff5b" +
    "\001\002\000\014\003\uff4d\041\uff4d\043\uff4d\044\uff4d\160" +
    "\uff4d\001\002\000\014\003\uff4a\041\uff4a\043\uff4a\044\uff4a" +
    "\160\uff4a\001\002\000\014\003\uff53\041\uff53\043\uff53\044" +
    "\uff53\160\uff53\001\002\000\014\003\uff3d\041\uff3d\043\uff3d" +
    "\044\uff3d\160\uff3d\001\002\000\014\003\uff5c\041\uff5c\043" +
    "\uff5c\044\uff5c\160\uff5c\001\002\000\014\003\uff3b\041\uff3b" +
    "\043\uff3b\044\uff3b\160\uff3b\001\002\000\014\003\uff3a\041" +
    "\uff3a\043\uff3a\044\uff3a\160\uff3a\001\002\000\004\011\ufff7" +
    "\001\002\000\004\010\147\001\002\000\004\010\125\001" +
    "\002\000\156\016\021\017\023\020\037\021\105\022\064" +
    "\023\117\024\112\025\035\026\106\027\107\030\030\031" +
    "\032\032\076\033\066\034\115\035\073\036\077\037\111" +
    "\040\067\115\063\116\041\117\113\120\071\121\062\122" +
    "\114\123\047\124\054\125\043\126\051\127\103\130\046" +
    "\131\052\132\072\133\033\134\026\135\020\136\060\137" +
    "\116\140\074\141\120\142\121\143\057\144\042\145\050" +
    "\146\034\147\040\150\027\151\031\152\101\153\022\154" +
    "\036\155\025\156\061\157\055\001\002\000\012\041\127" +
    "\043\uffa9\044\uffa9\160\uffa9\001\002\000\004\042\146\001" +
    "\002\000\010\043\131\044\132\160\uffa6\001\002\000\004" +
    "\160\uffa8\001\002\000\004\160\uffa7\001\002\000\004\160" +
    "\134\001\002\000\004\014\135\001\002\000\160\011\uffdb" +
    "\016\021\017\023\020\037\021\105\022\064\023\117\024" +
    "\112\025\035\026\106\027\107\030\030\031\032\032\076" +
    "\033\066\034\115\035\073\036\077\037\111\040\067\115" +
    "\063\116\041\117\113\120\071\121\062\122\114\123\047" +
    "\124\054\125\043\126\051\127\103\130\046\131\052\132" +
    "\072\133\033\134\026\135\020\136\060\137\116\140\074" +
    "\141\120\142\121\143\057\144\042\145\050\146\034\147" +
    "\040\150\027\151\031\152\101\153\022\154\036\155\025" +
    "\156\061\157\055\001\002\000\012\041\127\043\uffa9\044" +
    "\uffa9\160\uffa9\001\002\000\004\011\140\001\002\000\010" +
    "\011\uffde\110\uffde\111\uffde\001\002\000\010\043\131\044" +
    "\132\160\uffa6\001\002\000\004\160\143\001\002\000\004" +
    "\014\144\001\002\000\160\011\uffdb\016\021\017\023\020" +
    "\037\021\105\022\064\023\117\024\112\025\035\026\106" +
    "\027\107\030\030\031\032\032\076\033\066\034\115\035" +
    "\073\036\077\037\111\040\067\115\063\116\041\117\113" +
    "\120\071\121\062\122\114\123\047\124\054\125\043\126" +
    "\051\127\103\130\046\131\052\132\072\133\033\134\026" +
    "\135\020\136\060\137\116\140\074\141\120\142\121\143" +
    "\057\144\042\145\050\146\034\147\040\150\027\151\031" +
    "\152\101\153\022\154\036\155\025\156\061\157\055\001" +
    "\002\000\004\011\uffdc\001\002\000\010\043\uffaa\044\uffaa" +
    "\160\uffaa\001\002\000\010\011\uffdd\110\uffdd\111\uffdd\001" +
    "\002\000\004\011\ufff5\001\002\000\004\011\ufffb\001\002" +
    "\000\004\011\163\001\002\000\004\010\154\001\002\000" +
    "\004\160\155\001\002\000\006\011\uffb0\015\156\001\002" +
    "\000\004\160\161\001\002\000\004\011\160\001\002\000" +
    "\166\011\uffb3\013\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\040\uffb3\110\uffb3\111\uffb3\115\uffb3\116\uffb3\117" +
    "\uffb3\120\uffb3\121\uffb3\122\uffb3\123\uffb3\124\uffb3\125\uffb3" +
    "\126\uffb3\127\uffb3\130\uffb3\131\uffb3\132\uffb3\133\uffb3\134" +
    "\uffb3\135\uffb3\136\uffb3\137\uffb3\140\uffb3\141\uffb3\142\uffb3" +
    "\143\uffb3\144\uffb3\145\uffb3\146\uffb3\147\uffb3\150\uffb3\151" +
    "\uffb3\152\uffb3\153\uffb3\154\uffb3\155\uffb3\156\uffb3\157\uffb3" +
    "\001\002\000\006\011\uffb0\015\156\001\002\000\004\011" +
    "\uffb1\001\002\000\166\011\uffb2\013\uffb2\016\uffb2\017\uffb2" +
    "\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2" +
    "\035\uffb2\036\uffb2\037\uffb2\040\uffb2\110\uffb2\111\uffb2\115" +
    "\uffb2\116\uffb2\117\uffb2\120\uffb2\121\uffb2\122\uffb2\123\uffb2" +
    "\124\uffb2\125\uffb2\126\uffb2\127\uffb2\130\uffb2\131\uffb2\132" +
    "\uffb2\133\uffb2\134\uffb2\135\uffb2\136\uffb2\137\uffb2\140\uffb2" +
    "\141\uffb2\142\uffb2\143\uffb2\144\uffb2\145\uffb2\146\uffb2\147" +
    "\uffb2\150\uffb2\151\uffb2\152\uffb2\153\uffb2\154\uffb2\155\uffb2" +
    "\156\uffb2\157\uffb2\001\002\000\006\002\ufffc\007\166\001" +
    "\002\000\004\002\000\001\002\000\006\003\167\160\170" +
    "\001\002\000\004\011\175\001\002\000\004\010\171\001" +
    "\002\000\166\011\ufff4\013\075\016\021\017\023\020\037" +
    "\021\105\022\064\023\117\024\112\025\035\026\106\027" +
    "\107\030\030\031\032\032\076\033\066\034\115\035\073" +
    "\036\077\037\111\040\067\110\104\111\056\115\063\116" +
    "\041\117\113\120\071\121\062\122\114\123\047\124\054" +
    "\125\043\126\051\127\103\130\046\131\052\132\072\133" +
    "\033\134\026\135\020\136\060\137\116\140\074\141\120" +
    "\142\121\143\057\144\042\145\050\146\034\147\040\150" +
    "\027\151\031\152\101\153\022\154\036\155\025\156\061" +
    "\157\055\001\002\000\004\011\173\001\002\000\006\002" +
    "\ufffc\007\166\001\002\000\004\002\ufffe\001\002\000\004" +
    "\002\ufffd\001\002\000\004\010\u01a3\001\002\000\004\065" +
    "\200\001\002\000\156\016\021\017\023\020\037\021\105" +
    "\022\064\023\117\024\112\025\035\026\106\027\107\030" +
    "\030\031\032\032\076\033\066\034\115\035\073\036\077" +
    "\037\111\040\067\115\063\116\041\117\113\120\071\121" +
    "\062\122\114\123\047\124\054\125\043\126\051\127\103" +
    "\130\046\131\052\132\072\133\033\134\026\135\020\136" +
    "\060\137\116\140\074\141\120\142\121\143\057\144\042" +
    "\145\050\146\034\147\040\150\027\151\031\152\101\153" +
    "\022\154\036\155\025\156\061\157\055\001\002\000\004" +
    "\160\202\001\002\000\006\015\203\066\ufff0\001\002\000" +
    "\156\016\021\017\023\020\037\021\105\022\064\023\117" +
    "\024\112\025\035\026\106\027\107\030\030\031\032\032" +
    "\076\033\066\034\115\035\073\036\077\037\111\040\067" +
    "\115\063\116\041\117\113\120\071\121\062\122\114\123" +
    "\047\124\054\125\043\126\051\127\103\130\046\131\052" +
    "\132\072\133\033\134\026\135\020\136\060\137\116\140" +
    "\074\141\120\142\121\143\057\144\042\145\050\146\034" +
    "\147\040\150\027\151\031\152\101\153\022\154\036\155" +
    "\025\156\061\157\055\001\002\000\004\066\205\001\002" +
    "\000\016\010\uffeb\043\206\044\210\112\212\113\211\114" +
    "\uffeb\001\002\000\006\010\uffed\114\uffed\001\002\000\006" +
    "\010\uffe9\114\214\001\002\000\006\010\uffee\114\uffee\001" +
    "\002\000\006\010\uffec\114\uffec\001\002\000\006\010\uffef" +
    "\114\uffef\001\002\000\004\010\221\001\002\000\004\065" +
    "\215\001\002\000\156\016\021\017\023\020\037\021\105" +
    "\022\064\023\117\024\112\025\035\026\106\027\107\030" +
    "\030\031\032\032\076\033\066\034\115\035\073\036\077" +
    "\037\111\040\067\115\063\116\041\117\113\120\071\121" +
    "\062\122\114\123\047\124\054\125\043\126\051\127\103" +
    "\130\046\131\052\132\072\133\033\134\026\135\020\136" +
    "\060\137\116\140\074\141\120\142\121\143\057\144\042" +
    "\145\050\146\034\147\040\150\027\151\031\152\101\153" +
    "\022\154\036\155\025\156\061\157\055\001\002\000\004" +
    "\160\217\001\002\000\004\066\220\001\002\000\004\010" +
    "\uffea\001\002\000\206\016\021\017\023\020\037\021\105" +
    "\022\064\023\117\024\112\025\035\026\106\027\107\030" +
    "\030\031\032\032\076\033\066\034\115\035\073\036\077" +
    "\037\111\040\067\046\uffdf\047\uffdf\075\uffdf\076\uffdf\077" +
    "\uffdf\102\uffdf\103\uffdf\104\uffdf\115\063\116\041\117\113" +
    "\120\071\121\062\122\114\123\047\124\054\125\043\126" +
    "\051\127\103\130\046\131\052\132\072\133\033\134\026" +
    "\135\020\136\060\137\116\140\074\141\120\142\121\143" +
    "\057\144\042\145\050\146\034\147\040\150\027\151\031" +
    "\152\101\153\022\154\036\155\025\156\061\157\055\160" +
    "\uffdf\161\uffdf\162\uffdf\163\uffdf\001\002\000\206\016\021" +
    "\017\023\020\037\021\105\022\064\023\117\024\112\025" +
    "\035\026\106\027\107\030\030\031\032\032\076\033\066" +
    "\034\115\035\073\036\077\037\111\040\067\046\uffdf\047" +
    "\uffdf\075\uffdf\076\uffdf\077\uffdf\102\uffdf\103\uffdf\104\uffdf" +
    "\115\063\116\041\117\113\120\071\121\062\122\114\123" +
    "\047\124\054\125\043\126\051\127\103\130\046\131\052" +
    "\132\072\133\033\134\026\135\020\136\060\137\116\140" +
    "\074\141\120\142\121\143\057\144\042\145\050\146\034" +
    "\147\040\150\027\151\031\152\101\153\022\154\036\155" +
    "\025\156\061\157\055\160\uffdf\161\uffdf\162\uffdf\163\uffdf" +
    "\001\002\000\032\046\225\047\242\075\244\076\241\077" +
    "\uffe7\102\240\103\251\104\224\160\237\161\231\162\232" +
    "\163\233\001\002\000\006\003\u018e\065\u018f\001\002\000" +
    "\032\014\uff6e\050\307\051\310\052\312\053\306\054\304" +
    "\055\305\056\302\057\313\060\311\066\uff6e\107\uff6e\001" +
    "\002\000\032\046\uffda\047\uffda\075\uffda\076\uffda\077\uffda" +
    "\102\uffda\103\uffda\104\uffda\160\uffda\161\uffda\162\uffda\163" +
    "\uffda\001\002\000\004\077\u0189\001\002\000\032\046\225" +
    "\047\242\075\244\076\241\077\uffe7\102\240\103\251\104" +
    "\224\160\237\161\231\162\232\163\233\001\002\000\034" +
    "\014\uff89\061\u0105\062\377\063\374\064\u0103\065\u0104\066" +
    "\u0106\067\376\070\375\071\373\072\u0100\073\u0101\107\uff89" +
    "\001\002\000\010\014\uff64\066\uff64\107\uff64\001\002\000" +
    "\010\014\uff63\066\uff63\107\uff63\001\002\000\004\014\u0186" +
    "\001\002\000\010\014\uffa2\066\uffa2\107\uffa2\001\002\000" +
    "\010\014\uffa1\066\uffa1\107\uffa1\001\002\000\056\014\uff98" +
    "\045\u0175\050\307\051\310\052\312\053\306\054\304\055" +
    "\305\056\302\057\313\060\311\061\346\062\336\063\340" +
    "\064\333\065\345\067\332\070\344\071\334\072\330\073" +
    "\341\074\u0174\001\002\000\006\003\u0167\065\u0168\001\002" +
    "\000\006\003\u015e\065\u015f\001\002\000\032\014\uff6e\050" +
    "\307\051\310\052\312\053\306\054\304\055\305\056\302" +
    "\057\313\060\311\066\uff6e\107\uff6e\001\002\000\010\014" +
    "\uffa3\066\uffa3\107\uffa3\001\002\000\004\074\u0153\001\002" +
    "\000\032\046\uffd8\047\uffd8\075\uffd8\076\uffd8\077\uffd8\102" +
    "\uffd8\103\uffd8\104\uffd8\160\uffd8\161\uffd8\162\uffd8\163\uffd8" +
    "\001\002\000\032\046\uffd9\047\uffd9\075\uffd9\076\uffd9\077" +
    "\uffd9\102\uffd9\103\uffd9\104\uffd9\160\uffd9\161\uffd9\162\uffd9" +
    "\163\uffd9\001\002\000\032\046\uffe3\047\uffe3\075\uffe3\076" +
    "\uffe3\077\uffe3\102\uffe3\103\uffe3\104\uffe3\160\uffe3\161\uffe3" +
    "\162\uffe3\163\uffe3\001\002\000\032\046\uffd7\047\uffd7\075" +
    "\uffd7\076\uffd7\077\uffd7\102\uffd7\103\uffd7\104\uffd7\160\uffd7" +
    "\161\uffd7\162\uffd7\163\uffd7\001\002\000\006\003\253\010" +
    "\252\001\002\000\024\075\255\076\262\077\267\100\263" +
    "\101\256\102\266\103\260\104\264\160\261\001\002\000" +
    "\004\011\254\001\002\000\032\046\uffd1\047\uffd1\075\uffd1" +
    "\076\uffd1\077\uffd1\102\uffd1\103\uffd1\104\uffd1\160\uffd1\161" +
    "\uffd1\162\uffd1\163\uffd1\001\002\000\004\074\u014e\001\002" +
    "\000\004\014\u014d\001\002\000\026\011\uffc3\075\uffc3\076" +
    "\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3" +
    "\160\uffc3\001\002\000\004\010\u0144\001\002\000\010\045" +
    "\u0132\065\u0133\074\u012e\001\002\000\004\065\u0127\001\002" +
    "\000\004\014\u0126\001\002\000\004\065\u0119\001\002\000" +
    "\026\011\uffc9\075\255\076\262\077\267\100\263\101\256" +
    "\102\266\103\260\104\264\160\261\001\002\000\004\065" +
    "\271\001\002\000\004\014\270\001\002\000\026\011\uffc2" +
    "\075\uffc2\076\uffc2\077\uffc2\100\uffc2\101\uffc2\102\uffc2\103" +
    "\uffc2\104\uffc2\160\uffc2\001\002\000\004\160\272\001\002" +
    "\000\004\045\u0110\001\002\000\004\014\274\001\002\000" +
    "\010\046\300\047\275\160\277\001\002\000\032\014\uff6e" +
    "\050\307\051\310\052\312\053\306\054\304\055\305\056" +
    "\302\057\313\060\311\066\uff6e\107\uff6e\001\002\000\004" +
    "\014\316\001\002\000\032\014\uff6e\050\307\051\310\052" +
    "\312\053\306\054\304\055\305\056\302\057\313\060\311" +
    "\066\uff6e\107\uff6e\001\002\000\032\014\uff6e\050\307\051" +
    "\310\052\312\053\306\054\304\055\305\056\302\057\313" +
    "\060\311\066\uff6e\107\uff6e\001\002\000\010\014\uff72\066" +
    "\uff72\107\uff72\001\002\000\010\046\uff67\047\uff67\160\uff67" +
    "\001\002\000\010\046\300\047\275\160\277\001\002\000" +
    "\010\046\uff69\047\uff69\160\uff69\001\002\000\010\046\uff68" +
    "\047\uff68\160\uff68\001\002\000\010\046\uff6a\047\uff6a\160" +
    "\uff6a\001\002\000\010\046\uff6d\047\uff6d\160\uff6d\001\002" +
    "\000\010\046\uff6c\047\uff6c\160\uff6c\001\002\000\010\046" +
    "\uff65\047\uff65\160\uff65\001\002\000\010\046\uff6b\047\uff6b" +
    "\160\uff6b\001\002\000\010\046\uff66\047\uff66\160\uff66\001" +
    "\002\000\010\014\uff6f\066\uff6f\107\uff6f\001\002\000\010" +
    "\014\uff70\066\uff70\107\uff70\001\002\000\020\046\225\047" +
    "\242\075\244\160\317\161\231\162\232\163\233\001\002" +
    "\000\060\014\uff98\050\307\051\310\052\312\053\306\054" +
    "\304\055\305\056\302\057\313\060\311\061\346\062\336" +
    "\063\340\064\333\065\345\066\uff98\067\332\070\344\071" +
    "\334\072\330\073\341\074\337\107\uff98\001\002\000\004" +
    "\066\321\001\002\000\004\010\322\001\002\000\024\075" +
    "\255\076\262\077\267\100\263\101\256\102\266\103\260" +
    "\104\264\160\261\001\002\000\026\011\uffc9\075\255\076" +
    "\262\077\267\100\263\101\256\102\266\103\260\104\264" +
    "\160\261\001\002\000\026\011\uffc9\075\255\076\262\077" +
    "\267\100\263\101\256\102\266\103\260\104\264\160\261" +
    "\001\002\000\004\011\326\001\002\000\026\011\uffc5\075" +
    "\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5" +
    "\104\uffc5\160\uffc5\001\002\000\004\011\uffca\001\002\000" +
    "\010\075\uff74\160\uff74\161\uff74\001\002\000\010\046\300" +
    "\047\275\160\277\001\002\000\010\075\uff77\160\uff77\161" +
    "\uff77\001\002\000\010\075\uff78\160\uff78\161\uff78\001\002" +
    "\000\010\075\uff75\160\uff75\161\uff75\001\002\000\010\075" +
    "\365\160\366\161\364\001\002\000\010\075\uff7a\160\uff7a" +
    "\161\uff7a\001\002\000\004\160\362\001\002\000\010\075" +
    "\uff79\160\uff79\161\uff79\001\002\000\010\075\uff73\160\uff73" +
    "\161\uff73\001\002\000\010\014\uffa5\066\uffa5\107\uffa5\001" +
    "\002\000\010\014\uff9c\066\uff9c\107\uff9c\001\002\000\010" +
    "\075\uff76\160\uff76\161\uff76\001\002\000\010\066\352\075" +
    "\347\160\351\001\002\000\010\075\uff7b\160\uff7b\161\uff7b" +
    "\001\002\000\004\074\357\001\002\000\010\014\uff9b\066" +
    "\uff9b\107\uff9b\001\002\000\006\015\353\066\354\001\002" +
    "\000\010\014\uff90\066\uff90\107\uff90\001\002\000\010\066" +
    "\352\075\347\160\351\001\002\000\010\014\uff8e\066\uff8e" +
    "\107\uff8e\001\002\000\010\014\uff92\066\uff92\107\uff92\001" +
    "\002\000\010\014\uff8f\066\uff8f\107\uff8f\001\002\000\004" +
    "\160\360\001\002\000\006\015\353\066\354\001\002\000" +
    "\010\014\uff91\066\uff91\107\uff91\001\002\000\056\014\uff98" +
    "\050\307\051\310\052\312\053\306\054\304\055\305\056" +
    "\302\057\313\060\311\061\346\062\336\063\340\064\333" +
    "\065\345\066\uff98\067\332\070\344\071\334\072\330\073" +
    "\341\107\uff98\001\002\000\010\014\uff9d\066\uff9d\107\uff9d" +
    "\001\002\000\034\014\uff89\061\u0105\062\377\063\374\064" +
    "\u0103\065\u0104\066\u0106\067\376\070\375\071\373\072\u0100" +
    "\073\u0101\107\uff89\001\002\000\004\074\u0109\001\002\000" +
    "\036\014\uff87\061\uff87\062\uff87\063\uff87\064\uff87\065\uff87" +
    "\066\uff87\067\uff87\070\uff87\071\uff87\072\uff87\073\uff87\074" +
    "\370\107\uff87\001\002\000\010\014\uff9a\066\uff9a\107\uff9a" +
    "\001\002\000\004\160\u0108\001\002\000\034\014\uff89\061" +
    "\u0105\062\377\063\374\064\u0103\065\u0104\066\u0106\067\376" +
    "\070\375\071\373\072\u0100\073\u0101\107\uff89\001\002\000" +
    "\010\075\365\160\366\161\364\001\002\000\010\075\uff7e" +
    "\160\uff7e\161\uff7e\001\002\000\010\075\uff84\160\uff84\161" +
    "\uff84\001\002\000\010\075\uff7f\160\uff7f\161\uff7f\001\002" +
    "\000\010\075\uff80\160\uff80\161\uff80\001\002\000\010\075" +
    "\uff85\160\uff85\161\uff85\001\002\000\010\075\uff7d\160\uff7d" +
    "\161\uff7d\001\002\000\010\075\uff7c\160\uff7c\161\uff7c\001" +
    "\002\000\010\014\uff8c\066\uff8c\107\uff8c\001\002\000\010" +
    "\075\uff83\160\uff83\161\uff83\001\002\000\010\075\uff82\160" +
    "\uff82\161\uff82\001\002\000\010\075\uff86\160\uff86\161\uff86" +
    "\001\002\000\010\075\uff81\160\uff81\161\uff81\001\002\000" +
    "\010\014\uff8a\066\uff8a\107\uff8a\001\002\000\034\014\uff88" +
    "\061\uff88\062\uff88\063\uff88\064\uff88\065\uff88\066\uff88\067" +
    "\uff88\070\uff88\071\uff88\072\uff88\073\uff88\107\uff88\001\002" +
    "\000\004\160\u010a\001\002\000\036\014\uff87\061\uff87\062" +
    "\uff87\063\uff87\064\uff87\065\uff87\066\uff87\067\uff87\070\uff87" +
    "\071\uff87\072\uff87\073\uff87\074\370\107\uff87\001\002\000" +
    "\034\014\uff89\061\u0105\062\377\063\374\064\u0103\065\u0104" +
    "\066\u0106\067\376\070\375\071\373\072\u0100\073\u0101\107" +
    "\uff89\001\002\000\010\014\uff8b\066\uff8b\107\uff8b\001\002" +
    "\000\010\014\uff8d\066\uff8d\107\uff8d\001\002\000\010\014" +
    "\uff99\066\uff99\107\uff99\001\002\000\010\014\uff71\066\uff71" +
    "\107\uff71\001\002\000\020\046\225\047\242\075\244\160" +
    "\317\161\231\162\232\163\233\001\002\000\004\014\uffb5" +
    "\001\002\000\004\011\u0113\001\002\000\004\076\u0114\001" +
    "\002\000\004\065\u0115\001\002\000\010\046\300\047\275" +
    "\160\277\001\002\000\004\066\u0117\001\002\000\004\014" +
    "\u0118\001\002\000\032\046\uffd2\047\uffd2\075\uffd2\076\uffd2" +
    "\077\uffd2\102\uffd2\103\uffd2\104\uffd2\160\uffd2\161\uffd2\162" +
    "\uffd2\163\uffd2\001\002\000\010\046\300\047\275\160\277" +
    "\001\002\000\004\066\u011b\001\002\000\004\010\u011c\001" +
    "\002\000\024\075\255\076\262\077\267\100\263\101\256" +
    "\102\266\103\260\104\264\160\261\001\002\000\026\011" +
    "\uffc9\075\255\076\262\077\267\100\263\101\256\102\266" +
    "\103\260\104\264\160\261\001\002\000\004\011\u011f\001" +
    "\002\000\030\011\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8" +
    "\101\uffb8\102\uffb8\103\uffb8\104\uffb8\105\u0121\160\uffb8\001" +
    "\002\000\026\011\uffba\075\uffba\076\uffba\077\uffba\100\uffba" +
    "\101\uffba\102\uffba\103\uffba\104\uffba\160\uffba\001\002\000" +
    "\004\010\u0122\001\002\000\024\075\255\076\262\077\267" +
    "\100\263\101\256\102\266\103\260\104\264\160\261\001" +
    "\002\000\026\011\uffc9\075\255\076\262\077\267\100\263" +
    "\101\256\102\266\103\260\104\264\160\261\001\002\000" +
    "\004\011\u0125\001\002\000\026\011\uffb9\075\uffb9\076\uffb9" +
    "\077\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9\160" +
    "\uffb9\001\002\000\026\011\uffc1\075\uffc1\076\uffc1\077\uffc1" +
    "\100\uffc1\101\uffc1\102\uffc1\103\uffc1\104\uffc1\160\uffc1\001" +
    "\002\000\010\046\300\047\275\160\277\001\002\000\004" +
    "\066\u0129\001\002\000\004\010\u012a\001\002\000\024\075" +
    "\255\076\262\077\267\100\263\101\256\102\266\103\260" +
    "\104\264\160\261\001\002\000\026\011\uffc9\075\255\076" +
    "\262\077\267\100\263\101\256\102\266\103\260\104\264" +
    "\160\261\001\002\000\004\011\u012d\001\002\000\026\011" +
    "\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6" +
    "\103\uffc6\104\uffc6\160\uffc6\001\002\000\004\160\u0142\001" +
    "\002\000\026\011\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8" +
    "\101\uffc8\102\uffc8\103\uffc8\104\uffc8\160\uffc8\001\002\000" +
    "\026\011\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc" +
    "\102\uffbc\103\uffbc\104\uffbc\160\uffbc\001\002\000\026\011" +
    "\uffbe\075\uffbe\076\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe" +
    "\103\uffbe\104\uffbe\160\uffbe\001\002\000\022\046\225\047" +
    "\242\065\u0139\075\244\160\317\161\231\162\232\163\233" +
    "\001\002\000\002\001\002\000\026\011\uffbd\075\uffbd\076" +
    "\uffbd\077\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd\104\uffbd" +
    "\160\uffbd\001\002\000\004\066\u0136\001\002\000\004\014" +
    "\u0137\001\002\000\026\011\uffb6\075\uffb6\076\uffb6\077\uffb6" +
    "\100\uffb6\101\uffb6\102\uffb6\103\uffb6\104\uffb6\160\uffb6\001" +
    "\002\000\004\014\u0141\001\002\000\010\046\300\047\275" +
    "\160\277\001\002\000\004\066\u013b\001\002\000\004\106" +
    "\u013c\001\002\000\020\046\225\047\242\075\244\160\317" +
    "\161\231\162\232\163\233\001\002\000\004\107\u013e\001" +
    "\002\000\020\046\225\047\242\075\244\160\317\161\231" +
    "\162\232\163\233\001\002\000\004\014\u0140\001\002\000" +
    "\026\011\uffbb\075\uffbb\076\uffbb\077\uffbb\100\uffbb\101\uffbb" +
    "\102\uffbb\103\uffbb\104\uffbb\160\uffbb\001\002\000\026\011" +
    "\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7" +
    "\103\uffb7\104\uffb7\160\uffb7\001\002\000\006\045\u0132\065" +
    "\u0133\001\002\000\026\011\uffbf\075\uffbf\076\uffbf\077\uffbf" +
    "\100\uffbf\101\uffbf\102\uffbf\103\uffbf\104\uffbf\160\uffbf\001" +
    "\002\000\024\075\255\076\262\077\267\100\263\101\256" +
    "\102\266\103\260\104\264\160\261\001\002\000\026\011" +
    "\uffc9\075\255\076\262\077\267\100\263\101\256\102\266" +
    "\103\260\104\264\160\261\001\002\000\004\011\u0147\001" +
    "\002\000\004\076\u0148\001\002\000\004\065\u0149\001\002" +
    "\000\010\046\300\047\275\160\277\001\002\000\004\066" +
    "\u014b\001\002\000\004\014\u014c\001\002\000\026\011\uffc4" +
    "\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4\102\uffc4\103" +
    "\uffc4\104\uffc4\160\uffc4\001\002\000\026\011\uffc0\075\uffc0" +
    "\076\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\104" +
    "\uffc0\160\uffc0\001\002\000\004\160\u014f\001\002\000\004" +
    "\045\u0150\001\002\000\020\046\225\047\242\075\244\160" +
    "\317\161\231\162\232\163\233\001\002\000\004\014\u0152" +
    "\001\002\000\026\011\uffc7\075\uffc7\076\uffc7\077\uffc7\100" +
    "\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7\160\uffc7\001\002" +
    "\000\004\160\u0155\001\002\000\010\014\uffa4\066\uffa4\107" +
    "\uffa4\001\002\000\056\014\uff93\050\307\051\310\052\312" +
    "\053\306\054\304\055\305\056\302\057\313\060\311\061" +
    "\346\062\336\063\340\064\333\065\u0159\066\uff93\067\332" +
    "\070\344\071\334\072\330\073\341\107\uff93\001\002\000" +
    "\010\046\300\047\275\160\277\001\002\000\010\075\365" +
    "\160\366\161\364\001\002\000\010\014\uff97\066\uff97\107" +
    "\uff97\001\002\000\010\066\352\075\347\160\351\001\002" +
    "\000\010\014\uff96\066\uff96\107\uff96\001\002\000\010\014" +
    "\uff95\066\uff95\107\uff95\001\002\000\010\014\uff94\066\uff94" +
    "\107\uff94\001\002\000\010\014\uff9f\066\uff9f\107\uff9f\001" +
    "\002\000\004\010\u0166\001\002\000\020\046\225\047\242" +
    "\075\244\160\317\161\231\162\232\163\233\001\002\000" +
    "\004\066\u0161\001\002\000\004\010\u0162\001\002\000\024" +
    "\075\255\076\262\077\267\100\263\101\256\102\266\103" +
    "\260\104\264\160\261\001\002\000\026\011\uffc9\075\255" +
    "\076\262\077\267\100\263\101\256\102\266\103\260\104" +
    "\264\160\261\001\002\000\004\011\u0165\001\002\000\032" +
    "\046\uffd6\047\uffd6\075\uffd6\076\uffd6\077\uffd6\102\uffd6\103" +
    "\uffd6\104\uffd6\160\uffd6\161\uffd6\162\uffd6\163\uffd6\001\002" +
    "\000\032\046\uffd5\047\uffd5\075\uffd5\076\uffd5\077\uffd5\102" +
    "\uffd5\103\uffd5\104\uffd5\160\uffd5\161\uffd5\162\uffd5\163\uffd5" +
    "\001\002\000\004\010\u0173\001\002\000\004\160\272\001" +
    "\002\000\004\014\u016a\001\002\000\010\046\300\047\275" +
    "\160\277\001\002\000\004\014\u016c\001\002\000\020\046" +
    "\225\047\242\075\244\160\317\161\231\162\232\163\233" +
    "\001\002\000\004\066\u016e\001\002\000\004\010\u016f\001" +
    "\002\000\024\075\255\076\262\077\267\100\263\101\256" +
    "\102\266\103\260\104\264\160\261\001\002\000\026\011" +
    "\uffc9\075\255\076\262\077\267\100\263\101\256\102\266" +
    "\103\260\104\264\160\261\001\002\000\004\011\u0172\001" +
    "\002\000\032\046\uffd4\047\uffd4\075\uffd4\076\uffd4\077\uffd4" +
    "\102\uffd4\103\uffd4\104\uffd4\160\uffd4\161\uffd4\162\uffd4\163" +
    "\uffd4\001\002\000\032\046\uffd3\047\uffd3\075\uffd3\076\uffd3" +
    "\077\uffd3\102\uffd3\103\uffd3\104\uffd3\160\uffd3\161\uffd3\162" +
    "\uffd3\163\uffd3\001\002\000\004\160\u0183\001\002\000\022" +
    "\046\225\047\242\065\u017a\075\244\160\317\161\231\162" +
    "\232\163\233\001\002\000\032\046\uffe1\047\uffe1\075\uffe1" +
    "\076\uffe1\077\uffe1\102\uffe1\103\uffe1\104\uffe1\160\uffe1\161" +
    "\uffe1\162\uffe1\163\uffe1\001\002\000\032\046\uffe2\047\uffe2" +
    "\075\uffe2\076\uffe2\077\uffe2\102\uffe2\103\uffe2\104\uffe2\160" +
    "\uffe2\161\uffe2\162\uffe2\163\uffe2\001\002\000\032\046\uffe6" +
    "\047\uffe6\075\uffe6\076\uffe6\077\uffe6\102\uffe6\103\uffe6\104" +
    "\uffe6\160\uffe6\161\uffe6\162\uffe6\163\uffe6\001\002\000\004" +
    "\014\u0182\001\002\000\010\046\300\047\275\160\277\001" +
    "\002\000\004\066\u017c\001\002\000\004\106\u017d\001\002" +
    "\000\020\046\225\047\242\075\244\160\317\161\231\162" +
    "\232\163\233\001\002\000\004\107\u017f\001\002\000\020" +
    "\046\225\047\242\075\244\160\317\161\231\162\232\163" +
    "\233\001\002\000\004\014\u0181\001\002\000\032\046\uffcb" +
    "\047\uffcb\075\uffcb\076\uffcb\077\uffcb\102\uffcb\103\uffcb\104" +
    "\uffcb\160\uffcb\161\uffcb\162\uffcb\163\uffcb\001\002\000\032" +
    "\046\uffb4\047\uffb4\075\uffb4\076\uffb4\077\uffb4\102\uffb4\103" +
    "\uffb4\104\uffb4\160\uffb4\161\uffb4\162\uffb4\163\uffb4\001\002" +
    "\000\054\014\uff98\045\u0184\050\307\051\310\052\312\053" +
    "\306\054\304\055\305\056\302\057\313\060\311\061\346" +
    "\062\336\063\340\064\333\065\345\067\332\070\344\071" +
    "\334\072\330\073\341\001\002\000\022\046\225\047\242" +
    "\065\u017a\075\244\160\317\161\231\162\232\163\233\001" +
    "\002\000\032\046\uffe5\047\uffe5\075\uffe5\076\uffe5\077\uffe5" +
    "\102\uffe5\103\uffe5\104\uffe5\160\uffe5\161\uffe5\162\uffe5\163" +
    "\uffe5\001\002\000\032\046\uffe4\047\uffe4\075\uffe4\076\uffe4" +
    "\077\uffe4\102\uffe4\103\uffe4\104\uffe4\160\uffe4\161\uffe4\162" +
    "\uffe4\163\uffe4\001\002\000\010\014\uff9e\066\uff9e\107\uff9e" +
    "\001\002\000\004\077\uffe8\001\002\000\020\046\225\047" +
    "\242\075\244\160\317\161\231\162\232\163\233\001\002" +
    "\000\004\014\u018b\001\002\000\004\011\u018c\001\002\000" +
    "\006\011\ufff3\111\ufff3\001\002\000\010\014\uffa0\066\uffa0" +
    "\107\uffa0\001\002\000\004\011\u019e\001\002\000\010\046" +
    "\300\047\275\160\277\001\002\000\004\066\u0191\001\002" +
    "\000\004\010\u0192\001\002\000\024\075\255\076\262\077" +
    "\267\100\263\101\256\102\266\103\260\104\264\160\261" +
    "\001\002\000\026\011\uffc9\075\255\076\262\077\267\100" +
    "\263\101\256\102\266\103\260\104\264\160\261\001\002" +
    "\000\004\011\u0195\001\002\000\034\046\uffcc\047\uffcc\075" +
    "\uffcc\076\uffcc\077\uffcc\102\uffcc\103\uffcc\104\uffcc\105\u0196" +
    "\160\uffcc\161\uffcc\162\uffcc\163\uffcc\001\002\000\006\003" +
    "\u0199\010\u0198\001\002\000\032\046\uffd0\047\uffd0\075\uffd0" +
    "\076\uffd0\077\uffd0\102\uffd0\103\uffd0\104\uffd0\160\uffd0\161" +
    "\uffd0\162\uffd0\163\uffd0\001\002\000\024\075\255\076\262" +
    "\077\267\100\263\101\256\102\266\103\260\104\264\160" +
    "\261\001\002\000\004\011\u019a\001\002\000\032\046\uffcd" +
    "\047\uffcd\075\uffcd\076\uffcd\077\uffcd\102\uffcd\103\uffcd\104" +
    "\uffcd\160\uffcd\161\uffcd\162\uffcd\163\uffcd\001\002\000\026" +
    "\011\uffc9\075\255\076\262\077\267\100\263\101\256\102" +
    "\266\103\260\104\264\160\261\001\002\000\004\011\u019d" +
    "\001\002\000\032\046\uffce\047\uffce\075\uffce\076\uffce\077" +
    "\uffce\102\uffce\103\uffce\104\uffce\160\uffce\161\uffce\162\uffce" +
    "\163\uffce\001\002\000\032\046\uffcf\047\uffcf\075\uffcf\076" +
    "\uffcf\077\uffcf\102\uffcf\103\uffcf\104\uffcf\160\uffcf\161\uffcf" +
    "\162\uffcf\163\uffcf\001\002\000\032\046\uffe0\047\uffe0\075" +
    "\uffe0\076\uffe0\077\uffe0\102\uffe0\103\uffe0\104\uffe0\160\uffe0" +
    "\161\uffe0\162\uffe0\163\uffe0\001\002\000\004\160\u01a1\001" +
    "\002\000\006\015\203\066\ufff0\001\002\000\004\066\ufff1" +
    "\001\002\000\006\011\ufff2\111\ufff2\001\002\000\004\011" +
    "\ufff9\001\002\000\004\014\u01af\001\002\000\010\043\131" +
    "\044\132\160\uffa6\001\002\000\004\160\u01a8\001\002\000" +
    "\006\014\u01ab\045\u01a9\001\002\000\020\046\225\047\242" +
    "\075\244\160\317\161\231\162\232\163\233\001\002\000" +
    "\214\011\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf" +
    "\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031" +
    "\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf" +
    "\040\uffaf\046\uffaf\047\uffaf\075\uffaf\076\uffaf\077\uffaf\102" +
    "\uffaf\103\uffaf\104\uffaf\110\uffaf\111\uffaf\115\uffaf\116\uffaf" +
    "\117\uffaf\120\uffaf\121\uffaf\122\uffaf\123\uffaf\124\uffaf\125" +
    "\uffaf\126\uffaf\127\uffaf\130\uffaf\131\uffaf\132\uffaf\133\uffaf" +
    "\134\uffaf\135\uffaf\136\uffaf\137\uffaf\140\uffaf\141\uffaf\142" +
    "\uffaf\143\uffaf\144\uffaf\145\uffaf\146\uffaf\147\uffaf\150\uffaf" +
    "\151\uffaf\152\uffaf\153\uffaf\154\uffaf\155\uffaf\156\uffaf\157" +
    "\uffaf\160\uffaf\161\uffaf\162\uffaf\163\uffaf\001\002\000\214" +
    "\011\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023" +
    "\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad" +
    "\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040" +
    "\uffad\046\uffad\047\uffad\075\uffad\076\uffad\077\uffad\102\uffad" +
    "\103\uffad\104\uffad\110\uffad\111\uffad\115\uffad\116\uffad\117" +
    "\uffad\120\uffad\121\uffad\122\uffad\123\uffad\124\uffad\125\uffad" +
    "\126\uffad\127\uffad\130\uffad\131\uffad\132\uffad\133\uffad\134" +
    "\uffad\135\uffad\136\uffad\137\uffad\140\uffad\141\uffad\142\uffad" +
    "\143\uffad\144\uffad\145\uffad\146\uffad\147\uffad\150\uffad\151" +
    "\uffad\152\uffad\153\uffad\154\uffad\155\uffad\156\uffad\157\uffad" +
    "\160\uffad\161\uffad\162\uffad\163\uffad\001\002\000\004\014" +
    "\u01ad\001\002\000\214\011\uffac\016\uffac\017\uffac\020\uffac" +
    "\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027" +
    "\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac" +
    "\036\uffac\037\uffac\040\uffac\046\uffac\047\uffac\075\uffac\076" +
    "\uffac\077\uffac\102\uffac\103\uffac\104\uffac\110\uffac\111\uffac" +
    "\115\uffac\116\uffac\117\uffac\120\uffac\121\uffac\122\uffac\123" +
    "\uffac\124\uffac\125\uffac\126\uffac\127\uffac\130\uffac\131\uffac" +
    "\132\uffac\133\uffac\134\uffac\135\uffac\136\uffac\137\uffac\140" +
    "\uffac\141\uffac\142\uffac\143\uffac\144\uffac\145\uffac\146\uffac" +
    "\147\uffac\150\uffac\151\uffac\152\uffac\153\uffac\154\uffac\155" +
    "\uffac\156\uffac\157\uffac\160\uffac\161\uffac\162\uffac\163\uffac" +
    "\001\002\000\004\014\uffab\001\002\000\214\011\uffae\016" +
    "\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae" +
    "\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033" +
    "\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\046\uffae" +
    "\047\uffae\075\uffae\076\uffae\077\uffae\102\uffae\103\uffae\104" +
    "\uffae\110\uffae\111\uffae\115\uffae\116\uffae\117\uffae\120\uffae" +
    "\121\uffae\122\uffae\123\uffae\124\uffae\125\uffae\126\uffae\127" +
    "\uffae\130\uffae\131\uffae\132\uffae\133\uffae\134\uffae\135\uffae" +
    "\136\uffae\137\uffae\140\uffae\141\uffae\142\uffae\143\uffae\144" +
    "\uffae\145\uffae\146\uffae\147\uffae\150\uffae\151\uffae\152\uffae" +
    "\153\uffae\154\uffae\155\uffae\156\uffae\157\uffae\160\uffae\161" +
    "\uffae\162\uffae\163\uffae\001\002\000\004\002\uffff\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01ae\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\004\064\005\052\006\044\007\067\011\077\014" +
    "\101\016\023\021\043\067\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\u01a5\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\u01a3\006\044\007\067\014\101\016\023\021" +
    "\043\067\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\150" +
    "\005\052\006\044\007\067\011\077\014\101\016\023\021" +
    "\043\067\107\001\001\000\002\001\001\000\006\007\147" +
    "\014\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\121\007\067\014\101\067\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\125\001\001\000" +
    "\004\017\127\001\001\000\002\001\001\000\004\020\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\135\070\136\001\001" +
    "\000\004\017\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\135\070\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\140\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\171\005\052\006\044" +
    "\007\067\011\077\014\101\016\023\021\043\067\107\001" +
    "\001\000\002\001\001\000\004\140\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\200\001\001\000\002\001\001\000\004" +
    "\075\203\001\001\000\004\016\u019f\001\001\000\002\001" +
    "\001\000\004\076\206\001\001\000\002\001\001\000\004" +
    "\077\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\023\021\221\074\222\001\001" +
    "\000\010\016\023\021\221\074\u019e\001\001\000\030\013" +
    "\246\026\233\046\242\050\225\057\245\061\244\062\247" +
    "\073\227\100\226\131\235\134\234\001\001\000\002\001" +
    "\001\000\006\034\302\036\u018c\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\013\246\026\233\046\242\050" +
    "\225\057\245\061\244\062\247\073\227\100\u0187\131\235" +
    "\134\234\001\001\000\006\031\371\035\u0186\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\034\330\105\341\130" +
    "\334\136\342\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\302\036\u015c\001\001\000\002\001\001\000" +
    "\004\106\u0153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\051\264\071\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\053\u0133\054\u012e\055\u012f" +
    "\103\u0130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\051\323\056\u0111\071\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\060\272\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\275\001\001\000\006\034\302\036\u010e\001" +
    "\001\000\002\001\001\000\006\034\302\036\314\001\001" +
    "\000\006\034\302\036\300\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\313\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\026" +
    "\317\046\242\131\235\134\234\001\001\000\012\034\330" +
    "\105\341\130\334\136\342\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\051\322\071\256\001\001\000\010" +
    "\051\323\056\324\071\256\001\001\000\010\051\323\056" +
    "\326\071\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\u010d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\366\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\132\347\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\133\354\001\001\000\002\001\001\000\004\132" +
    "\355\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\133\360\001\001\000" +
    "\002\001\001\000\010\034\330\130\334\136\362\001\001" +
    "\000\002\001\001\000\006\031\371\035\u010c\001\001\000" +
    "\002\001\001\000\004\135\370\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\371\035\u0101\001\001\000" +
    "\004\027\u0106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\135\u010a\001\001\000\006\031\371\035\u010b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\026\u0110\046\242\131\235\134" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\u0115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\u0119\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\051\u011c\071\256\001\001\000\010\051\323\056\u011d" +
    "\071\256\001\001\000\002\001\001\000\004\072\u011f\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\051\u0122" +
    "\071\256\001\001\000\010\051\323\056\u0123\071\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\u0127\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\051\u012a\071\256\001\001\000\010\051\323" +
    "\056\u012b\071\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\026\u0137\046\242\131\235\134" +
    "\234\001\001\000\004\041\u0134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\u0139\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\026\u013c\046\242\131\235\134" +
    "\234\001\001\000\002\001\001\000\012\026\u013e\046\242" +
    "\131\235\134\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\053\u0133\055\u012f\103\u0142" +
    "\001\001\000\002\001\001\000\006\051\u0144\071\256\001" +
    "\001\000\010\051\323\056\u0145\071\256\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\u0149\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\026\u0150\046\242\131\235\134\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\034\u0155\120\u0157\130\u0156\001\001" +
    "\000\004\032\u015b\001\001\000\004\027\u015a\001\001\000" +
    "\002\001\001\000\004\132\u0159\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\026\u015f\046\242\131\235\134\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\051" +
    "\u0162\071\256\001\001\000\010\051\323\056\u0163\071\256" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\u0168\001\001\000\002" +
    "\001\001\000\004\032\u016a\001\001\000\002\001\001\000" +
    "\012\026\u016c\046\242\131\235\134\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\051\u016f\071\256\001" +
    "\001\000\010\051\323\056\u0170\071\256\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\026\u0178\046\242\064\u0175\102\u0176\104\u0177" +
    "\131\235\134\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\u017a" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\026" +
    "\u017d\046\242\131\235\134\234\001\001\000\002\001\001" +
    "\000\012\026\u017f\046\242\131\235\134\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\034\330\130\334\136\362\001\001\000\020\026\u0178\046" +
    "\242\064\u0175\102\u0176\104\u0184\131\235\134\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\026\u0189\046\242\131\235\134\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\u018f" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\051" +
    "\u0192\071\256\001\001\000\010\051\323\056\u0193\071\256" +
    "\001\001\000\002\001\001\000\004\063\u0196\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\051\u019a\071\256" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\051" +
    "\323\056\u019b\071\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\075\u01a1\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u01a6\001\001\000\002\001\001\000\006\023\u01ab\047\u01a9" +
    "\001\001\000\012\026\u01ad\046\242\131\235\134\234\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static LinkedList<TError> TablaES = new LinkedList<TError>(); 

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.left;
        int columna = s.right;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.left;
        int columna = s.right;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
     
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico$actions {



  private final analisis_sintactico parser;

  /** Constructor */
  CUP$analisis_sintactico$actions(analisis_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action_part00000000(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico$parser.done_parsing();
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= pragma solidity techo numero numero punto_coma contract ident O_Parent_L BODY_CONTRACT C_Parent_L INICIO_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= pragma error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO_S ::= contract ident O_Parent_L BODY_CONTRACT C_Parent_L INICIO_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_S",94, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO_S ::= contract error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_S",94, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_S",94, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BODY_CONTRACT ::= EN BODY_CONTRACT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BODY_CONTRACT ::= BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BODY_CONTRACT_P ::= VAR_CONTRACT BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BODY_CONTRACT_P ::= BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BODY_CONTRACT_PP ::= STRUCTURE BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BODY_CONTRACT_PP ::= BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BODY_CONTRACT_PPP ::= FUNC BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BODY_CONTRACT_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNC ::= functionSoli ident O_Parent_R TIPO ident FUNC_PARAM C_Parent_R FUNC_MOD FUNC_RETURNS O_Parent_L CUERPO_ASSIGN CUERPO_M returnSoli EXP punto_coma C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-15)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNC ::= functionSoli error O_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNC_PARAM ::= coma TIPO ident FUNC_PARAM 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNC_PARAM ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNC_MOD ::= payableSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNC_MOD ::= privateSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNC_MOD ::= publicSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNC_MOD ::= internalSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNC_MOD ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNC_RETURNS ::= returns O_Parent_R TIPO ident C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_RETURNS",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNC_RETURNS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_RETURNS",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPO_M ::= CUERPO CUERPO_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPO_M ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CUERPO ::= ident igual CUERPO_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPO ::= ident punto ident igual CUERPO_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPO ::= EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPO ::= STRU 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPO_P ::= ASSIGN_NOT_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_P",66, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUERPO_P ::= STRU_IF_LINE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_P",66, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CUERPO_ASSIGN ::= VAR_CONTRACT CUERPO_ASSIGN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN",58, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CUERPO_ASSIGN ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN",58, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // STRUCTURE ::= structSoli ident O_Parent_L TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // STRUCTURE ::= structSoli error O_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // STRUCTURE_VAR ::= TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // STRUCTURE_VAR ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // STRU ::= STRU_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // STRU ::= STRU_FOR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // STRU ::= STRU_DO_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STRU ::= STRU_IF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STRU_WHILE ::= whileSoli O_Parent_R EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_WHILE",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STRU_WHILE ::= whileSoli error O_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_WHILE",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STRU_FOR ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_FOR",45, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // STRU_FOR ::= forSoli error O_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_FOR",45, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STRU_DO_WHILE ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_DO_WHILE",47, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // STRU_DO_WHILE ::= doSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_DO_WHILE",47, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STRU_IF ::= ifSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L STRU_ELSE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF",48, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STRU_IF ::= ifSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF",48, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STRU_ELSE ::= elseSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STRU_ELSE ::= elseSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // STRU_ELSE ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // STRU_IF_LINE ::= O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP punto_punto EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_LINE",50, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BODY_SENT_M ::= BODY_SENT BODY_SENT_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BODY_SENT_M ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BODY_SENT ::= ident BODY_SENT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BODY_SENT ::= thisSoli punto ident igual EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BODY_SENT ::= whileSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BODY_SENT ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BODY_SENT ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BODY_SENT ::= STRU_IF_ELSE_IN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BODY_SENT ::= returnSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BODY_SENT ::= breakSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BODY_SENT ::= continueSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BODY_SENT_P ::= punto ident BODY_SENT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BODY_SENT_P ::= BODY_SENT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BODY_SENT_PP ::= BODY_ASSIGN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BODY_SENT_PP ::= BODY_FUN_CALL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BODY_SENT_PP ::= igual O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP punto_punto EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // STRU_IF_ELSE_IN ::= ifSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L STRU_ELSE_IN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_ELSE_IN",55, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // STRU_ELSE_IN ::= elseSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // STRU_ELSE_IN ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BODY_ASSIGN ::= igual EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_ASSIGN",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BODY_FUN_CALL ::= O_Parent_R FUNC_CALL_PARAMS C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_FUN_CALL",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FOR_VAR ::= ident igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FOR_VAR",46, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ASSIGN_NOT_VAR ::= EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ASSIGN_NOT_VAR",64, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EN ::= enumSoli ident O_Parent_L ident EN_IDENT C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EN ::= enumSoli error C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EN_IDENT ::= coma ident EN_IDENT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EN_IDENT ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VAR_CONTRACT ::= TIPO VAR_ARR VAR_ACCESS ident VAR_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VAR_CONTRACT ::= TIPO error punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VAR_CONTRACT_P ::= punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VAR_CONTRACT_P ::= VAR_CONTRACT_C punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VAR_CONTRACT_C ::= igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_C",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VAR_ARR ::= O_Parent_C C_Parent_C 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VAR_ARR ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VAR_ACCESS ::= publicSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VAR_ACCESS ::= privateSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VAR_ACCESS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= ident EXP_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= thisSoli EXP_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= BODY_LIT_TF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= ARIT_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= BOOL_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BOOL_GATE ::= trueSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BOOL_GATE",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // BOOL_GATE ::= falseSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BOOL_GATE",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ARIT_GATE ::= numero OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARIT_GATE",90, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP_P ::= punto ident EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P",67, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP_P ::= EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P",67, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP_P_S ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP_P_S ::= OP_EXCL OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP_P_S ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP_P_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP_PP ::= punto ident EXP_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PP",68, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXP_PPP ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXP_PPP ::= OP_EXCL OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXP_PPP ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXP_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // FUNC_CALL_CASE ::= ident FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FUNC_CALL_CASE ::= thisSoli punto ident FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FUNC_CALL_CASE ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // FUNC_CALL_CASE_P ::= coma FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE_P",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FUNC_CALL_CASE_P ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE_P",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OP_ARIT ::= numero OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OP_ARIT ::= ident OP_ARIT_Parent OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OP_ARIT ::= thisSoli punto ident OP_ARIT_Parent OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OP_ARIT_P ::= OP OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OP_ARIT_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OP_ARIT_Parent ::= punto ident 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_Parent",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OP_ARIT_Parent ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_Parent",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OP ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OP ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OP ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OP ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OP ::= O_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OP ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OP ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OP ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OP ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OP ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OP ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OP_EXCL ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OP_EXCL ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OP_EXCL ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OP_EXCL ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OP_EXCL ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OP_EXCL ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OP_EXCL ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OP_EXCL ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OP_EXCL ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OP_BOOL ::= trueSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OP_BOOL ::= falseSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OP_BOOL ::= ident OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OP_BOOL_P ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OP_BOOL_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OP_OP_BOOL ::= igual_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OP_OP_BOOL ::= mayor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OP_OP_BOOL ::= mayor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OP_OP_BOOL ::= menor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OP_OP_BOOL ::= menor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OP_OP_BOOL ::= diferente 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OP_OP_BOOL ::= op_or 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OP_OP_BOOL ::= op_and 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // OP_OP_BOOL ::= negacion 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // BODY_LIT_TF ::= numero_HEX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // BODY_LIT_TF ::= stringSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // TIPO ::= bool 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // TIPO ::= byteSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // TIPO ::= bytes 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // TIPO ::= string 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // TIPO ::= uint 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // TIPO ::= uint_O 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // TIPO ::= uint_DS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // TIPO ::= uint_TD 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // TIPO ::= uint_SC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // TIPO ::= uint_CVO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // TIPO ::= uint_DCS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // TIPO ::= intSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // TIPO ::= int_O 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // TIPO ::= int_DS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // TIPO ::= int_TD 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // TIPO ::= int_SC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // TIPO ::= int_CVO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // TIPO ::= int_DCS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // TIPO ::= address 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // TIPO ::= address_payable 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // TIPO ::= charss 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // TIPO ::= ufixedSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // TIPO ::= B_I 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // TIPO ::= B_II 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // TIPO ::= B_III 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // TIPO ::= B_IV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // TIPO ::= B_V 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // TIPO ::= B_VI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // TIPO ::= B_VII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // TIPO ::= B_IIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // TIPO ::= B_IX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // TIPO ::= B_X 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // TIPO ::= B_XI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // TIPO ::= B_XII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // TIPO ::= B_XIII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // TIPO ::= B_XIV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // TIPO ::= B_XV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // TIPO ::= B_XVI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // TIPO ::= B_XVII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // TIPO ::= B_XIIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // TIPO ::= B_XIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // TIPO ::= B_XX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // TIPO ::= B_XXI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // TIPO ::= B_XXII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // TIPO ::= B_XXIII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // TIPO ::= B_XXIV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // TIPO ::= B_XXV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // TIPO ::= B_XXVI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // TIPO ::= B_XXVII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // TIPO ::= B_XXIIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // TIPO ::= B_XXIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // TIPO ::= B_XXX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // TIPO ::= B_XXXI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // TIPO ::= B_XXXII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$analisis_sintactico$do_action_part00000000(
                               CUP$analisis_sintactico$act_num,
                               CUP$analisis_sintactico$parser,
                               CUP$analisis_sintactico$stack,
                               CUP$analisis_sintactico$top);
    }
}

}
