
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symb.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\312\000\002\002\004\000\002\002\016\000\002\140" +
    "\010\000\002\140\002\000\002\004\004\000\002\004\003" +
    "\000\002\005\004\000\002\005\003\000\002\006\004\000" +
    "\002\006\003\000\002\007\004\000\002\007\002\000\002" +
    "\014\022\000\002\075\006\000\002\075\002\000\002\076" +
    "\003\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\076\002\000\002\077\007\000\002\077\002\000" +
    "\002\100\004\000\002\100\002\000\002\073\005\000\002" +
    "\073\007\000\002\073\004\000\002\073\003\000\002\104" +
    "\003\000\002\104\003\000\002\074\004\000\002\074\002" +
    "\000\002\067\014\000\002\070\010\000\002\070\002\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\050\012\000\002\057\016\000\002\061" +
    "\014\000\002\062\013\000\002\063\007\000\002\063\002" +
    "\000\002\064\012\000\002\056\004\000\002\056\002\000" +
    "\002\051\004\000\002\051\010\000\002\051\012\000\002" +
    "\051\016\000\002\051\014\000\002\051\003\000\002\051" +
    "\004\000\002\051\004\000\002\051\004\000\002\054\005" +
    "\000\002\054\003\000\002\103\003\000\002\103\003\000" +
    "\002\103\013\000\002\071\013\000\002\072\007\000\002" +
    "\072\002\000\002\053\005\000\002\055\006\000\002\060" +
    "\005\000\002\102\004\000\002\011\010\000\002\015\005" +
    "\000\002\015\002\000\002\021\007\000\002\047\003\000" +
    "\002\047\004\000\002\023\004\000\002\017\004\000\002" +
    "\017\002\000\002\020\003\000\002\020\003\000\002\020" +
    "\002\000\002\026\004\000\002\026\004\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\131\004\000" +
    "\002\131\004\000\002\134\004\000\002\105\005\000\002" +
    "\105\003\000\002\136\004\000\002\136\004\000\002\136" +
    "\004\000\002\136\002\000\002\106\005\000\002\120\004" +
    "\000\002\120\004\000\002\120\004\000\002\120\002\000" +
    "\002\132\004\000\002\132\006\000\002\132\003\000\002" +
    "\133\004\000\002\133\003\000\002\027\004\000\002\027" +
    "\005\000\002\027\007\000\002\035\004\000\002\035\002" +
    "\000\002\135\004\000\002\135\002\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\130\003\000\002\130\003\000\002\130\003\000" +
    "\002\130\003\000\002\130\003\000\002\130\003\000\002" +
    "\130\003\000\002\130\003\000\002\130\003\000\002\032" +
    "\004\000\002\032\004\000\002\032\004\000\002\036\004" +
    "\000\002\036\002\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\046\003\000\002\046\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0198\000\004\004\004\001\002\000\004\005\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\006\010\001\002\000\004\161\011\001\002\000" +
    "\004\161\012\001\002\000\004\014\013\001\002\000\004" +
    "\007\014\001\002\000\004\160\015\001\002\000\004\010" +
    "\016\001\002\000\166\011\ufff6\013\072\016\017\017\022" +
    "\020\037\021\104\022\063\023\116\024\111\025\034\026" +
    "\105\027\106\030\030\031\031\032\075\033\065\034\115" +
    "\035\073\036\077\037\110\040\067\110\103\111\054\115" +
    "\062\116\042\117\113\120\070\121\061\122\112\123\046" +
    "\124\056\125\041\126\047\127\102\130\045\131\051\132" +
    "\071\133\032\134\026\135\020\136\057\137\114\140\074" +
    "\141\117\142\120\143\053\144\040\145\050\146\033\147" +
    "\036\150\025\151\027\152\100\153\021\154\035\155\024" +
    "\156\060\157\055\001\002\000\012\041\uff6d\043\uff6d\044" +
    "\uff6d\160\uff6d\001\002\000\012\041\uff4a\043\uff4a\044\uff4a" +
    "\160\uff4a\001\002\000\012\041\uff3c\043\uff3c\044\uff3c\160" +
    "\uff3c\001\002\000\012\041\uff6c\043\uff6c\044\uff6c\160\uff6c" +
    "\001\002\000\012\041\125\043\uffb4\044\uffb4\160\uffb4\001" +
    "\002\000\012\041\uff3a\043\uff3a\044\uff3a\160\uff3a\001\002" +
    "\000\012\041\uff3f\043\uff3f\044\uff3f\160\uff3f\001\002\000" +
    "\012\041\uff4b\043\uff4b\044\uff4b\160\uff4b\001\002\000\012" +
    "\041\uff3e\043\uff3e\044\uff3e\160\uff3e\001\002\000\012\041" +
    "\uff62\043\uff62\044\uff62\160\uff62\001\002\000\012\041\uff61" +
    "\043\uff61\044\uff61\160\uff61\001\002\000\012\041\uff4c\043" +
    "\uff4c\044\uff4c\160\uff4c\001\002\000\012\041\uff41\043\uff41" +
    "\044\uff41\160\uff41\001\002\000\012\041\uff65\043\uff65\044" +
    "\uff65\160\uff65\001\002\000\012\041\uff3b\043\uff3b\044\uff3b" +
    "\160\uff3b\001\002\000\012\041\uff40\043\uff40\044\uff40\160" +
    "\uff40\001\002\000\012\041\uff6b\043\uff6b\044\uff6b\160\uff6b" +
    "\001\002\000\012\041\uff43\043\uff43\044\uff43\160\uff43\001" +
    "\002\000\012\041\uff52\043\uff52\044\uff52\160\uff52\001\002" +
    "\000\012\041\uff6a\043\uff6a\044\uff6a\160\uff6a\001\002\000" +
    "\164\011\ufff6\016\017\017\022\020\037\021\104\022\063" +
    "\023\116\024\111\025\034\026\105\027\106\030\030\031" +
    "\031\032\075\033\065\034\115\035\073\036\077\037\110" +
    "\040\067\110\103\111\054\115\062\116\042\117\113\120" +
    "\070\121\061\122\112\123\046\124\056\125\041\126\047" +
    "\127\102\130\045\131\051\132\071\133\032\134\026\135" +
    "\020\136\057\137\114\140\074\141\117\142\120\143\053" +
    "\144\040\145\050\146\033\147\036\150\025\151\027\152" +
    "\100\153\021\154\035\155\024\156\060\157\055\001\002" +
    "\000\004\011\ufffa\001\002\000\012\041\uff4f\043\uff4f\044" +
    "\uff4f\160\uff4f\001\002\000\012\041\uff54\043\uff54\044\uff54" +
    "\160\uff54\001\002\000\012\041\uff51\043\uff51\044\uff51\160" +
    "\uff51\001\002\000\012\041\uff42\043\uff42\044\uff42\160\uff42" +
    "\001\002\000\012\041\uff4e\043\uff4e\044\uff4e\160\uff4e\001" +
    "\002\000\004\011\ufffc\001\002\000\012\041\uff44\043\uff44" +
    "\044\uff44\160\uff44\001\002\000\004\160\167\001\002\000" +
    "\012\041\uff38\043\uff38\044\uff38\160\uff38\001\002\000\012" +
    "\041\uff53\043\uff53\044\uff53\160\uff53\001\002\000\012\041" +
    "\uff49\043\uff49\044\uff49\160\uff49\001\002\000\012\041\uff39" +
    "\043\uff39\044\uff39\160\uff39\001\002\000\012\041\uff56\043" +
    "\uff56\044\uff56\160\uff56\001\002\000\012\041\uff59\043\uff59" +
    "\044\uff59\160\uff59\001\002\000\012\041\uff68\043\uff68\044" +
    "\uff68\160\uff68\001\002\000\004\011\157\001\002\000\012" +
    "\041\uff5f\043\uff5f\044\uff5f\160\uff5f\001\002\000\004\011" +
    "\ufff8\001\002\000\012\041\uff5a\043\uff5a\044\uff5a\160\uff5a" +
    "\001\002\000\012\041\uff57\043\uff57\044\uff57\160\uff57\001" +
    "\002\000\012\041\uff4d\043\uff4d\044\uff4d\160\uff4d\001\002" +
    "\000\004\160\147\001\002\000\012\041\uff5d\043\uff5d\044" +
    "\uff5d\160\uff5d\001\002\000\012\041\uff47\043\uff47\044\uff47" +
    "\160\uff47\001\002\000\012\041\uff60\043\uff60\044\uff60\160" +
    "\uff60\001\002\000\166\011\ufff6\013\072\016\017\017\022" +
    "\020\037\021\104\022\063\023\116\024\111\025\034\026" +
    "\105\027\106\030\030\031\031\032\075\033\065\034\115" +
    "\035\073\036\077\037\110\040\067\110\103\111\054\115" +
    "\062\116\042\117\113\120\070\121\061\122\112\123\046" +
    "\124\056\125\041\126\047\127\102\130\045\131\051\132" +
    "\071\133\032\134\026\135\020\136\057\137\114\140\074" +
    "\141\117\142\120\143\053\144\040\145\050\146\033\147" +
    "\036\150\025\151\027\152\100\153\021\154\035\155\024" +
    "\156\060\157\055\001\002\000\012\041\uff5c\043\uff5c\044" +
    "\uff5c\160\uff5c\001\002\000\012\041\uff3d\043\uff3d\044\uff3d" +
    "\160\uff3d\001\002\000\006\011\ufff6\111\054\001\002\000" +
    "\012\041\uff50\043\uff50\044\uff50\160\uff50\001\002\000\004" +
    "\160\122\001\002\000\012\041\uff69\043\uff69\044\uff69\160" +
    "\uff69\001\002\000\012\041\uff64\043\uff64\044\uff64\160\uff64" +
    "\001\002\000\012\041\uff63\043\uff63\044\uff63\160\uff63\001" +
    "\002\000\010\011\ufff6\110\103\111\054\001\002\000\012" +
    "\041\uff5b\043\uff5b\044\uff5b\160\uff5b\001\002\000\012\041" +
    "\uff66\043\uff66\044\uff66\160\uff66\001\002\000\012\041\uff55" +
    "\043\uff55\044\uff55\160\uff55\001\002\000\012\041\uff58\043" +
    "\uff58\044\uff58\160\uff58\001\002\000\012\041\uff48\043\uff48" +
    "\044\uff48\160\uff48\001\002\000\012\041\uff5e\043\uff5e\044" +
    "\uff5e\160\uff5e\001\002\000\012\041\uff67\043\uff67\044\uff67" +
    "\160\uff67\001\002\000\012\041\uff46\043\uff46\044\uff46\160" +
    "\uff46\001\002\000\012\041\uff45\043\uff45\044\uff45\160\uff45" +
    "\001\002\000\004\011\ufff9\001\002\000\004\010\123\001" +
    "\002\000\156\016\017\017\022\020\037\021\104\022\063" +
    "\023\116\024\111\025\034\026\105\027\106\030\030\031" +
    "\031\032\075\033\065\034\115\035\073\036\077\037\110" +
    "\040\067\115\062\116\042\117\113\120\070\121\061\122" +
    "\112\123\046\124\056\125\041\126\047\127\102\130\045" +
    "\131\051\132\071\133\032\134\026\135\020\136\057\137" +
    "\114\140\074\141\117\142\120\143\053\144\040\145\050" +
    "\146\033\147\036\150\025\151\027\152\100\153\021\154" +
    "\035\155\024\156\060\157\055\001\002\000\012\041\125" +
    "\043\uffb4\044\uffb4\160\uffb4\001\002\000\004\042\144\001" +
    "\002\000\010\043\127\044\130\160\uffb1\001\002\000\004" +
    "\160\uffb3\001\002\000\004\160\uffb2\001\002\000\004\160" +
    "\132\001\002\000\004\014\133\001\002\000\160\011\uffdf" +
    "\016\017\017\022\020\037\021\104\022\063\023\116\024" +
    "\111\025\034\026\105\027\106\030\030\031\031\032\075" +
    "\033\065\034\115\035\073\036\077\037\110\040\067\115" +
    "\062\116\042\117\113\120\070\121\061\122\112\123\046" +
    "\124\056\125\041\126\047\127\102\130\045\131\051\132" +
    "\071\133\032\134\026\135\020\136\057\137\114\140\074" +
    "\141\117\142\120\143\053\144\040\145\050\146\033\147" +
    "\036\150\025\151\027\152\100\153\021\154\035\155\024" +
    "\156\060\157\055\001\002\000\012\041\125\043\uffb4\044" +
    "\uffb4\160\uffb4\001\002\000\004\011\136\001\002\000\010" +
    "\011\uffe1\110\uffe1\111\uffe1\001\002\000\010\043\127\044" +
    "\130\160\uffb1\001\002\000\004\160\141\001\002\000\004" +
    "\014\142\001\002\000\160\011\uffdf\016\017\017\022\020" +
    "\037\021\104\022\063\023\116\024\111\025\034\026\105" +
    "\027\106\030\030\031\031\032\075\033\065\034\115\035" +
    "\073\036\077\037\110\040\067\115\062\116\042\117\113" +
    "\120\070\121\061\122\112\123\046\124\056\125\041\126" +
    "\047\127\102\130\045\131\051\132\071\133\032\134\026" +
    "\135\020\136\057\137\114\140\074\141\117\142\120\143" +
    "\053\144\040\145\050\146\033\147\036\150\025\151\027" +
    "\152\100\153\021\154\035\155\024\156\060\157\055\001" +
    "\002\000\004\011\uffe0\001\002\000\010\043\uffb5\044\uffb5" +
    "\160\uffb5\001\002\000\004\011\ufff7\001\002\000\004\011" +
    "\ufffd\001\002\000\004\010\150\001\002\000\004\160\151" +
    "\001\002\000\006\011\uffba\015\152\001\002\000\004\160" +
    "\155\001\002\000\004\011\154\001\002\000\166\011\uffbc" +
    "\013\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023" +
    "\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040" +
    "\uffbc\110\uffbc\111\uffbc\115\uffbc\116\uffbc\117\uffbc\120\uffbc" +
    "\121\uffbc\122\uffbc\123\uffbc\124\uffbc\125\uffbc\126\uffbc\127" +
    "\uffbc\130\uffbc\131\uffbc\132\uffbc\133\uffbc\134\uffbc\135\uffbc" +
    "\136\uffbc\137\uffbc\140\uffbc\141\uffbc\142\uffbc\143\uffbc\144" +
    "\uffbc\145\uffbc\146\uffbc\147\uffbc\150\uffbc\151\uffbc\152\uffbc" +
    "\153\uffbc\154\uffbc\155\uffbc\156\uffbc\157\uffbc\001\002\000" +
    "\006\011\uffba\015\152\001\002\000\004\011\uffbb\001\002" +
    "\000\006\002\ufffe\007\161\001\002\000\004\002\000\001" +
    "\002\000\004\160\162\001\002\000\004\010\163\001\002" +
    "\000\166\011\ufff6\013\072\016\017\017\022\020\037\021" +
    "\104\022\063\023\116\024\111\025\034\026\105\027\106" +
    "\030\030\031\031\032\075\033\065\034\115\035\073\036" +
    "\077\037\110\040\067\110\103\111\054\115\062\116\042" +
    "\117\113\120\070\121\061\122\112\123\046\124\056\125" +
    "\041\126\047\127\102\130\045\131\051\132\071\133\032" +
    "\134\026\135\020\136\057\137\114\140\074\141\117\142" +
    "\120\143\053\144\040\145\050\146\033\147\036\150\025" +
    "\151\027\152\100\153\021\154\035\155\024\156\060\157" +
    "\055\001\002\000\004\011\165\001\002\000\006\002\ufffe" +
    "\007\161\001\002\000\004\002\uffff\001\002\000\004\065" +
    "\170\001\002\000\156\016\017\017\022\020\037\021\104" +
    "\022\063\023\116\024\111\025\034\026\105\027\106\030" +
    "\030\031\031\032\075\033\065\034\115\035\073\036\077" +
    "\037\110\040\067\115\062\116\042\117\113\120\070\121" +
    "\061\122\112\123\046\124\056\125\041\126\047\127\102" +
    "\130\045\131\051\132\071\133\032\134\026\135\020\136" +
    "\057\137\114\140\074\141\117\142\120\143\053\144\040" +
    "\145\050\146\033\147\036\150\025\151\027\152\100\153" +
    "\021\154\035\155\024\156\060\157\055\001\002\000\004" +
    "\160\172\001\002\000\006\015\173\066\ufff3\001\002\000" +
    "\156\016\017\017\022\020\037\021\104\022\063\023\116" +
    "\024\111\025\034\026\105\027\106\030\030\031\031\032" +
    "\075\033\065\034\115\035\073\036\077\037\110\040\067" +
    "\115\062\116\042\117\113\120\070\121\061\122\112\123" +
    "\046\124\056\125\041\126\047\127\102\130\045\131\051" +
    "\132\071\133\032\134\026\135\020\136\057\137\114\140" +
    "\074\141\117\142\120\143\053\144\040\145\050\146\033" +
    "\147\036\150\025\151\027\152\100\153\021\154\035\155" +
    "\024\156\060\157\055\001\002\000\004\066\175\001\002" +
    "\000\016\010\uffee\043\176\044\200\112\202\113\201\114" +
    "\uffee\001\002\000\006\010\ufff0\114\ufff0\001\002\000\006" +
    "\010\uffec\114\204\001\002\000\006\010\ufff1\114\ufff1\001" +
    "\002\000\006\010\uffef\114\uffef\001\002\000\006\010\ufff2" +
    "\114\ufff2\001\002\000\004\010\211\001\002\000\004\065" +
    "\205\001\002\000\156\016\017\017\022\020\037\021\104" +
    "\022\063\023\116\024\111\025\034\026\105\027\106\030" +
    "\030\031\031\032\075\033\065\034\115\035\073\036\077" +
    "\037\110\040\067\115\062\116\042\117\113\120\070\121" +
    "\061\122\112\123\046\124\056\125\041\126\047\127\102" +
    "\130\045\131\051\132\071\133\032\134\026\135\020\136" +
    "\057\137\114\140\074\141\117\142\120\143\053\144\040" +
    "\145\050\146\033\147\036\150\025\151\027\152\100\153" +
    "\021\154\035\155\024\156\060\157\055\001\002\000\004" +
    "\160\207\001\002\000\004\066\210\001\002\000\004\010" +
    "\uffed\001\002\000\206\016\017\017\022\020\037\021\104" +
    "\022\063\023\116\024\111\025\034\026\105\027\106\030" +
    "\030\031\031\032\075\033\065\034\115\035\073\036\077" +
    "\037\110\040\067\046\uffe2\047\uffe2\075\uffe2\076\uffe2\077" +
    "\uffe2\102\uffe2\103\uffe2\104\uffe2\115\062\116\042\117\113" +
    "\120\070\121\061\122\112\123\046\124\056\125\041\126" +
    "\047\127\102\130\045\131\051\132\071\133\032\134\026" +
    "\135\020\136\057\137\114\140\074\141\117\142\120\143" +
    "\053\144\040\145\050\146\033\147\036\150\025\151\027" +
    "\152\100\153\021\154\035\155\024\156\060\157\055\160" +
    "\uffe2\161\uffe2\162\uffe2\163\uffe2\001\002\000\206\016\017" +
    "\017\022\020\037\021\104\022\063\023\116\024\111\025" +
    "\034\026\105\027\106\030\030\031\031\032\075\033\065" +
    "\034\115\035\073\036\077\037\110\040\067\046\uffe2\047" +
    "\uffe2\075\uffe2\076\uffe2\077\uffe2\102\uffe2\103\uffe2\104\uffe2" +
    "\115\062\116\042\117\113\120\070\121\061\122\112\123" +
    "\046\124\056\125\041\126\047\127\102\130\045\131\051" +
    "\132\071\133\032\134\026\135\020\136\057\137\114\140" +
    "\074\141\117\142\120\143\053\144\040\145\050\146\033" +
    "\147\036\150\025\151\027\152\100\153\021\154\035\155" +
    "\024\156\060\157\055\160\uffe2\161\uffe2\162\uffe2\163\uffe2" +
    "\001\002\000\032\046\215\047\232\075\234\076\231\077" +
    "\uffea\102\230\103\241\104\214\160\227\161\221\162\222" +
    "\163\223\001\002\000\004\065\u0180\001\002\000\032\014" +
    "\uff79\050\275\051\276\052\300\053\274\054\272\055\273" +
    "\056\270\057\301\060\277\066\uff79\107\uff79\001\002\000" +
    "\032\046\uffde\047\uffde\075\uffde\076\uffde\077\uffde\102\uffde" +
    "\103\uffde\104\uffde\160\uffde\161\uffde\162\uffde\163\uffde\001" +
    "\002\000\004\077\u017b\001\002\000\032\046\215\047\232" +
    "\075\234\076\231\077\uffea\102\230\103\241\104\214\160" +
    "\227\161\221\162\222\163\223\001\002\000\034\014\uff94" +
    "\061\373\062\365\063\362\064\370\065\372\066\374\067" +
    "\364\070\363\071\360\072\366\073\367\107\uff94\001\002" +
    "\000\010\014\uff6f\066\uff6f\107\uff6f\001\002\000\010\014" +
    "\uff6e\066\uff6e\107\uff6e\001\002\000\004\014\u0178\001\002" +
    "\000\010\014\uffad\066\uffad\107\uffad\001\002\000\010\014" +
    "\uffac\066\uffac\107\uffac\001\002\000\056\014\uffa3\045\u0167" +
    "\050\275\051\276\052\300\053\274\054\272\055\273\056" +
    "\270\057\301\060\277\061\334\062\324\063\327\064\320" +
    "\065\333\067\321\070\332\071\322\072\316\073\326\074" +
    "\u0166\001\002\000\004\065\u015b\001\002\000\004\065\u0154" +
    "\001\002\000\032\014\uff79\050\275\051\276\052\300\053" +
    "\274\054\272\055\273\056\270\057\301\060\277\066\uff79" +
    "\107\uff79\001\002\000\010\014\uffae\066\uffae\107\uffae\001" +
    "\002\000\004\074\u0149\001\002\000\032\046\uffdc\047\uffdc" +
    "\075\uffdc\076\uffdc\077\uffdc\102\uffdc\103\uffdc\104\uffdc\160" +
    "\uffdc\161\uffdc\162\uffdc\163\uffdc\001\002\000\032\046\uffdd" +
    "\047\uffdd\075\uffdd\076\uffdd\077\uffdd\102\uffdd\103\uffdd\104" +
    "\uffdd\160\uffdd\161\uffdd\162\uffdd\163\uffdd\001\002\000\032" +
    "\046\uffe6\047\uffe6\075\uffe6\076\uffe6\077\uffe6\102\uffe6\103" +
    "\uffe6\104\uffe6\160\uffe6\161\uffe6\162\uffe6\163\uffe6\001\002" +
    "\000\032\046\uffdb\047\uffdb\075\uffdb\076\uffdb\077\uffdb\102" +
    "\uffdb\103\uffdb\104\uffdb\160\uffdb\161\uffdb\162\uffdb\163\uffdb" +
    "\001\002\000\004\010\242\001\002\000\024\075\243\076" +
    "\250\077\255\100\251\101\244\102\254\103\246\104\252" +
    "\160\247\001\002\000\004\074\u0144\001\002\000\004\014" +
    "\u0143\001\002\000\026\011\uffcc\075\uffcc\076\uffcc\077\uffcc" +
    "\100\uffcc\101\uffcc\102\uffcc\103\uffcc\104\uffcc\160\uffcc\001" +
    "\002\000\004\010\u013a\001\002\000\010\045\u0127\065\u0129" +
    "\074\u0124\001\002\000\004\065\u011d\001\002\000\004\014" +
    "\u011c\001\002\000\004\065\u010f\001\002\000\026\011\uffd2" +
    "\075\243\076\250\077\255\100\251\101\244\102\254\103" +
    "\246\104\252\160\247\001\002\000\004\065\257\001\002" +
    "\000\004\014\256\001\002\000\026\011\uffcb\075\uffcb\076" +
    "\uffcb\077\uffcb\100\uffcb\101\uffcb\102\uffcb\103\uffcb\104\uffcb" +
    "\160\uffcb\001\002\000\004\160\260\001\002\000\004\045" +
    "\u0106\001\002\000\004\014\262\001\002\000\010\046\266" +
    "\047\263\160\265\001\002\000\032\014\uff79\050\275\051" +
    "\276\052\300\053\274\054\272\055\273\056\270\057\301" +
    "\060\277\066\uff79\107\uff79\001\002\000\004\014\304\001" +
    "\002\000\032\014\uff79\050\275\051\276\052\300\053\274" +
    "\054\272\055\273\056\270\057\301\060\277\066\uff79\107" +
    "\uff79\001\002\000\032\014\uff79\050\275\051\276\052\300" +
    "\053\274\054\272\055\273\056\270\057\301\060\277\066" +
    "\uff79\107\uff79\001\002\000\010\014\uff7d\066\uff7d\107\uff7d" +
    "\001\002\000\010\046\uff72\047\uff72\160\uff72\001\002\000" +
    "\010\046\266\047\263\160\265\001\002\000\010\046\uff74" +
    "\047\uff74\160\uff74\001\002\000\010\046\uff73\047\uff73\160" +
    "\uff73\001\002\000\010\046\uff75\047\uff75\160\uff75\001\002" +
    "\000\010\046\uff78\047\uff78\160\uff78\001\002\000\010\046" +
    "\uff77\047\uff77\160\uff77\001\002\000\010\046\uff70\047\uff70" +
    "\160\uff70\001\002\000\010\046\uff76\047\uff76\160\uff76\001" +
    "\002\000\010\046\uff71\047\uff71\160\uff71\001\002\000\010" +
    "\014\uff7a\066\uff7a\107\uff7a\001\002\000\010\014\uff7b\066" +
    "\uff7b\107\uff7b\001\002\000\020\046\215\047\232\075\234" +
    "\160\305\161\221\162\222\163\223\001\002\000\060\014" +
    "\uffa3\050\275\051\276\052\300\053\274\054\272\055\273" +
    "\056\270\057\301\060\277\061\334\062\324\063\327\064" +
    "\320\065\333\066\uffa3\067\321\070\332\071\322\072\316" +
    "\073\326\074\325\107\uffa3\001\002\000\004\066\307\001" +
    "\002\000\004\010\310\001\002\000\024\075\243\076\250" +
    "\077\255\100\251\101\244\102\254\103\246\104\252\160" +
    "\247\001\002\000\026\011\uffd2\075\243\076\250\077\255" +
    "\100\251\101\244\102\254\103\246\104\252\160\247\001" +
    "\002\000\026\011\uffd2\075\243\076\250\077\255\100\251" +
    "\101\244\102\254\103\246\104\252\160\247\001\002\000" +
    "\004\011\314\001\002\000\026\011\uffce\075\uffce\076\uffce" +
    "\077\uffce\100\uffce\101\uffce\102\uffce\103\uffce\104\uffce\160" +
    "\uffce\001\002\000\004\011\uffd3\001\002\000\010\075\uff7f" +
    "\160\uff7f\161\uff7f\001\002\000\010\046\266\047\263\160" +
    "\265\001\002\000\010\075\uff83\160\uff83\161\uff83\001\002" +
    "\000\010\075\uff82\160\uff82\161\uff82\001\002\000\010\075" +
    "\uff80\160\uff80\161\uff80\001\002\000\010\075\353\160\354" +
    "\161\352\001\002\000\010\075\uff85\160\uff85\161\uff85\001" +
    "\002\000\004\160\350\001\002\000\010\075\uff7e\160\uff7e" +
    "\161\uff7e\001\002\000\010\075\uff84\160\uff84\161\uff84\001" +
    "\002\000\010\014\uffb0\066\uffb0\107\uffb0\001\002\000\010" +
    "\014\uffa7\066\uffa7\107\uffa7\001\002\000\010\075\uff81\160" +
    "\uff81\161\uff81\001\002\000\010\066\340\075\335\160\337" +
    "\001\002\000\010\075\uff86\160\uff86\161\uff86\001\002\000" +
    "\004\074\345\001\002\000\010\014\uffa6\066\uffa6\107\uffa6" +
    "\001\002\000\006\015\341\066\342\001\002\000\010\014" +
    "\uff9b\066\uff9b\107\uff9b\001\002\000\010\066\340\075\335" +
    "\160\337\001\002\000\010\014\uff99\066\uff99\107\uff99\001" +
    "\002\000\010\014\uff9d\066\uff9d\107\uff9d\001\002\000\010" +
    "\014\uff9a\066\uff9a\107\uff9a\001\002\000\004\160\346\001" +
    "\002\000\006\015\341\066\342\001\002\000\010\014\uff9c" +
    "\066\uff9c\107\uff9c\001\002\000\056\014\uffa3\050\275\051" +
    "\276\052\300\053\274\054\272\055\273\056\270\057\301" +
    "\060\277\061\334\062\324\063\327\064\320\065\333\066" +
    "\uffa3\067\321\070\332\071\322\072\316\073\326\107\uffa3" +
    "\001\002\000\010\014\uffa8\066\uffa8\107\uffa8\001\002\000" +
    "\034\014\uff94\061\373\062\365\063\362\064\370\065\372" +
    "\066\374\067\364\070\363\071\360\072\366\073\367\107" +
    "\uff94\001\002\000\004\074\377\001\002\000\036\014\uff92" +
    "\061\uff92\062\uff92\063\uff92\064\uff92\065\uff92\066\uff92\067" +
    "\uff92\070\uff92\071\uff92\072\uff92\073\uff92\074\356\107\uff92" +
    "\001\002\000\010\014\uffa5\066\uffa5\107\uffa5\001\002\000" +
    "\004\160\376\001\002\000\034\014\uff94\061\373\062\365" +
    "\063\362\064\370\065\372\066\374\067\364\070\363\071" +
    "\360\072\366\073\367\107\uff94\001\002\000\010\075\uff89" +
    "\160\uff89\161\uff89\001\002\000\010\075\353\160\354\161" +
    "\352\001\002\000\010\075\uff8f\160\uff8f\161\uff8f\001\002" +
    "\000\010\075\uff8a\160\uff8a\161\uff8a\001\002\000\010\075" +
    "\uff8b\160\uff8b\161\uff8b\001\002\000\010\075\uff90\160\uff90" +
    "\161\uff90\001\002\000\010\075\uff88\160\uff88\161\uff88\001" +
    "\002\000\010\075\uff87\160\uff87\161\uff87\001\002\000\010" +
    "\075\uff8e\160\uff8e\161\uff8e\001\002\000\010\014\uff97\066" +
    "\uff97\107\uff97\001\002\000\010\075\uff8d\160\uff8d\161\uff8d" +
    "\001\002\000\010\075\uff91\160\uff91\161\uff91\001\002\000" +
    "\010\075\uff8c\160\uff8c\161\uff8c\001\002\000\010\014\uff95" +
    "\066\uff95\107\uff95\001\002\000\034\014\uff93\061\uff93\062" +
    "\uff93\063\uff93\064\uff93\065\uff93\066\uff93\067\uff93\070\uff93" +
    "\071\uff93\072\uff93\073\uff93\107\uff93\001\002\000\004\160" +
    "\u0100\001\002\000\036\014\uff92\061\uff92\062\uff92\063\uff92" +
    "\064\uff92\065\uff92\066\uff92\067\uff92\070\uff92\071\uff92\072" +
    "\uff92\073\uff92\074\356\107\uff92\001\002\000\034\014\uff94" +
    "\061\373\062\365\063\362\064\370\065\372\066\374\067" +
    "\364\070\363\071\360\072\366\073\367\107\uff94\001\002" +
    "\000\010\014\uff96\066\uff96\107\uff96\001\002\000\010\014" +
    "\uff98\066\uff98\107\uff98\001\002\000\010\014\uffa4\066\uffa4" +
    "\107\uffa4\001\002\000\010\014\uff7c\066\uff7c\107\uff7c\001" +
    "\002\000\020\046\215\047\232\075\234\160\305\161\221" +
    "\162\222\163\223\001\002\000\004\014\uffbe\001\002\000" +
    "\004\011\u0109\001\002\000\004\076\u010a\001\002\000\004" +
    "\065\u010b\001\002\000\010\046\266\047\263\160\265\001" +
    "\002\000\004\066\u010d\001\002\000\004\014\u010e\001\002" +
    "\000\032\046\uffd8\047\uffd8\075\uffd8\076\uffd8\077\uffd8\102" +
    "\uffd8\103\uffd8\104\uffd8\160\uffd8\161\uffd8\162\uffd8\163\uffd8" +
    "\001\002\000\010\046\266\047\263\160\265\001\002\000" +
    "\004\066\u0111\001\002\000\004\010\u0112\001\002\000\024" +
    "\075\243\076\250\077\255\100\251\101\244\102\254\103" +
    "\246\104\252\160\247\001\002\000\026\011\uffd2\075\243" +
    "\076\250\077\255\100\251\101\244\102\254\103\246\104" +
    "\252\160\247\001\002\000\004\011\u0115\001\002\000\030" +
    "\011\uffc1\075\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1\102" +
    "\uffc1\103\uffc1\104\uffc1\105\u0117\160\uffc1\001\002\000\026" +
    "\011\uffc3\075\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\102" +
    "\uffc3\103\uffc3\104\uffc3\160\uffc3\001\002\000\004\010\u0118" +
    "\001\002\000\024\075\243\076\250\077\255\100\251\101" +
    "\244\102\254\103\246\104\252\160\247\001\002\000\026" +
    "\011\uffd2\075\243\076\250\077\255\100\251\101\244\102" +
    "\254\103\246\104\252\160\247\001\002\000\004\011\u011b" +
    "\001\002\000\026\011\uffc2\075\uffc2\076\uffc2\077\uffc2\100" +
    "\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\160\uffc2\001\002" +
    "\000\026\011\uffca\075\uffca\076\uffca\077\uffca\100\uffca\101" +
    "\uffca\102\uffca\103\uffca\104\uffca\160\uffca\001\002\000\010" +
    "\046\266\047\263\160\265\001\002\000\004\066\u011f\001" +
    "\002\000\004\010\u0120\001\002\000\024\075\243\076\250" +
    "\077\255\100\251\101\244\102\254\103\246\104\252\160" +
    "\247\001\002\000\026\011\uffd2\075\243\076\250\077\255" +
    "\100\251\101\244\102\254\103\246\104\252\160\247\001" +
    "\002\000\004\011\u0123\001\002\000\026\011\uffcf\075\uffcf" +
    "\076\uffcf\077\uffcf\100\uffcf\101\uffcf\102\uffcf\103\uffcf\104" +
    "\uffcf\160\uffcf\001\002\000\004\160\u0138\001\002\000\026" +
    "\011\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1\101\uffd1\102" +
    "\uffd1\103\uffd1\104\uffd1\160\uffd1\001\002\000\026\011\uffc7" +
    "\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103" +
    "\uffc7\104\uffc7\160\uffc7\001\002\000\022\046\215\047\232" +
    "\065\u012f\075\234\160\305\161\221\162\222\163\223\001" +
    "\002\000\026\011\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5" +
    "\101\uffc5\102\uffc5\103\uffc5\104\uffc5\160\uffc5\001\002\000" +
    "\002\001\002\000\026\011\uffc6\075\uffc6\076\uffc6\077\uffc6" +
    "\100\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\160\uffc6\001" +
    "\002\000\004\066\u012c\001\002\000\004\014\u012d\001\002" +
    "\000\026\011\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf\101" +
    "\uffbf\102\uffbf\103\uffbf\104\uffbf\160\uffbf\001\002\000\004" +
    "\014\u0137\001\002\000\010\046\266\047\263\160\265\001" +
    "\002\000\004\066\u0131\001\002\000\004\106\u0132\001\002" +
    "\000\020\046\215\047\232\075\234\160\305\161\221\162" +
    "\222\163\223\001\002\000\004\107\u0134\001\002\000\020" +
    "\046\215\047\232\075\234\160\305\161\221\162\222\163" +
    "\223\001\002\000\004\014\u0136\001\002\000\026\011\uffc4" +
    "\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4\102\uffc4\103" +
    "\uffc4\104\uffc4\160\uffc4\001\002\000\026\011\uffc0\075\uffc0" +
    "\076\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\104" +
    "\uffc0\160\uffc0\001\002\000\006\045\u0127\065\u0129\001\002" +
    "\000\026\011\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\101" +
    "\uffc8\102\uffc8\103\uffc8\104\uffc8\160\uffc8\001\002\000\024" +
    "\075\243\076\250\077\255\100\251\101\244\102\254\103" +
    "\246\104\252\160\247\001\002\000\026\011\uffd2\075\243" +
    "\076\250\077\255\100\251\101\244\102\254\103\246\104" +
    "\252\160\247\001\002\000\004\011\u013d\001\002\000\004" +
    "\076\u013e\001\002\000\004\065\u013f\001\002\000\010\046" +
    "\266\047\263\160\265\001\002\000\004\066\u0141\001\002" +
    "\000\004\014\u0142\001\002\000\026\011\uffcd\075\uffcd\076" +
    "\uffcd\077\uffcd\100\uffcd\101\uffcd\102\uffcd\103\uffcd\104\uffcd" +
    "\160\uffcd\001\002\000\026\011\uffc9\075\uffc9\076\uffc9\077" +
    "\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\160\uffc9" +
    "\001\002\000\004\160\u0145\001\002\000\004\045\u0146\001" +
    "\002\000\020\046\215\047\232\075\234\160\305\161\221" +
    "\162\222\163\223\001\002\000\004\014\u0148\001\002\000" +
    "\026\011\uffd0\075\uffd0\076\uffd0\077\uffd0\100\uffd0\101\uffd0" +
    "\102\uffd0\103\uffd0\104\uffd0\160\uffd0\001\002\000\004\160" +
    "\u014b\001\002\000\010\014\uffaf\066\uffaf\107\uffaf\001\002" +
    "\000\056\014\uff9e\050\275\051\276\052\300\053\274\054" +
    "\272\055\273\056\270\057\301\060\277\061\334\062\324" +
    "\063\327\064\320\065\u014f\066\uff9e\067\321\070\332\071" +
    "\322\072\316\073\326\107\uff9e\001\002\000\010\046\266" +
    "\047\263\160\265\001\002\000\010\075\353\160\354\161" +
    "\352\001\002\000\010\014\uffa2\066\uffa2\107\uffa2\001\002" +
    "\000\010\066\340\075\335\160\337\001\002\000\010\014" +
    "\uffa1\066\uffa1\107\uffa1\001\002\000\010\014\uffa0\066\uffa0" +
    "\107\uffa0\001\002\000\010\014\uff9f\066\uff9f\107\uff9f\001" +
    "\002\000\010\014\uffaa\066\uffaa\107\uffaa\001\002\000\020" +
    "\046\215\047\232\075\234\160\305\161\221\162\222\163" +
    "\223\001\002\000\004\066\u0156\001\002\000\004\010\u0157" +
    "\001\002\000\024\075\243\076\250\077\255\100\251\101" +
    "\244\102\254\103\246\104\252\160\247\001\002\000\026" +
    "\011\uffd2\075\243\076\250\077\255\100\251\101\244\102" +
    "\254\103\246\104\252\160\247\001\002\000\004\011\u015a" +
    "\001\002\000\032\046\uffda\047\uffda\075\uffda\076\uffda\077" +
    "\uffda\102\uffda\103\uffda\104\uffda\160\uffda\161\uffda\162\uffda" +
    "\163\uffda\001\002\000\004\160\260\001\002\000\004\014" +
    "\u015d\001\002\000\010\046\266\047\263\160\265\001\002" +
    "\000\004\014\u015f\001\002\000\020\046\215\047\232\075" +
    "\234\160\305\161\221\162\222\163\223\001\002\000\004" +
    "\066\u0161\001\002\000\004\010\u0162\001\002\000\024\075" +
    "\243\076\250\077\255\100\251\101\244\102\254\103\246" +
    "\104\252\160\247\001\002\000\026\011\uffd2\075\243\076" +
    "\250\077\255\100\251\101\244\102\254\103\246\104\252" +
    "\160\247\001\002\000\004\011\u0165\001\002\000\032\046" +
    "\uffd9\047\uffd9\075\uffd9\076\uffd9\077\uffd9\102\uffd9\103\uffd9" +
    "\104\uffd9\160\uffd9\161\uffd9\162\uffd9\163\uffd9\001\002\000" +
    "\004\160\u0175\001\002\000\022\046\215\047\232\065\u016c" +
    "\075\234\160\305\161\221\162\222\163\223\001\002\000" +
    "\032\046\uffe4\047\uffe4\075\uffe4\076\uffe4\077\uffe4\102\uffe4" +
    "\103\uffe4\104\uffe4\160\uffe4\161\uffe4\162\uffe4\163\uffe4\001" +
    "\002\000\032\046\uffe5\047\uffe5\075\uffe5\076\uffe5\077\uffe5" +
    "\102\uffe5\103\uffe5\104\uffe5\160\uffe5\161\uffe5\162\uffe5\163" +
    "\uffe5\001\002\000\032\046\uffe9\047\uffe9\075\uffe9\076\uffe9" +
    "\077\uffe9\102\uffe9\103\uffe9\104\uffe9\160\uffe9\161\uffe9\162" +
    "\uffe9\163\uffe9\001\002\000\004\014\u0174\001\002\000\010" +
    "\046\266\047\263\160\265\001\002\000\004\066\u016e\001" +
    "\002\000\004\106\u016f\001\002\000\020\046\215\047\232" +
    "\075\234\160\305\161\221\162\222\163\223\001\002\000" +
    "\004\107\u0171\001\002\000\020\046\215\047\232\075\234" +
    "\160\305\161\221\162\222\163\223\001\002\000\004\014" +
    "\u0173\001\002\000\032\046\uffd4\047\uffd4\075\uffd4\076\uffd4" +
    "\077\uffd4\102\uffd4\103\uffd4\104\uffd4\160\uffd4\161\uffd4\162" +
    "\uffd4\163\uffd4\001\002\000\032\046\uffbd\047\uffbd\075\uffbd" +
    "\076\uffbd\077\uffbd\102\uffbd\103\uffbd\104\uffbd\160\uffbd\161" +
    "\uffbd\162\uffbd\163\uffbd\001\002\000\054\014\uffa3\045\u0176" +
    "\050\275\051\276\052\300\053\274\054\272\055\273\056" +
    "\270\057\301\060\277\061\334\062\324\063\327\064\320" +
    "\065\333\067\321\070\332\071\322\072\316\073\326\001" +
    "\002\000\022\046\215\047\232\065\u016c\075\234\160\305" +
    "\161\221\162\222\163\223\001\002\000\032\046\uffe8\047" +
    "\uffe8\075\uffe8\076\uffe8\077\uffe8\102\uffe8\103\uffe8\104\uffe8" +
    "\160\uffe8\161\uffe8\162\uffe8\163\uffe8\001\002\000\032\046" +
    "\uffe7\047\uffe7\075\uffe7\076\uffe7\077\uffe7\102\uffe7\103\uffe7" +
    "\104\uffe7\160\uffe7\161\uffe7\162\uffe7\163\uffe7\001\002\000" +
    "\010\014\uffa9\066\uffa9\107\uffa9\001\002\000\004\077\uffeb" +
    "\001\002\000\020\046\215\047\232\075\234\160\305\161" +
    "\221\162\222\163\223\001\002\000\004\014\u017d\001\002" +
    "\000\004\011\u017e\001\002\000\006\011\ufff5\111\ufff5\001" +
    "\002\000\010\014\uffab\066\uffab\107\uffab\001\002\000\010" +
    "\046\266\047\263\160\265\001\002\000\004\066\u0182\001" +
    "\002\000\004\010\u0183\001\002\000\024\075\243\076\250" +
    "\077\255\100\251\101\244\102\254\103\246\104\252\160" +
    "\247\001\002\000\026\011\uffd2\075\243\076\250\077\255" +
    "\100\251\101\244\102\254\103\246\104\252\160\247\001" +
    "\002\000\004\011\u0186\001\002\000\034\046\uffd5\047\uffd5" +
    "\075\uffd5\076\uffd5\077\uffd5\102\uffd5\103\uffd5\104\uffd5\105" +
    "\u0187\160\uffd5\161\uffd5\162\uffd5\163\uffd5\001\002\000\004" +
    "\010\u0189\001\002\000\032\046\uffd7\047\uffd7\075\uffd7\076" +
    "\uffd7\077\uffd7\102\uffd7\103\uffd7\104\uffd7\160\uffd7\161\uffd7" +
    "\162\uffd7\163\uffd7\001\002\000\024\075\243\076\250\077" +
    "\255\100\251\101\244\102\254\103\246\104\252\160\247" +
    "\001\002\000\026\011\uffd2\075\243\076\250\077\255\100" +
    "\251\101\244\102\254\103\246\104\252\160\247\001\002" +
    "\000\004\011\u018c\001\002\000\032\046\uffd6\047\uffd6\075" +
    "\uffd6\076\uffd6\077\uffd6\102\uffd6\103\uffd6\104\uffd6\160\uffd6" +
    "\161\uffd6\162\uffd6\163\uffd6\001\002\000\032\046\uffe3\047" +
    "\uffe3\075\uffe3\076\uffe3\077\uffe3\102\uffe3\103\uffe3\104\uffe3" +
    "\160\uffe3\161\uffe3\162\uffe3\163\uffe3\001\002\000\004\160" +
    "\u018f\001\002\000\006\015\173\066\ufff3\001\002\000\004" +
    "\066\ufff4\001\002\000\004\011\ufffb\001\002\000\010\043" +
    "\127\044\130\160\uffb1\001\002\000\004\160\u0194\001\002" +
    "\000\006\014\u0197\045\u0195\001\002\000\020\046\215\047" +
    "\232\075\234\160\305\161\221\162\222\163\223\001\002" +
    "\000\214\011\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022" +
    "\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9" +
    "\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037" +
    "\uffb9\040\uffb9\046\uffb9\047\uffb9\075\uffb9\076\uffb9\077\uffb9" +
    "\102\uffb9\103\uffb9\104\uffb9\110\uffb9\111\uffb9\115\uffb9\116" +
    "\uffb9\117\uffb9\120\uffb9\121\uffb9\122\uffb9\123\uffb9\124\uffb9" +
    "\125\uffb9\126\uffb9\127\uffb9\130\uffb9\131\uffb9\132\uffb9\133" +
    "\uffb9\134\uffb9\135\uffb9\136\uffb9\137\uffb9\140\uffb9\141\uffb9" +
    "\142\uffb9\143\uffb9\144\uffb9\145\uffb9\146\uffb9\147\uffb9\150" +
    "\uffb9\151\uffb9\152\uffb9\153\uffb9\154\uffb9\155\uffb9\156\uffb9" +
    "\157\uffb9\160\uffb9\161\uffb9\162\uffb9\163\uffb9\001\002\000" +
    "\214\011\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031" +
    "\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\046\uffb8\047\uffb8\075\uffb8\076\uffb8\077\uffb8\102" +
    "\uffb8\103\uffb8\104\uffb8\110\uffb8\111\uffb8\115\uffb8\116\uffb8" +
    "\117\uffb8\120\uffb8\121\uffb8\122\uffb8\123\uffb8\124\uffb8\125" +
    "\uffb8\126\uffb8\127\uffb8\130\uffb8\131\uffb8\132\uffb8\133\uffb8" +
    "\134\uffb8\135\uffb8\136\uffb8\137\uffb8\140\uffb8\141\uffb8\142" +
    "\uffb8\143\uffb8\144\uffb8\145\uffb8\146\uffb8\147\uffb8\150\uffb8" +
    "\151\uffb8\152\uffb8\153\uffb8\154\uffb8\155\uffb8\156\uffb8\157" +
    "\uffb8\160\uffb8\161\uffb8\162\uffb8\163\uffb8\001\002\000\004" +
    "\014\u0199\001\002\000\214\011\uffb7\016\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7" +
    "\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\046\uffb7\047\uffb7\075\uffb7" +
    "\076\uffb7\077\uffb7\102\uffb7\103\uffb7\104\uffb7\110\uffb7\111" +
    "\uffb7\115\uffb7\116\uffb7\117\uffb7\120\uffb7\121\uffb7\122\uffb7" +
    "\123\uffb7\124\uffb7\125\uffb7\126\uffb7\127\uffb7\130\uffb7\131" +
    "\uffb7\132\uffb7\133\uffb7\134\uffb7\135\uffb7\136\uffb7\137\uffb7" +
    "\140\uffb7\141\uffb7\142\uffb7\143\uffb7\144\uffb7\145\uffb7\146" +
    "\uffb7\147\uffb7\150\uffb7\151\uffb7\152\uffb7\153\uffb7\154\uffb7" +
    "\155\uffb7\156\uffb7\157\uffb7\160\uffb7\161\uffb7\162\uffb7\163" +
    "\uffb7\001\002\000\004\014\uffb6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0198\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\063" +
    "\005\051\006\043\007\065\011\075\014\100\016\022\021" +
    "\042\067\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\u0191\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\u0190" +
    "\006\043\007\065\014\100\016\022\021\042\067\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\004\145\005\051\006\043\007\065\011\075" +
    "\014\100\016\022\021\042\067\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\144\014\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\120\007\065" +
    "\014\100\067\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\123\001\001\000\004\017\125\001\001\000\002\001" +
    "\001\000\004\020\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\133\070\134\001\001\000\004\017\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\133\070\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\155\001\001\000\002" +
    "\001\001\000\004\140\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\004\163\005\051" +
    "\006\043\007\065\011\075\014\100\016\022\021\042\067" +
    "\106\001\001\000\002\001\001\000\004\140\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\170\001" +
    "\001\000\002\001\001\000\004\075\173\001\001\000\004" +
    "\016\u018d\001\001\000\002\001\001\000\004\076\176\001" +
    "\001\000\002\001\001\000\004\077\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\022\021\211\074\212\001\001\000\010\016\022\021\211" +
    "\074\u018c\001\001\000\030\013\236\026\223\046\232\050" +
    "\215\057\235\061\234\062\237\073\217\100\216\131\225" +
    "\134\224\001\001\000\002\001\001\000\006\034\270\036" +
    "\u017e\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\013\236\026\223\046\232\050\215\057\235\061\234\062" +
    "\237\073\217\100\u0179\131\225\134\224\001\001\000\006" +
    "\031\360\035\u0178\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\034\316\105\327\130\322\136\330\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\034\270\036\u0152" +
    "\001\001\000\002\001\001\000\004\106\u0149\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\051\252\071\244\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\053\u0129\054\u0124\055\u0127\103" +
    "\u0125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\051\311\056\u0107\071\244\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\263\001\001\000\006\034\270\036\u0104\001\001" +
    "\000\002\001\001\000\006\034\270\036\302\001\001\000" +
    "\006\034\270\036\266\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\301\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\026\305" +
    "\046\232\131\225\134\224\001\001\000\012\034\316\105" +
    "\327\130\322\136\330\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\051\310\071\244\001\001\000\010\051" +
    "\311\056\312\071\244\001\001\000\010\051\311\056\314" +
    "\071\244\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\u0103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\354\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\132\335\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\133\342\001\001\000\002\001\001\000\004\132\343" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\133\346\001\001\000\002" +
    "\001\001\000\010\034\316\130\322\136\350\001\001\000" +
    "\002\001\001\000\006\031\360\035\u0102\001\001\000\002" +
    "\001\001\000\004\135\356\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\360\035\370\001\001\000\002" +
    "\001\001\000\004\027\374\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\135\u0100\001\001\000\006\031\360\035\u0101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\026\u0106\046\232\131\225\134\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\u010b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\u010f\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\051\u0112\071\244\001\001\000\010\051\311\056\u0113\071" +
    "\244\001\001\000\002\001\001\000\004\072\u0115\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\051\u0118\071" +
    "\244\001\001\000\010\051\311\056\u0119\071\244\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\u011d\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\051\u0120\071\244\001\001\000\010\051\311\056" +
    "\u0121\071\244\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\026\u012d\046\232\131\225\134\224\001\001\000\002" +
    "\001\001\000\004\041\u012a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\u012f\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\026\u0132\046\232\131\225\134\224" +
    "\001\001\000\002\001\001\000\012\026\u0134\046\232\131" +
    "\225\134\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\053\u0129\055\u0127\103\u0138\001" +
    "\001\000\002\001\001\000\006\051\u013a\071\244\001\001" +
    "\000\010\051\311\056\u013b\071\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\u013f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\026\u0146\046\232\131\225\134\224\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\034\u014b\120\u014d\130\u014c\001\001\000" +
    "\004\032\u0151\001\001\000\004\027\u0150\001\001\000\002" +
    "\001\001\000\004\132\u014f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\026\u0154\046\232\131\225\134\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\051\u0157\071\244\001\001" +
    "\000\010\051\311\056\u0158\071\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\u015b\001\001\000\002" +
    "\001\001\000\004\032\u015d\001\001\000\002\001\001\000" +
    "\012\026\u015f\046\232\131\225\134\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\051\u0162\071\244\001" +
    "\001\000\010\051\311\056\u0163\071\244\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\026" +
    "\u016a\046\232\064\u0167\102\u0168\104\u0169\131\225\134\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\u016c\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\026\u016f\046\232\131" +
    "\225\134\224\001\001\000\002\001\001\000\012\026\u0171" +
    "\046\232\131\225\134\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\034\316\130\322" +
    "\136\350\001\001\000\020\026\u016a\046\232\064\u0167\102" +
    "\u0168\104\u0176\131\225\134\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\026\u017b\046\232\131\225\134\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\u0180\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\051\u0183\071\244\001\001\000\010\051" +
    "\311\056\u0184\071\244\001\001\000\002\001\001\000\004" +
    "\063\u0187\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\051\u0189\071\244\001\001\000\010\051\311\056\u018a" +
    "\071\244\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\075\u018f\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\u0192\001" +
    "\001\000\002\001\001\000\006\023\u0197\047\u0195\001\001" +
    "\000\012\026\u0199\046\232\131\225\134\224\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static LinkedList<TError> TablaES = new LinkedList<TError>(); 

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
     
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico$actions {



  private final analisis_sintactico parser;

  /** Constructor */
  CUP$analisis_sintactico$actions(analisis_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action_part00000000(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico$parser.done_parsing();
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= pragma solidity techo numero numero punto_coma contract ident O_Parent_L BODY_CONTRACT C_Parent_L INICIO_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO_S ::= contract ident O_Parent_L BODY_CONTRACT C_Parent_L INICIO_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_S",94, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO_S",94, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BODY_CONTRACT ::= EN BODY_CONTRACT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BODY_CONTRACT ::= BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BODY_CONTRACT_P ::= VAR_CONTRACT BODY_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BODY_CONTRACT_P ::= BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_P",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BODY_CONTRACT_PP ::= STRUCTURE BODY_CONTRACT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BODY_CONTRACT_PP ::= BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PP",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BODY_CONTRACT_PPP ::= FUNC BODY_CONTRACT_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BODY_CONTRACT_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_CONTRACT_PPP",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNC ::= functionSoli ident O_Parent_R TIPO ident FUNC_PARAM C_Parent_R FUNC_MOD FUNC_RETURNS O_Parent_L CUERPO_ASSIGN CUERPO_M returnSoli EXP punto_coma C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-15)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNC_PARAM ::= coma TIPO ident FUNC_PARAM 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNC_PARAM ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_PARAM",59, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNC_MOD ::= payableSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNC_MOD ::= privateSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNC_MOD ::= publicSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNC_MOD ::= internalSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNC_MOD ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_MOD",60, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNC_RETURNS ::= returns O_Parent_R TIPO ident C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_RETURNS",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNC_RETURNS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_RETURNS",61, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPO_M ::= CUERPO CUERPO_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO_M ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_M",62, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO ::= ident igual CUERPO_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPO ::= ident punto ident igual CUERPO_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPO ::= EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CUERPO ::= STRU 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",57, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPO_P ::= ASSIGN_NOT_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_P",66, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPO_P ::= STRU_IF_LINE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_P",66, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPO_ASSIGN ::= VAR_CONTRACT CUERPO_ASSIGN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN",58, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPO_ASSIGN ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_ASSIGN",58, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // STRUCTURE ::= structSoli ident O_Parent_L TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE",53, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // STRUCTURE_VAR ::= TIPO VAR_ARR VAR_ACCESS ident punto_coma STRUCTURE_VAR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // STRUCTURE_VAR ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRUCTURE_VAR",54, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // STRU ::= STRU_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // STRU ::= STRU_FOR 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // STRU ::= STRU_DO_WHILE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // STRU ::= STRU_IF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // STRU_WHILE ::= whileSoli O_Parent_R EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_WHILE",38, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // STRU_FOR ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_FOR",45, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // STRU_DO_WHILE ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_DO_WHILE",47, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // STRU_IF ::= ifSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L STRU_ELSE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF",48, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // STRU_ELSE ::= elseSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STRU_ELSE ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE",49, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STRU_IF_LINE ::= O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP punto_punto EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_LINE",50, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BODY_SENT_M ::= BODY_SENT BODY_SENT_M 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BODY_SENT_M ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_M",44, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BODY_SENT ::= ident BODY_SENT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BODY_SENT ::= thisSoli punto ident igual EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BODY_SENT ::= whileSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BODY_SENT ::= forSoli O_Parent_R FOR_VAR punto_coma OP_BOOL punto_coma EXP C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BODY_SENT ::= doSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L whileSoli O_Parent_R OP_BOOL C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BODY_SENT ::= STRU_IF_ELSE_IN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BODY_SENT ::= returnSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BODY_SENT ::= breakSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BODY_SENT ::= continueSoli punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT",39, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BODY_SENT_P ::= punto ident BODY_SENT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BODY_SENT_P ::= BODY_SENT_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_P",42, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BODY_SENT_PP ::= BODY_ASSIGN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BODY_SENT_PP ::= BODY_FUN_CALL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BODY_SENT_PP ::= igual O_Parent_R OP_BOOL C_Parent_R interrogacion_C EXP punto_punto EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_SENT_PP",65, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // STRU_IF_ELSE_IN ::= ifSoli O_Parent_R OP_BOOL C_Parent_R O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L STRU_ELSE_IN 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_IF_ELSE_IN",55, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // STRU_ELSE_IN ::= elseSoli O_Parent_L BODY_SENT BODY_SENT_M C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // STRU_ELSE_IN ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("STRU_ELSE_IN",56, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BODY_ASSIGN ::= igual EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_ASSIGN",41, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BODY_FUN_CALL ::= O_Parent_R FUNC_CALL_PARAMS C_Parent_R punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_FUN_CALL",43, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FOR_VAR ::= ident igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FOR_VAR",46, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASSIGN_NOT_VAR ::= EXP punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ASSIGN_NOT_VAR",64, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EN ::= enumSoli ident O_Parent_L ident EN_IDENT C_Parent_L 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EN_IDENT ::= coma ident EN_IDENT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EN_IDENT ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EN_IDENT",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VAR_CONTRACT ::= TIPO VAR_ARR VAR_ACCESS ident VAR_CONTRACT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VAR_CONTRACT_P ::= punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VAR_CONTRACT_P ::= VAR_CONTRACT_C punto_coma 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_P",37, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VAR_CONTRACT_C ::= igual EXP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_CONTRACT_C",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VAR_ARR ::= O_Parent_C C_Parent_C 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VAR_ARR ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ARR",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VAR_ACCESS ::= publicSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VAR_ACCESS ::= privateSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VAR_ACCESS ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAR_ACCESS",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= ident EXP_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= thisSoli EXP_PP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= BODY_LIT_TF 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= ARIT_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= BOOL_GATE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // BOOL_GATE ::= trueSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BOOL_GATE",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // BOOL_GATE ::= falseSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BOOL_GATE",87, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ARIT_GATE ::= numero OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ARIT_GATE",90, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP_P ::= punto ident EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P",67, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP_P ::= EXP_P_S 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P",67, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP_P_S ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP_P_S ::= OP_EXCL OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP_P_S ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP_P_S ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_P_S",92, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP_PP ::= punto ident EXP_PPP 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PP",68, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP_PPP ::= O_Parent_R FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP_PPP ::= OP_EXCL OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP_PPP ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP_PPP ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("EXP_PPP",78, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FUNC_CALL_CASE ::= ident FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FUNC_CALL_CASE ::= thisSoli punto ident FUNC_CALL_CASE_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FUNC_CALL_CASE ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE",88, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FUNC_CALL_CASE_P ::= coma FUNC_CALL_CASE 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE_P",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FUNC_CALL_CASE_P ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FUNC_CALL_CASE_P",89, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OP_ARIT ::= numero OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OP_ARIT ::= ident OP_ARIT_Parent OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OP_ARIT ::= thisSoli punto ident OP_ARIT_Parent OP_ARIT_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OP_ARIT_P ::= OP OP_ARIT 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OP_ARIT_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_P",27, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OP_ARIT_Parent ::= punto ident 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_Parent",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OP_ARIT_Parent ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT_Parent",91, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OP ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OP ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OP ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OP ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OP ::= O_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OP ::= C_Parent_R 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OP ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OP ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OP ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OP ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OP ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OP_EXCL ::= mas 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OP_EXCL ::= menos 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OP_EXCL ::= div 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OP_EXCL ::= por 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OP_EXCL ::= porcentaje 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OP_EXCL ::= mas_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OP_EXCL ::= menos_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OP_EXCL ::= por_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OP_EXCL ::= div_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_EXCL",86, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OP_BOOL ::= trueSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OP_BOOL ::= falseSoli OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OP_BOOL ::= ident OP_BOOL_P 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL",24, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OP_BOOL_P ::= OP_OP_BOOL OP_BOOL 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OP_BOOL_P ::= 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_BOOL_P",28, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OP_OP_BOOL ::= igual_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OP_OP_BOOL ::= mayor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OP_OP_BOOL ::= mayor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OP_OP_BOOL ::= menor_igual 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OP_OP_BOOL ::= menor 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OP_OP_BOOL ::= diferente 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OP_OP_BOOL ::= op_or 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OP_OP_BOOL ::= op_and 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OP_OP_BOOL ::= negacion 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP_OP_BOOL",26, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // BODY_LIT_TF ::= numero_HEX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // BODY_LIT_TF ::= stringSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY_LIT_TF",36, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // TIPO ::= bool 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // TIPO ::= byteSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // TIPO ::= bytes 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // TIPO ::= string 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // TIPO ::= uint 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // TIPO ::= uint_O 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // TIPO ::= uint_DS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // TIPO ::= uint_TD 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TIPO ::= uint_SC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TIPO ::= uint_CVO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // TIPO ::= uint_DCS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // TIPO ::= intSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // TIPO ::= int_O 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // TIPO ::= int_DS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // TIPO ::= int_TD 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // TIPO ::= int_SC 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // TIPO ::= int_CVO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // TIPO ::= int_DCS 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // TIPO ::= address 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // TIPO ::= address_payable 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // TIPO ::= charss 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // TIPO ::= ufixedSoli 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // TIPO ::= B_I 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // TIPO ::= B_II 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // TIPO ::= B_III 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // TIPO ::= B_IV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // TIPO ::= B_V 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // TIPO ::= B_VI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // TIPO ::= B_VII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // TIPO ::= B_IIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // TIPO ::= B_IX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // TIPO ::= B_X 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // TIPO ::= B_XI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // TIPO ::= B_XII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // TIPO ::= B_XIII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // TIPO ::= B_XIV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // TIPO ::= B_XV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // TIPO ::= B_XVI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // TIPO ::= B_XVII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // TIPO ::= B_XIIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // TIPO ::= B_XIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // TIPO ::= B_XX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // TIPO ::= B_XXI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // TIPO ::= B_XXII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // TIPO ::= B_XXIII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // TIPO ::= B_XXIV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // TIPO ::= B_XXV 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // TIPO ::= B_XXVI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // TIPO ::= B_XXVII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // TIPO ::= B_XXIIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // TIPO ::= B_XXIX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // TIPO ::= B_XXX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // TIPO ::= B_XXXI 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // TIPO ::= B_XXXII 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$analisis_sintactico$do_action_part00000000(
                               CUP$analisis_sintactico$act_num,
                               CUP$analisis_sintactico$parser,
                               CUP$analisis_sintactico$stack,
                               CUP$analisis_sintactico$top);
    }
}

}
