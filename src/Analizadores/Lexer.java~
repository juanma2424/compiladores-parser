// DO NOT EDIT
// Generated by JFlex 1.8.1 http://jflex.de/
// source: A_Lexico.jflex

/* JFlex example: partial Java language lexer specification */
package Analizadores;
import java.util.ArrayList;
import java_cup.runtime.*;
/**
    * This class is a simple example lexer.
    */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int Chars = 4;
  public static final int hexaState = 6;
  public static final int hexaStateC = 8;
  public static final int hexaStateError = 10;
  public static final int hexaStateCError = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  0,  1,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  4,  5,  0,  0,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 
    17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 
     0, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
    34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 35,  0, 36, 37, 38, 
     0, 39, 40, 41, 42, 43, 44, 45, 46, 47, 34, 48, 49, 50, 51, 52, 
    53, 34, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 67,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 67,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\21\27\1\33\1\6\1\34\1\6"+
    "\1\1\1\35\2\36\1\37\1\40\2\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\35\1\47\1\35\1\50\1\51"+
    "\1\52\2\53\1\54\2\1\3\0\1\55\1\0\1\56"+
    "\1\57\1\6\1\60\1\56\1\61\1\62\1\20\1\0"+
    "\1\2\1\63\2\64\1\65\1\66\1\67\3\56\2\0"+
    "\1\27\1\70\10\27\1\71\11\27\1\72\26\27\1\73"+
    "\1\0\1\20\6\0\1\56\4\2\1\56\2\0\2\64"+
    "\2\56\15\27\1\74\2\27\1\70\2\27\1\75\24\27"+
    "\1\76\1\27\3\0\1\2\3\56\2\0\2\56\2\2"+
    "\1\0\1\20\4\64\2\27\1\77\1\27\1\100\1\101"+
    "\3\27\1\102\1\103\3\27\1\104\1\105\5\27\1\106"+
    "\12\27\1\101\4\27\1\107\1\27\1\110\1\27\1\111"+
    "\1\27\1\0\1\2\2\56\1\0\1\20\2\64\2\27"+
    "\1\112\7\27\1\113\4\27\1\114\1\27\1\115\1\116"+
    "\23\27\1\117\1\120\1\0\1\64\2\0\1\64\2\27"+
    "\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130"+
    "\1\131\6\27\1\132\1\133\4\27\1\134\1\27\1\135"+
    "\1\136\1\27\1\137\1\140\1\27\1\141\1\27\1\142"+
    "\1\27\1\143\1\144\2\0\1\64\1\145\1\146\1\147"+
    "\1\150\1\151\1\152\1\153\1\154\1\155\1\156\1\157"+
    "\1\160\1\161\1\162\1\163\1\164\1\165\1\166\1\167"+
    "\1\170\1\171\1\172\1\173\1\174\6\27\1\175\1\176"+
    "\1\177\2\27\1\200\1\201\2\0\1\27\1\202\1\203"+
    "\1\27\1\204\1\205\1\206\4\27";

  private static int [] zzUnpackAction() {
    int [] result = new int[416];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u01dc\0\u02ec\0\u0330\0\u01dc\0\u0220"+
    "\0\u0220\0\u0374\0\u03b8\0\u0220\0\u03fc\0\u0440\0\u0484\0\u04c8"+
    "\0\u0220\0\u0220\0\u050c\0\u0550\0\u0594\0\u0220\0\u05d8\0\u0220"+
    "\0\u0220\0\u02ec\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770"+
    "\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990"+
    "\0\u09d4\0\u0a18\0\u0a5c\0\u0220\0\u0aa0\0\u0220\0\u02ec\0\u0ae4"+
    "\0\u0b28\0\u0220\0\u0b6c\0\u0220\0\u0220\0\u0220\0\u0bb0\0\u0220"+
    "\0\u0220\0\u0220\0\u0220\0\u0220\0\u0bf4\0\u0220\0\u0c38\0\u0220"+
    "\0\u0220\0\u0220\0\u0220\0\u0c7c\0\u0220\0\u0cc0\0\u0d04\0\u02ec"+
    "\0\u0d48\0\u0d8c\0\u0220\0\u0dd0\0\u0e14\0\u02ec\0\u0ae4\0\u0220"+
    "\0\u0e58\0\u0220\0\u0220\0\u0e9c\0\u0ee0\0\u0f24\0\u02ec\0\u0f68"+
    "\0\u0fac\0\u0220\0\u0220\0\u0220\0\u0ff0\0\u1034\0\u1078\0\u10bc"+
    "\0\u1100\0\u1144\0\u05d8\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298"+
    "\0\u12dc\0\u1320\0\u1364\0\u05d8\0\u13a8\0\u13ec\0\u1430\0\u1474"+
    "\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u05d8\0\u160c\0\u1650"+
    "\0\u1694\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870"+
    "\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90"+
    "\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u0220\0\u1be4\0\u1c28\0\u1c6c"+
    "\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c"+
    "\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac"+
    "\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc"+
    "\0\u2310\0\u2354\0\u2398\0\u23dc\0\u2420\0\u2464\0\u05d8\0\u24a8"+
    "\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8"+
    "\0\u270c\0\u2750\0\u2794\0\u27d8\0\u281c\0\u2860\0\u28a4\0\u28e8"+
    "\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08"+
    "\0\u2b4c\0\u05d8\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u1d38\0\u2ca0"+
    "\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0"+
    "\0\u2f04\0\u2f48\0\u1fe0\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c"+
    "\0\u05d8\0\u30e0\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u05d8"+
    "\0\u05d8\0\u3278\0\u32bc\0\u3300\0\u01dc\0\u01dc\0\u3344\0\u3388"+
    "\0\u33cc\0\u3410\0\u3454\0\u05d8\0\u3498\0\u34dc\0\u3520\0\u3564"+
    "\0\u35a8\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u36fc\0\u05d8\0\u3740"+
    "\0\u3784\0\u37c8\0\u380c\0\u05d8\0\u3850\0\u05d8\0\u3894\0\u38d8"+
    "\0\u391c\0\u3960\0\u0d48\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4"+
    "\0\u3af8\0\u3b3c\0\u3b80\0\u05d8\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90"+
    "\0\u3cd4\0\u3d18\0\u3d5c\0\u05d8\0\u3da0\0\u3de4\0\u3e28\0\u3e6c"+
    "\0\u05d8\0\u3eb0\0\u05d8\0\u05d8\0\u3ef4\0\u3f38\0\u3f7c\0\u3fc0"+
    "\0\u4004\0\u4048\0\u408c\0\u40d0\0\u4114\0\u4158\0\u419c\0\u41e0"+
    "\0\u4224\0\u4268\0\u42ac\0\u42f0\0\u4334\0\u4378\0\u43bc\0\u05d8"+
    "\0\u05d8\0\u4400\0\u4444\0\u4488\0\u44cc\0\u4510\0\u4554\0\u4598"+
    "\0\u45dc\0\u4620\0\u4664\0\u05d8\0\u05d8\0\u05d8\0\u05d8\0\u05d8"+
    "\0\u05d8\0\u46a8\0\u46ec\0\u4730\0\u4774\0\u47b8\0\u47fc\0\u05d8"+
    "\0\u05d8\0\u4840\0\u4884\0\u48c8\0\u490c\0\u05d8\0\u4950\0\u05d8"+
    "\0\u4994\0\u49d8\0\u05d8\0\u05d8\0\u4a1c\0\u05d8\0\u4a60\0\u05d8"+
    "\0\u4aa4\0\u05d8\0\u05d8\0\u4ae8\0\u4b2c\0\u4b70\0\u05d8\0\u05d8"+
    "\0\u05d8\0\u05d8\0\u05d8\0\u05d8\0\u05d8\0\u05d8\0\u05d8\0\u05d8"+
    "\0\u05d8\0\u05d8\0\u05d8\0\u05d8\0\u05d8\0\u05d8\0\u05d8\0\u05d8"+
    "\0\u05d8\0\u05d8\0\u05d8\0\u05d8\0\u05d8\0\u05d8\0\u4bb4\0\u4bf8"+
    "\0\u4c3c\0\u4c80\0\u4cc4\0\u4d08\0\u05d8\0\u05d8\0\u05d8\0\u4d4c"+
    "\0\u4d90\0\u05d8\0\u05d8\0\u4dd4\0\u4e18\0\u4e5c\0\u05d8\0\u05d8"+
    "\0\u4ea0\0\u05d8\0\u05d8\0\u05d8\0\u4ee4\0\u4f28\0\u4f6c\0\u4fb0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[416];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\2\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\12\30\1\31\1\32\1\33\1\34\1\35\1\36\2\37"+
    "\1\40\1\41\1\42\1\37\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\37\1\51\1\52\2\37\1\53\2\37"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\37"+
    "\1\63\1\37\1\64\1\65\1\66\1\67\1\70\2\71"+
    "\1\72\1\73\1\71\1\74\2\71\1\75\75\71\1\76"+
    "\1\77\1\71\1\100\2\71\1\101\73\71\5\102\1\103"+
    "\2\102\1\104\10\102\12\105\1\102\1\106\4\102\1\107"+
    "\42\102\5\110\1\111\2\110\1\103\10\110\12\105\1\110"+
    "\1\106\4\110\1\107\42\110\1\112\2\113\1\114\1\112"+
    "\1\115\26\112\1\115\57\112\1\115\23\112\1\115\47\112"+
    "\1\10\4\0\1\10\2\0\1\10\2\0\1\10\25\0"+
    "\2\116\3\0\1\117\30\116\4\0\1\10\106\0\1\11"+
    "\105\0\1\120\1\0\2\120\3\0\1\120\4\0\1\121"+
    "\14\0\1\122\1\123\1\124\1\0\2\125\2\0\1\120"+
    "\31\125\3\0\2\120\4\0\1\120\1\0\2\120\3\0"+
    "\1\120\4\0\1\121\14\0\1\122\1\0\1\124\1\0"+
    "\2\125\2\0\1\120\31\125\3\0\2\120\4\0\1\120"+
    "\1\0\1\120\1\126\3\0\1\120\4\0\1\121\14\0"+
    "\1\122\1\0\1\124\1\0\2\125\2\0\1\120\31\125"+
    "\3\0\2\120\1\10\3\0\1\120\1\10\2\120\1\10"+
    "\2\0\1\127\4\0\1\121\14\0\1\122\1\130\1\124"+
    "\1\0\2\125\2\0\1\120\1\131\30\125\3\0\1\120"+
    "\1\70\36\0\1\132\103\0\1\133\66\0\12\134\55\0"+
    "\1\120\1\0\2\120\3\0\1\135\4\0\1\136\14\0"+
    "\1\122\1\137\1\124\1\0\2\125\2\0\1\120\31\125"+
    "\3\0\2\120\17\0\1\134\1\0\12\30\6\0\2\140"+
    "\3\0\5\140\1\141\23\140\42\0\1\67\1\142\103\0"+
    "\1\143\103\0\1\144\1\67\44\0\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\12\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\31\37\3\0\1\145\1\146\1\10\3\0\1\145\1\10"+
    "\2\145\1\10\2\0\1\146\4\0\1\147\12\37\2\0"+
    "\1\150\1\0\1\151\1\0\2\37\2\0\1\145\4\37"+
    "\1\152\14\37\1\153\7\37\3\0\1\145\1\146\1\10"+
    "\3\0\1\145\1\10\2\145\1\10\2\0\1\146\4\0"+
    "\1\147\12\37\2\0\1\150\1\0\1\151\1\0\2\37"+
    "\2\0\1\145\1\37\1\154\14\37\1\155\1\37\1\156"+
    "\6\37\1\157\1\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\1\37\1\160\14\37\1\161\12\37\3\0\1\145"+
    "\1\146\1\10\3\0\1\145\1\10\2\145\1\10\2\0"+
    "\1\146\4\0\1\147\12\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\1\37\1\162\3\37\1\163"+
    "\10\37\1\164\12\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\13\37\1\165\1\37\1\166\13\37\3\0\1\145"+
    "\1\146\1\10\3\0\1\145\1\10\2\145\1\10\2\0"+
    "\1\146\4\0\1\147\12\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\1\37\1\167\7\37\1\170"+
    "\4\37\1\171\1\37\1\172\2\37\1\173\5\37\3\0"+
    "\1\145\1\146\1\10\3\0\1\145\1\10\2\145\1\10"+
    "\2\0\1\146\4\0\1\147\12\37\2\0\1\150\1\0"+
    "\1\151\1\0\2\37\2\0\1\145\5\37\1\174\10\37"+
    "\1\175\12\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\12\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\6\37\1\176\5\37\1\177\1\200\13\37\3\0\1\145"+
    "\1\146\1\10\3\0\1\145\1\10\2\145\1\10\2\0"+
    "\1\146\4\0\1\147\12\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\1\37\1\201\7\37\1\202"+
    "\4\37\1\203\12\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\1\37\1\204\16\37\1\205\2\37\1\206\5\37"+
    "\3\0\1\145\1\146\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\12\37\2\0\1\150"+
    "\1\0\1\151\1\0\2\37\2\0\1\145\5\37\1\207"+
    "\23\37\3\0\1\145\1\146\1\10\3\0\1\145\1\10"+
    "\2\145\1\10\2\0\1\146\4\0\1\147\12\37\2\0"+
    "\1\150\1\0\1\151\1\0\2\37\2\0\1\145\5\37"+
    "\1\210\10\37\1\211\3\37\1\212\5\37\1\213\3\0"+
    "\1\145\1\146\1\10\3\0\1\145\1\10\2\145\1\10"+
    "\2\0\1\146\4\0\1\147\12\37\2\0\1\150\1\0"+
    "\1\151\1\0\2\37\2\0\1\145\10\37\1\214\7\37"+
    "\1\215\10\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\12\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\6\37\1\216\2\37\1\217\17\37\3\0\1\145\1\146"+
    "\1\10\3\0\1\145\1\10\2\145\1\10\2\0\1\146"+
    "\4\0\1\147\12\37\2\0\1\150\1\0\1\151\1\0"+
    "\2\37\2\0\1\145\1\37\1\220\7\37\1\221\17\37"+
    "\3\0\1\145\1\146\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\12\37\2\0\1\150"+
    "\1\0\1\151\1\0\2\37\2\0\1\145\5\37\1\222"+
    "\2\37\1\223\20\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\5\37\1\224\23\37\3\0\1\145\1\146\100\0"+
    "\1\225\3\0\1\10\3\0\1\120\1\10\2\120\1\10"+
    "\2\0\1\70\4\0\1\121\14\0\1\122\1\0\1\124"+
    "\1\0\2\125\2\0\1\120\1\131\30\125\3\0\1\120"+
    "\1\70\2\71\2\0\1\71\1\0\2\71\1\0\73\71"+
    "\2\0\1\72\103\0\1\76\122\0\12\105\112\0\1\107"+
    "\44\0\1\113\122\0\12\116\6\0\2\116\3\0\31\116"+
    "\5\0\1\10\4\0\1\10\2\0\1\10\2\0\1\10"+
    "\5\0\12\116\6\0\2\116\3\0\1\117\30\116\4\0"+
    "\1\10\4\0\1\120\1\0\2\120\3\0\1\120\4\0"+
    "\1\121\14\0\1\122\1\120\1\124\1\0\2\125\2\0"+
    "\1\120\31\125\3\0\2\120\35\0\1\120\105\0\1\120"+
    "\50\0\1\145\1\0\2\145\3\0\1\145\4\0\1\147"+
    "\12\125\2\0\1\150\1\0\1\151\1\0\2\125\2\0"+
    "\1\145\31\125\3\0\2\145\1\10\3\0\1\145\1\10"+
    "\2\145\1\10\2\0\1\146\4\0\1\147\12\125\2\0"+
    "\1\150\1\0\1\151\1\0\2\125\2\0\1\145\1\131"+
    "\30\125\3\0\1\145\1\146\17\0\1\226\1\0\12\227"+
    "\6\0\2\140\3\0\5\140\1\141\23\140\5\0\4\230"+
    "\1\231\1\230\2\231\3\230\1\232\4\230\1\233\14\230"+
    "\1\234\1\230\1\235\1\230\2\236\2\230\1\231\31\236"+
    "\3\230\2\231\2\237\1\11\1\12\1\240\1\237\2\240"+
    "\3\237\1\240\4\237\1\136\14\237\1\241\1\240\1\242"+
    "\1\237\2\243\2\237\1\240\31\243\3\237\2\240\21\0"+
    "\12\140\6\0\2\140\3\0\31\140\23\0\1\244\1\245"+
    "\1\0\12\246\6\0\2\140\3\0\5\140\1\247\23\140"+
    "\11\0\1\145\1\0\2\145\3\0\1\145\4\0\1\147"+
    "\14\0\1\150\1\0\1\151\1\0\2\250\2\0\1\145"+
    "\31\250\3\0\2\145\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\14\0\1\150\1\0"+
    "\1\151\1\0\2\250\2\0\1\145\1\251\30\250\3\0"+
    "\1\145\1\146\4\0\1\145\1\0\2\145\3\0\1\145"+
    "\4\0\1\147\14\0\1\150\1\145\1\151\1\0\2\250"+
    "\2\0\1\145\31\250\3\0\2\145\35\0\1\145\105\0"+
    "\1\145\44\0\1\10\3\0\1\145\1\10\2\145\1\10"+
    "\2\0\1\146\4\0\1\147\12\37\2\0\1\150\1\0"+
    "\1\151\1\0\2\37\2\0\1\145\4\37\1\252\24\37"+
    "\3\0\1\145\1\146\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\12\37\2\0\1\150"+
    "\1\0\1\151\1\0\2\37\2\0\1\145\13\37\1\253"+
    "\15\37\3\0\1\145\1\146\1\10\3\0\1\145\1\10"+
    "\2\145\1\10\2\0\1\146\4\0\1\147\12\37\2\0"+
    "\1\150\1\0\1\151\1\0\2\37\2\0\1\145\16\37"+
    "\1\254\12\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\12\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\5\37\1\255\23\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\22\37\1\256\6\37\3\0\1\145\1\146\1\10"+
    "\3\0\1\145\1\10\2\145\1\10\2\0\1\146\4\0"+
    "\1\147\12\37\2\0\1\150\1\0\1\151\1\0\2\37"+
    "\2\0\1\145\13\37\1\257\15\37\3\0\1\145\1\146"+
    "\1\10\3\0\1\145\1\10\2\145\1\10\2\0\1\146"+
    "\4\0\1\147\12\37\2\0\1\150\1\0\1\151\1\0"+
    "\2\37\2\0\1\145\15\37\1\260\13\37\3\0\1\145"+
    "\1\146\1\10\3\0\1\145\1\10\2\145\1\10\2\0"+
    "\1\146\4\0\1\147\12\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\27\37\1\261\1\37\3\0"+
    "\1\145\1\146\1\10\3\0\1\145\1\10\2\145\1\10"+
    "\2\0\1\146\4\0\1\147\12\37\2\0\1\150\1\0"+
    "\1\151\1\0\2\37\2\0\1\145\13\37\1\262\15\37"+
    "\3\0\1\145\1\146\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\12\37\2\0\1\150"+
    "\1\0\1\151\1\0\2\37\2\0\1\145\21\37\1\263"+
    "\7\37\3\0\1\145\1\146\1\10\3\0\1\145\1\10"+
    "\2\145\1\10\2\0\1\146\4\0\1\147\12\37\2\0"+
    "\1\150\1\0\1\151\1\0\2\37\2\0\1\145\23\37"+
    "\1\264\5\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\12\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\13\37\1\265\15\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\15\37\1\266\13\37\3\0\1\145\1\146\1\10"+
    "\3\0\1\145\1\10\2\145\1\10\2\0\1\146\4\0"+
    "\1\147\12\37\2\0\1\150\1\0\1\151\1\0\2\37"+
    "\2\0\1\145\20\37\1\267\10\37\3\0\1\145\1\146"+
    "\1\10\3\0\1\145\1\10\2\145\1\10\2\0\1\146"+
    "\4\0\1\147\12\37\2\0\1\150\1\0\1\151\1\0"+
    "\2\37\2\0\1\145\16\37\1\270\12\37\3\0\1\145"+
    "\1\146\1\10\3\0\1\145\1\10\2\145\1\10\2\0"+
    "\1\146\4\0\1\147\12\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\15\37\1\271\13\37\3\0"+
    "\1\145\1\146\1\10\3\0\1\145\1\10\2\145\1\10"+
    "\2\0\1\146\4\0\1\147\12\37\2\0\1\150\1\0"+
    "\1\151\1\0\2\37\2\0\1\145\26\37\1\272\2\37"+
    "\3\0\1\145\1\146\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\12\37\2\0\1\150"+
    "\1\0\1\151\1\0\2\37\2\0\1\145\23\37\1\273"+
    "\5\37\3\0\1\145\1\146\1\10\3\0\1\145\1\10"+
    "\2\145\1\10\2\0\1\146\4\0\1\147\12\37\2\0"+
    "\1\150\1\0\1\151\1\0\2\37\2\0\1\145\17\37"+
    "\1\274\11\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\12\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\22\37\1\275\6\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\17\37\1\276\11\37\3\0\1\145\1\146\1\10"+
    "\3\0\1\145\1\10\2\145\1\10\2\0\1\146\4\0"+
    "\1\147\12\37\2\0\1\150\1\0\1\151\1\0\2\37"+
    "\2\0\1\145\15\37\1\277\13\37\3\0\1\145\1\146"+
    "\1\10\3\0\1\145\1\10\2\145\1\10\2\0\1\146"+
    "\4\0\1\147\12\37\2\0\1\150\1\0\1\151\1\0"+
    "\2\37\2\0\1\145\4\37\1\300\24\37\3\0\1\145"+
    "\1\146\1\10\3\0\1\145\1\10\2\145\1\10\2\0"+
    "\1\146\4\0\1\147\12\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\27\37\1\301\1\37\3\0"+
    "\1\145\1\146\1\10\3\0\1\145\1\10\2\145\1\10"+
    "\2\0\1\146\4\0\1\147\12\37\2\0\1\150\1\0"+
    "\1\151\1\0\2\37\2\0\1\145\1\37\1\302\7\37"+
    "\1\303\17\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\12\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\2\37\1\304\26\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\22\37\1\305\6\37\3\0\1\145\1\146\1\10"+
    "\3\0\1\145\1\10\2\145\1\10\2\0\1\146\4\0"+
    "\1\147\12\37\2\0\1\150\1\0\1\151\1\0\2\37"+
    "\2\0\1\145\3\37\1\306\11\37\1\307\13\37\3\0"+
    "\1\145\1\146\1\10\3\0\1\145\1\10\2\145\1\10"+
    "\2\0\1\146\4\0\1\147\12\37\2\0\1\150\1\0"+
    "\1\151\1\0\2\37\2\0\1\145\13\37\1\310\15\37"+
    "\3\0\1\145\1\146\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\12\37\2\0\1\150"+
    "\1\0\1\151\1\0\2\37\2\0\1\145\20\37\1\311"+
    "\10\37\3\0\1\145\1\146\1\10\3\0\1\145\1\10"+
    "\2\145\1\10\2\0\1\146\4\0\1\147\12\37\2\0"+
    "\1\150\1\0\1\151\1\0\2\37\2\0\1\145\1\37"+
    "\1\312\27\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\12\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\11\37\1\313\17\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\1\37\1\314\21\37\1\315\5\37\3\0\1\145"+
    "\1\146\1\10\3\0\1\145\1\10\2\145\1\10\2\0"+
    "\1\146\4\0\1\147\12\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\11\37\1\316\17\37\3\0"+
    "\1\145\1\146\1\10\3\0\1\145\1\10\2\145\1\10"+
    "\2\0\1\146\4\0\1\147\12\37\2\0\1\150\1\0"+
    "\1\151\1\0\2\37\2\0\1\145\15\37\1\317\13\37"+
    "\3\0\1\145\1\146\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\12\37\2\0\1\150"+
    "\1\0\1\151\1\0\2\37\2\0\1\145\20\37\1\153"+
    "\10\37\3\0\1\145\1\146\1\10\3\0\1\145\1\10"+
    "\2\145\1\10\2\0\1\146\4\0\1\147\12\37\2\0"+
    "\1\150\1\0\1\151\1\0\2\37\2\0\1\145\5\37"+
    "\1\320\23\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\12\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\5\37\1\321\3\37\1\322\17\37\3\0\1\145\1\146"+
    "\1\10\3\0\1\145\1\10\2\145\1\10\2\0\1\146"+
    "\4\0\1\147\12\37\2\0\1\150\1\0\1\151\1\0"+
    "\2\37\2\0\1\145\11\37\1\323\17\37\3\0\1\145"+
    "\1\146\1\10\3\0\1\145\1\10\2\145\1\10\2\0"+
    "\1\146\4\0\1\147\12\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\1\37\1\273\27\37\3\0"+
    "\1\145\1\146\21\0\12\324\70\0\1\324\1\0\12\227"+
    "\6\0\2\140\3\0\5\140\1\141\23\140\5\0\13\230"+
    "\1\325\74\230\1\231\1\230\2\231\3\230\1\326\4\230"+
    "\1\233\14\230\1\234\1\230\1\235\1\230\2\236\2\230"+
    "\1\231\31\236\3\230\2\231\4\230\1\231\1\230\2\231"+
    "\3\230\1\326\4\230\1\327\14\230\1\234\1\230\1\235"+
    "\1\230\2\236\2\230\1\231\31\236\3\230\2\231\4\230"+
    "\1\231\1\230\2\231\3\230\1\326\4\230\1\233\14\230"+
    "\1\234\1\231\1\235\1\230\2\236\2\230\1\231\31\236"+
    "\3\230\2\231\13\230\1\325\21\230\1\231\61\230\1\325"+
    "\23\230\1\231\50\230\1\330\1\230\2\330\3\230\1\331"+
    "\4\230\1\332\12\236\2\230\1\333\1\230\1\334\1\230"+
    "\2\236\2\230\1\330\31\236\3\230\2\330\2\237\1\11"+
    "\1\12\102\237\1\11\1\12\1\240\1\237\2\240\3\237"+
    "\1\240\4\237\1\136\14\237\1\241\1\237\1\242\1\237"+
    "\2\243\2\237\1\240\31\243\3\237\2\240\2\237\1\11"+
    "\1\12\31\237\1\240\50\237\1\11\1\12\33\237\1\240"+
    "\46\237\1\11\1\12\1\335\1\237\2\335\3\237\1\335"+
    "\4\237\1\336\12\243\2\237\1\337\1\237\1\340\1\237"+
    "\2\243\2\237\1\335\31\243\3\237\2\335\16\0\1\341"+
    "\1\245\1\0\12\342\72\0\12\343\70\0\1\344\1\0"+
    "\12\345\6\0\2\140\3\0\31\140\23\0\1\341\1\245"+
    "\1\0\12\346\6\0\2\140\3\0\5\140\1\247\23\140"+
    "\26\0\12\250\6\0\2\250\3\0\31\250\5\0\1\10"+
    "\4\0\1\10\2\0\1\10\2\0\1\10\5\0\12\250"+
    "\6\0\2\250\3\0\1\251\30\250\4\0\2\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\20\37\1\347\10\37\3\0\1\145\1\146\1\10"+
    "\3\0\1\145\1\10\2\145\1\10\2\0\1\146\4\0"+
    "\1\147\12\37\2\0\1\150\1\0\1\151\1\0\2\37"+
    "\2\0\1\145\1\37\1\350\27\37\3\0\1\145\1\146"+
    "\1\10\3\0\1\145\1\10\2\145\1\10\2\0\1\146"+
    "\4\0\1\147\12\37\2\0\1\150\1\0\1\151\1\0"+
    "\2\37\2\0\1\145\13\37\1\351\15\37\3\0\1\145"+
    "\1\146\1\10\3\0\1\145\1\10\2\145\1\10\2\0"+
    "\1\146\4\0\1\147\12\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\1\37\1\352\27\37\3\0"+
    "\1\145\1\146\1\10\3\0\1\145\1\10\2\145\1\10"+
    "\2\0\1\146\4\0\1\147\12\37\2\0\1\150\1\0"+
    "\1\151\1\0\2\37\2\0\1\145\5\37\1\353\23\37"+
    "\3\0\1\145\1\146\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\12\37\2\0\1\150"+
    "\1\0\1\151\1\0\2\37\2\0\1\145\13\37\1\354"+
    "\15\37\3\0\1\145\1\146\1\10\3\0\1\145\1\10"+
    "\2\145\1\10\2\0\1\146\4\0\1\147\12\37\2\0"+
    "\1\150\1\0\1\151\1\0\2\37\2\0\1\145\21\37"+
    "\1\355\1\356\6\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\21\37\1\322\7\37\3\0\1\145\1\146\1\10"+
    "\3\0\1\145\1\10\2\145\1\10\2\0\1\146\4\0"+
    "\1\147\12\37\2\0\1\150\1\0\1\151\1\0\2\37"+
    "\2\0\1\145\5\37\1\357\23\37\3\0\1\145\1\146"+
    "\1\10\3\0\1\145\1\10\2\145\1\10\2\0\1\146"+
    "\4\0\1\147\12\37\2\0\1\150\1\0\1\151\1\0"+
    "\2\37\2\0\1\145\5\37\1\360\23\37\3\0\1\145"+
    "\1\146\1\10\3\0\1\145\1\10\2\145\1\10\2\0"+
    "\1\146\4\0\1\147\12\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\14\37\1\361\14\37\3\0"+
    "\1\145\1\146\1\10\3\0\1\145\1\10\2\145\1\10"+
    "\2\0\1\146\4\0\1\147\12\37\2\0\1\150\1\0"+
    "\1\151\1\0\2\37\2\0\1\145\21\37\1\362\7\37"+
    "\3\0\1\145\1\146\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\12\37\2\0\1\150"+
    "\1\0\1\151\1\0\2\37\2\0\1\145\15\37\1\363"+
    "\13\37\3\0\1\145\1\146\1\10\3\0\1\145\1\10"+
    "\2\145\1\10\2\0\1\146\4\0\1\147\12\37\2\0"+
    "\1\150\1\0\1\151\1\0\2\37\2\0\1\145\14\37"+
    "\1\153\14\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\12\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\3\37\1\364\25\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\365\2\145\1\366\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\31\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\12\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\20\37\1\261\10\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\16\37\1\367\12\37\3\0\1\145\1\146\1\10"+
    "\3\0\1\145\1\10\2\145\1\10\2\0\1\146\4\0"+
    "\1\147\1\37\1\370\1\371\1\372\2\37\1\373\1\37"+
    "\1\374\1\37\2\0\1\150\1\0\1\151\1\0\2\37"+
    "\2\0\1\145\5\37\1\375\23\37\3\0\1\145\1\146"+
    "\1\10\3\0\1\145\1\10\2\145\1\10\2\0\1\146"+
    "\4\0\1\147\12\37\2\0\1\150\1\0\1\151\1\0"+
    "\2\37\2\0\1\145\17\37\1\376\11\37\3\0\1\145"+
    "\1\146\1\10\3\0\1\145\1\10\2\145\1\10\2\0"+
    "\1\146\4\0\1\147\12\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\23\37\1\377\5\37\3\0"+
    "\1\145\1\146\1\10\3\0\1\145\1\10\2\145\1\10"+
    "\2\0\1\146\4\0\1\147\12\37\2\0\1\150\1\0"+
    "\1\151\1\0\2\37\2\0\1\145\11\37\1\u0100\17\37"+
    "\3\0\1\145\1\146\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\12\37\2\0\1\150"+
    "\1\0\1\151\1\0\2\37\2\0\1\145\1\37\1\u0101"+
    "\27\37\3\0\1\145\1\146\1\10\3\0\1\145\1\10"+
    "\2\145\1\10\2\0\1\146\4\0\1\147\12\37\2\0"+
    "\1\150\1\0\1\151\1\0\2\37\2\0\1\145\7\37"+
    "\1\u0102\21\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\12\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\24\37\1\u0103\4\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\13\37\1\u0104\15\37\3\0\1\145\1\146\1\10"+
    "\3\0\1\145\1\10\2\145\1\10\2\0\1\146\4\0"+
    "\1\147\12\37\2\0\1\150\1\0\1\151\1\0\2\37"+
    "\2\0\1\145\23\37\1\u0105\5\37\3\0\1\145\1\146"+
    "\1\10\3\0\1\145\1\10\2\145\1\10\2\0\1\146"+
    "\4\0\1\147\12\37\2\0\1\150\1\0\1\151\1\0"+
    "\2\37\2\0\1\145\16\37\1\u0106\12\37\3\0\1\145"+
    "\1\146\1\10\3\0\1\145\1\10\2\145\1\10\2\0"+
    "\1\146\4\0\1\147\12\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\4\37\1\u0107\24\37\3\0"+
    "\1\145\1\146\1\10\3\0\1\145\1\10\2\145\1\10"+
    "\2\0\1\146\4\0\1\147\12\37\2\0\1\150\1\0"+
    "\1\151\1\0\2\37\2\0\1\145\11\37\1\u0108\17\37"+
    "\3\0\1\145\1\146\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\12\37\2\0\1\150"+
    "\1\0\1\151\1\0\2\37\2\0\1\145\11\37\1\u0109"+
    "\11\37\1\u010a\5\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\2\37\1\u010b\26\37\3\0\1\145\1\146\1\10"+
    "\3\0\1\145\1\10\2\145\1\10\2\0\1\146\4\0"+
    "\1\147\12\37\2\0\1\150\1\0\1\151\1\0\2\37"+
    "\2\0\1\145\21\37\1\u010c\7\37\3\0\1\145\1\146"+
    "\1\10\3\0\1\145\1\10\2\145\1\10\2\0\1\146"+
    "\4\0\1\147\12\37\2\0\1\150\1\0\1\151\1\0"+
    "\2\37\2\0\1\145\15\37\1\u010d\13\37\3\0\1\145"+
    "\1\146\1\10\3\0\1\145\1\10\2\145\1\10\2\0"+
    "\1\146\4\0\1\147\12\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\5\37\1\u010e\23\37\3\0"+
    "\1\145\1\146\1\10\3\0\1\145\1\10\2\145\1\10"+
    "\2\0\1\146\4\0\1\147\12\37\2\0\1\150\1\0"+
    "\1\151\1\0\2\37\2\0\1\145\26\37\1\u010f\2\37"+
    "\3\0\1\145\1\146\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\12\37\2\0\1\150"+
    "\1\0\1\151\1\0\2\37\2\0\1\145\22\37\1\u0110"+
    "\6\37\3\0\1\145\1\146\1\10\3\0\1\145\1\10"+
    "\2\145\1\10\2\0\1\146\4\0\1\147\12\37\2\0"+
    "\1\150\1\0\1\151\1\0\2\37\2\0\1\145\25\37"+
    "\1\153\3\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\12\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\12\37\1\261\16\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\13\37\1\u0111\15\37\3\0\1\145\1\146\17\0"+
    "\1\226\1\0\12\u0112\6\0\2\140\3\0\5\140\1\141"+
    "\23\140\5\0\13\230\1\325\4\230\1\11\67\230\1\231"+
    "\1\230\2\231\3\230\1\326\4\230\1\u0113\14\230\1\234"+
    "\1\230\1\235\1\230\2\236\2\230\1\231\31\236\3\230"+
    "\2\231\4\230\1\330\1\230\2\330\3\230\1\331\4\230"+
    "\1\332\14\230\1\333\1\230\1\334\1\230\2\u0114\2\230"+
    "\1\330\31\u0114\3\230\2\330\4\230\1\330\1\230\2\330"+
    "\3\230\1\331\4\230\1\147\14\230\1\333\1\230\1\334"+
    "\1\230\2\u0114\2\230\1\330\31\u0114\3\230\2\330\4\230"+
    "\1\330\1\230\2\330\3\230\1\331\4\230\1\332\14\230"+
    "\1\333\1\330\1\334\1\230\2\u0114\2\230\1\330\31\u0114"+
    "\3\230\2\330\13\230\1\325\21\230\1\330\61\230\1\325"+
    "\23\230\1\330\44\230\2\237\1\11\1\12\1\335\1\237"+
    "\2\335\3\237\1\335\4\237\1\336\14\237\1\337\1\237"+
    "\1\340\1\237\2\u0115\2\237\1\335\31\u0115\3\237\2\335"+
    "\2\237\1\11\1\12\1\335\1\237\2\335\3\237\1\335"+
    "\4\237\1\336\14\237\1\337\1\335\1\340\1\237\2\u0115"+
    "\2\237\1\335\31\u0115\3\237\2\335\2\237\1\11\1\12"+
    "\31\237\1\335\50\237\1\11\1\12\33\237\1\335\44\237"+
    "\16\0\1\341\1\245\1\0\12\u0116\70\0\1\344\1\0"+
    "\12\u0117\6\0\2\140\3\0\31\140\26\0\12\u0118\70\0"+
    "\1\u0118\1\0\12\345\6\0\2\140\3\0\5\140\1\u0119"+
    "\23\140\24\0\1\343\1\0\12\346\6\0\2\140\3\0"+
    "\31\140\5\0\1\10\3\0\1\145\1\10\2\145\1\10"+
    "\2\0\1\146\4\0\1\147\12\37\2\0\1\150\1\0"+
    "\1\151\1\0\2\37\2\0\1\145\5\37\1\u011a\23\37"+
    "\3\0\1\145\1\146\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\12\37\2\0\1\150"+
    "\1\0\1\151\1\0\2\37\2\0\1\145\15\37\1\u011b"+
    "\13\37\3\0\1\145\1\146\1\10\3\0\1\145\1\10"+
    "\2\145\1\10\2\0\1\146\4\0\1\147\12\37\2\0"+
    "\1\150\1\0\1\151\1\0\2\37\2\0\1\145\12\37"+
    "\1\u011c\16\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\12\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\21\37\1\u011d\7\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\3\37\1\u011e\25\37\3\0\1\145\1\146\1\10"+
    "\3\0\1\145\1\10\2\145\1\10\2\0\1\146\4\0"+
    "\1\147\12\37\2\0\1\150\1\0\1\151\1\0\2\37"+
    "\2\0\1\145\22\37\1\u011f\6\37\3\0\1\145\1\146"+
    "\1\10\3\0\1\145\1\10\2\145\1\10\2\0\1\146"+
    "\4\0\1\147\12\37\2\0\1\150\1\0\1\151\1\0"+
    "\2\37\2\0\1\145\11\37\1\u0120\6\37\1\u0121\10\37"+
    "\3\0\1\145\1\146\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\12\37\2\0\1\150"+
    "\1\0\1\151\1\0\2\37\2\0\1\145\7\37\1\u0122"+
    "\12\37\1\u0123\6\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\5\37\1\u0124\23\37\3\0\1\145\1\146\1\10"+
    "\3\0\1\145\1\10\2\145\1\10\2\0\1\146\4\0"+
    "\1\147\12\37\2\0\1\150\1\0\1\151\1\0\2\37"+
    "\2\0\1\145\5\37\1\u0125\23\37\3\0\1\145\1\146"+
    "\1\10\3\0\1\145\1\10\2\145\1\10\2\0\1\146"+
    "\4\0\1\147\12\37\2\0\1\150\1\0\1\151\1\0"+
    "\2\37\2\0\1\145\22\37\1\u0126\6\37\3\0\1\145"+
    "\1\146\1\10\3\0\1\145\1\10\2\145\1\10\2\0"+
    "\1\146\4\0\1\147\12\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\20\37\1\u0127\10\37\3\0"+
    "\1\145\1\146\1\10\3\0\1\145\1\10\2\145\1\10"+
    "\2\0\1\146\4\0\1\147\2\37\1\u0128\3\37\1\u0129"+
    "\3\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\31\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\5\37"+
    "\1\u012a\4\37\2\0\1\150\1\0\1\151\1\0\2\37"+
    "\2\0\1\145\31\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\2\37\1\u012b\7\37\2\0\1\150\1\0\1\151\1\0"+
    "\2\37\2\0\1\145\31\37\3\0\1\145\1\146\1\10"+
    "\3\0\1\145\1\10\2\145\1\10\2\0\1\146\4\0"+
    "\1\147\4\37\1\u012c\5\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\31\37\3\0\1\145\1\146"+
    "\1\10\3\0\1\145\1\10\2\145\1\10\2\0\1\146"+
    "\4\0\1\147\12\37\2\0\1\150\1\0\1\151\1\0"+
    "\2\37\2\0\1\145\20\37\1\u012d\10\37\3\0\1\145"+
    "\1\146\1\10\3\0\1\145\1\10\2\145\1\10\2\0"+
    "\1\146\4\0\1\147\12\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\11\37\1\u012e\17\37\3\0"+
    "\1\145\1\146\1\10\3\0\1\145\1\10\2\145\1\10"+
    "\2\0\1\146\4\0\1\147\12\37\2\0\1\150\1\0"+
    "\1\151\1\0\2\37\2\0\1\145\22\37\1\u012f\6\37"+
    "\3\0\1\145\1\146\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\12\37\2\0\1\150"+
    "\1\0\1\151\1\0\2\37\2\0\1\145\6\37\1\u0130"+
    "\22\37\3\0\1\145\1\146\1\10\3\0\1\145\1\10"+
    "\2\145\1\10\2\0\1\146\4\0\1\147\12\37\2\0"+
    "\1\150\1\0\1\151\1\0\2\37\2\0\1\145\2\37"+
    "\1\u0131\26\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\12\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\14\37\1\u0132\14\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\1\37\1\u0133\27\37\3\0\1\145\1\146\1\10"+
    "\3\0\1\145\1\10\2\145\1\10\2\0\1\146\4\0"+
    "\1\147\12\37\2\0\1\150\1\0\1\151\1\0\2\37"+
    "\2\0\1\145\11\37\1\u0134\17\37\3\0\1\145\1\146"+
    "\1\10\3\0\1\145\1\10\2\145\1\10\2\0\1\146"+
    "\4\0\1\147\12\37\2\0\1\150\1\0\1\151\1\0"+
    "\2\37\2\0\1\145\20\37\1\u0135\10\37\3\0\1\145"+
    "\1\146\1\10\3\0\1\145\1\10\2\145\1\10\2\0"+
    "\1\146\4\0\1\147\12\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\15\37\1\u0136\13\37\3\0"+
    "\1\145\1\146\1\10\3\0\1\145\1\10\2\145\1\10"+
    "\2\0\1\146\4\0\1\147\12\37\2\0\1\150\1\0"+
    "\1\151\1\0\2\37\2\0\1\145\4\37\1\u0137\24\37"+
    "\3\0\1\145\1\146\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\12\37\2\0\1\150"+
    "\1\0\1\151\1\0\2\37\2\0\1\145\15\37\1\u0138"+
    "\13\37\3\0\1\145\1\146\1\10\3\0\1\145\1\10"+
    "\2\145\1\10\2\0\1\146\4\0\1\147\12\37\2\0"+
    "\1\150\1\0\1\151\1\0\2\37\2\0\1\145\3\37"+
    "\1\u0139\25\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\12\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\16\37\1\322\12\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\21\37\1\u013a\7\37\3\0\1\145\1\146\1\10"+
    "\3\0\1\145\1\10\2\145\1\10\2\0\1\146\4\0"+
    "\1\147\12\37\2\0\1\150\1\0\1\151\1\0\2\37"+
    "\2\0\1\145\5\37\1\u013b\23\37\3\0\1\145\1\146"+
    "\1\10\3\0\1\145\1\10\2\145\1\10\2\0\1\146"+
    "\4\0\1\147\1\37\1\u013c\1\u013d\1\u013e\2\37\1\u013f"+
    "\1\37\1\u0140\1\37\2\0\1\150\1\0\1\151\1\0"+
    "\2\37\2\0\1\145\31\37\3\0\1\145\1\146\1\10"+
    "\3\0\1\145\1\10\2\145\1\10\2\0\1\146\4\0"+
    "\1\147\12\37\2\0\1\150\1\0\1\151\1\0\2\37"+
    "\2\0\1\145\5\37\1\u0141\23\37\3\0\1\145\1\146"+
    "\17\0\1\324\1\0\12\u0112\6\0\2\140\3\0\5\140"+
    "\1\141\23\140\5\0\13\230\1\325\5\230\12\u0114\6\230"+
    "\2\u0114\3\230\31\u0114\5\230\2\237\1\11\1\12\15\237"+
    "\12\u0115\6\237\2\u0115\3\237\31\u0115\5\237\17\0\1\343"+
    "\1\0\12\u0116\70\0\1\u0118\1\0\12\u0117\6\0\2\140"+
    "\3\0\5\140\1\u0119\23\140\24\0\1\u0142\1\0\12\u0143"+
    "\20\0\1\u0144\46\0\1\u0145\2\0\12\u0146\6\0\2\140"+
    "\3\0\31\140\5\0\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\12\37\2\0\1\150"+
    "\1\0\1\151\1\0\2\37\2\0\1\145\21\37\1\u0147"+
    "\7\37\3\0\1\145\1\146\1\10\3\0\1\145\1\10"+
    "\2\145\1\10\2\0\1\146\4\0\1\147\12\37\2\0"+
    "\1\150\1\0\1\151\1\0\2\37\2\0\1\145\3\37"+
    "\1\u0148\25\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\1\37"+
    "\1\u0149\1\u014a\1\u014b\1\u014c\1\u014d\1\u014e\1\u014f\1\u0150"+
    "\1\u0151\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\31\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\12\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\16\37\1\u0152\12\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\20\37\1\u0153\10\37\3\0\1\145\1\146\1\10"+
    "\3\0\1\145\1\10\2\145\1\10\2\0\1\146\4\0"+
    "\1\147\12\37\2\0\1\150\1\0\1\151\1\0\2\37"+
    "\2\0\1\145\15\37\1\u0154\13\37\3\0\1\145\1\146"+
    "\1\10\3\0\1\145\1\10\2\145\1\10\2\0\1\146"+
    "\4\0\1\147\12\37\2\0\1\150\1\0\1\151\1\0"+
    "\2\37\2\0\1\145\1\37\1\u0155\27\37\3\0\1\145"+
    "\1\146\1\10\3\0\1\145\1\10\2\145\1\10\2\0"+
    "\1\146\4\0\1\147\12\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\1\37\1\u0156\27\37\3\0"+
    "\1\145\1\146\1\10\3\0\1\145\1\10\2\145\1\10"+
    "\2\0\1\146\4\0\1\147\12\37\2\0\1\150\1\0"+
    "\1\151\1\0\2\37\2\0\1\145\5\37\1\153\23\37"+
    "\3\0\1\145\1\146\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\12\37\2\0\1\150"+
    "\1\0\1\151\1\0\2\37\2\0\1\145\27\37\1\322"+
    "\1\37\3\0\1\145\1\146\1\10\3\0\1\145\1\10"+
    "\2\145\1\10\2\0\1\146\4\0\1\147\12\37\2\0"+
    "\1\150\1\0\1\151\1\0\2\37\2\0\1\145\11\37"+
    "\1\u0157\17\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\12\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\22\37\1\153\6\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\10\37\1\u0158\1\37\2\0\1\150\1\0\1\151\1\0"+
    "\2\37\2\0\1\145\31\37\3\0\1\145\1\146\1\10"+
    "\3\0\1\145\1\10\2\145\1\10\2\0\1\146\4\0"+
    "\1\147\6\37\1\u0159\3\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\31\37\3\0\1\145\1\146"+
    "\1\10\3\0\1\145\1\10\2\145\1\10\2\0\1\146"+
    "\4\0\1\147\12\37\2\0\1\150\1\0\1\151\1\0"+
    "\2\37\2\0\1\145\15\37\1\u015a\13\37\3\0\1\145"+
    "\1\146\1\10\3\0\1\145\1\10\2\145\1\10\2\0"+
    "\1\146\4\0\1\147\12\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\15\37\1\u015b\13\37\3\0"+
    "\1\145\1\146\1\10\3\0\1\145\1\10\2\145\1\10"+
    "\2\0\1\146\4\0\1\147\12\37\2\0\1\150\1\0"+
    "\1\151\1\0\2\37\2\0\1\145\5\37\1\261\23\37"+
    "\3\0\1\145\1\146\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\12\37\2\0\1\150"+
    "\1\0\1\151\1\0\2\37\2\0\1\145\11\37\1\u015c"+
    "\17\37\3\0\1\145\1\146\1\10\3\0\1\145\1\10"+
    "\2\145\1\10\2\0\1\146\4\0\1\147\12\37\2\0"+
    "\1\150\1\0\1\151\1\0\2\37\2\0\1\145\13\37"+
    "\1\u015d\15\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\12\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\1\37\1\u015e\27\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\22\37\1\u015f\6\37\3\0\1\145\1\146\1\10"+
    "\3\0\1\145\1\10\2\145\1\10\2\0\1\146\4\0"+
    "\1\147\12\37\2\0\1\150\1\0\1\151\1\0\2\37"+
    "\2\0\1\145\3\37\1\u0160\25\37\3\0\1\145\1\146"+
    "\1\10\3\0\1\145\1\10\2\145\1\10\2\0\1\146"+
    "\4\0\1\147\12\37\2\0\1\150\1\0\1\151\1\0"+
    "\2\37\2\0\1\145\15\37\1\u0161\13\37\3\0\1\145"+
    "\1\146\1\10\3\0\1\145\1\10\2\145\1\10\2\0"+
    "\1\146\4\0\1\147\12\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\4\37\1\261\24\37\3\0"+
    "\1\145\1\146\1\10\3\0\1\145\1\10\2\145\1\10"+
    "\2\0\1\146\4\0\1\147\12\37\2\0\1\150\1\0"+
    "\1\151\1\0\2\37\2\0\1\145\11\37\1\u0162\17\37"+
    "\3\0\1\145\1\146\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\12\37\2\0\1\150"+
    "\1\0\1\151\1\0\2\37\2\0\1\145\7\37\1\u0163"+
    "\21\37\3\0\1\145\1\146\1\10\3\0\1\145\1\10"+
    "\2\145\1\10\2\0\1\146\4\0\1\147\12\37\2\0"+
    "\1\150\1\0\1\151\1\0\2\37\2\0\1\145\22\37"+
    "\1\u0164\6\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\12\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\6\37\1\u0165\22\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\4\37\1\u0166\24\37\3\0\1\145\1\146\1\10"+
    "\3\0\1\145\1\10\2\145\1\10\2\0\1\146\4\0"+
    "\1\147\2\37\1\u0167\3\37\1\u0168\3\37\2\0\1\150"+
    "\1\0\1\151\1\0\2\37\2\0\1\145\31\37\3\0"+
    "\1\145\1\146\1\10\3\0\1\145\1\10\2\145\1\10"+
    "\2\0\1\146\4\0\1\147\5\37\1\u0169\4\37\2\0"+
    "\1\150\1\0\1\151\1\0\2\37\2\0\1\145\31\37"+
    "\3\0\1\145\1\146\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\2\37\1\u016a\7\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\31\37\3\0\1\145\1\146\1\10\3\0\1\145\1\10"+
    "\2\145\1\10\2\0\1\146\4\0\1\147\4\37\1\u016b"+
    "\5\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\31\37\3\0\1\145\1\146\21\0\12\u016c\70\0"+
    "\1\u016c\1\0\12\u0143\20\0\1\u0144\46\0\1\u0145\2\0"+
    "\12\u016d\72\0\12\u016d\70\0\1\u0142\1\0\12\u016e\6\0"+
    "\2\140\3\0\31\140\5\0\1\10\3\0\1\145\1\10"+
    "\2\145\1\10\2\0\1\146\4\0\1\147\12\37\2\0"+
    "\1\150\1\0\1\151\1\0\2\37\2\0\1\145\21\37"+
    "\1\u016f\7\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\12\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\5\37\1\u0107\23\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\1\u0170\1\u0171\1\u0172\1\u0173\1\u0174\1\u0175\1\u0176\1\u0177"+
    "\1\u0178\1\u0179\2\0\1\150\1\0\1\151\1\0\2\37"+
    "\2\0\1\145\31\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\1\u017a\1\u017b\1\u017c\1\u017d\1\u017e\1\u017f\1\u0180\1\u0181"+
    "\1\u0182\1\u0183\2\0\1\150\1\0\1\151\1\0\2\37"+
    "\2\0\1\145\31\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\1\u0184\1\u0185\1\u0186\7\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\31\37\3\0\1\145\1\146"+
    "\1\10\3\0\1\145\1\10\2\145\1\10\2\0\1\146"+
    "\4\0\1\147\12\37\2\0\1\150\1\0\1\151\1\0"+
    "\2\37\2\0\1\145\4\37\1\u0148\24\37\3\0\1\145"+
    "\1\146\1\10\3\0\1\145\1\10\2\145\1\10\2\0"+
    "\1\146\4\0\1\147\12\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\23\37\1\u0187\5\37\3\0"+
    "\1\145\1\146\1\10\3\0\1\145\1\10\2\145\1\10"+
    "\2\0\1\146\4\0\1\147\12\37\2\0\1\150\1\0"+
    "\1\151\1\0\2\37\2\0\1\145\23\37\1\u0188\5\37"+
    "\3\0\1\145\1\146\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\12\37\2\0\1\150"+
    "\1\0\1\151\1\0\2\37\2\0\1\145\3\37\1\u0189"+
    "\25\37\3\0\1\145\1\146\1\10\3\0\1\145\1\10"+
    "\2\145\1\10\2\0\1\146\4\0\1\147\12\37\2\0"+
    "\1\150\1\0\1\151\1\0\2\37\2\0\1\145\22\37"+
    "\1\u018a\6\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\12\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\16\37\1\u018b\12\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\1\37\1\u018c\27\37\3\0\1\145\1\146\1\10"+
    "\3\0\1\145\1\10\2\145\1\10\2\0\1\146\4\0"+
    "\1\147\12\37\2\0\1\150\1\0\1\151\1\0\2\37"+
    "\2\0\1\145\7\37\1\153\21\37\3\0\1\145\1\146"+
    "\1\10\3\0\1\145\1\10\2\145\1\10\2\0\1\146"+
    "\4\0\1\147\12\37\2\0\1\150\1\0\1\151\1\0"+
    "\2\37\2\0\1\145\5\37\1\220\23\37\3\0\1\145"+
    "\1\146\1\10\3\0\1\145\1\10\2\145\1\10\2\0"+
    "\1\146\4\0\1\147\12\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\5\37\1\u018d\23\37\3\0"+
    "\1\145\1\146\1\10\3\0\1\145\1\10\2\145\1\10"+
    "\2\0\1\146\4\0\1\147\12\37\2\0\1\150\1\0"+
    "\1\151\1\0\2\37\2\0\1\145\5\37\1\u018e\23\37"+
    "\3\0\1\145\1\146\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\12\37\2\0\1\150"+
    "\1\0\1\151\1\0\2\37\2\0\1\145\21\37\1\u018f"+
    "\7\37\3\0\1\145\1\146\1\10\3\0\1\145\1\10"+
    "\2\145\1\10\2\0\1\146\4\0\1\147\12\37\2\0"+
    "\1\150\1\0\1\151\1\0\2\37\2\0\1\145\22\37"+
    "\1\u0190\6\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\12\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\5\37\1\u0191\23\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\10\37\1\u0192\1\37\2\0\1\150\1\0\1\151\1\0"+
    "\2\37\2\0\1\145\31\37\3\0\1\145\1\146\1\10"+
    "\3\0\1\145\1\10\2\145\1\10\2\0\1\146\4\0"+
    "\1\147\6\37\1\u0193\3\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\31\37\3\0\1\145\1\146"+
    "\17\0\1\u0142\1\0\12\u0194\20\0\1\u0144\47\0\1\u0142"+
    "\1\0\12\u0195\6\0\2\140\3\0\31\140\24\0\1\u016c"+
    "\1\0\12\u016e\6\0\2\140\3\0\5\140\1\u0119\23\140"+
    "\5\0\1\10\3\0\1\145\1\10\2\145\1\10\2\0"+
    "\1\146\4\0\1\147\12\37\2\0\1\150\1\0\1\151"+
    "\1\0\2\37\2\0\1\145\3\37\1\u0196\25\37\3\0"+
    "\1\145\1\146\1\10\3\0\1\145\1\10\2\145\1\10"+
    "\2\0\1\146\4\0\1\147\12\37\2\0\1\150\1\0"+
    "\1\151\1\0\2\37\2\0\1\145\5\37\1\u0197\23\37"+
    "\3\0\1\145\1\146\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\12\37\2\0\1\150"+
    "\1\0\1\151\1\0\2\37\2\0\1\145\22\37\1\u0198"+
    "\6\37\3\0\1\145\1\146\1\10\3\0\1\145\1\10"+
    "\2\145\1\10\2\0\1\146\4\0\1\147\12\37\2\0"+
    "\1\150\1\0\1\151\1\0\2\37\2\0\1\145\5\37"+
    "\1\u0199\23\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\12\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\15\37\1\u019a\13\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\13\37\1\u019b\15\37\3\0\1\145\1\146\1\10"+
    "\3\0\1\145\1\10\2\145\1\10\2\0\1\146\4\0"+
    "\1\147\12\37\2\0\1\150\1\0\1\151\1\0\2\37"+
    "\2\0\1\145\27\37\1\u019c\1\37\3\0\1\145\1\146"+
    "\1\10\3\0\1\145\1\10\2\145\1\10\2\0\1\146"+
    "\4\0\1\147\12\37\2\0\1\150\1\0\1\151\1\0"+
    "\2\37\2\0\1\145\20\37\1\u0107\10\37\3\0\1\145"+
    "\1\146\17\0\1\u016c\1\0\12\u0194\20\0\1\u0144\47\0"+
    "\1\u016c\1\0\12\u0195\6\0\2\140\3\0\5\140\1\u0119"+
    "\23\140\5\0\1\10\3\0\1\145\1\10\2\145\1\10"+
    "\2\0\1\146\4\0\1\147\12\37\2\0\1\150\1\0"+
    "\1\151\1\0\2\37\2\0\1\145\22\37\1\u019d\6\37"+
    "\3\0\1\145\1\146\1\10\3\0\1\145\1\10\2\145"+
    "\1\10\2\0\1\146\4\0\1\147\12\37\2\0\1\150"+
    "\1\0\1\151\1\0\2\37\2\0\1\145\3\37\1\u019e"+
    "\25\37\3\0\1\145\1\146\1\10\3\0\1\145\1\10"+
    "\2\145\1\10\2\0\1\146\4\0\1\147\12\37\2\0"+
    "\1\150\1\0\1\151\1\0\2\37\2\0\1\145\16\37"+
    "\1\220\12\37\3\0\1\145\1\146\1\10\3\0\1\145"+
    "\1\10\2\145\1\10\2\0\1\146\4\0\1\147\12\37"+
    "\2\0\1\150\1\0\1\151\1\0\2\37\2\0\1\145"+
    "\1\37\1\u019f\27\37\3\0\1\145\1\146\1\10\3\0"+
    "\1\145\1\10\2\145\1\10\2\0\1\146\4\0\1\147"+
    "\12\37\2\0\1\150\1\0\1\151\1\0\2\37\2\0"+
    "\1\145\13\37\1\u01a0\15\37\3\0\1\145\1\146\1\10"+
    "\3\0\1\145\1\10\2\145\1\10\2\0\1\146\4\0"+
    "\1\147\12\37\2\0\1\150\1\0\1\151\1\0\2\37"+
    "\2\0\1\145\13\37\1\u0107\15\37\3\0\1\145\1\146";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20468];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\1\1\11\6\1\2\11\2\1\1\11\4\1"+
    "\2\11\3\1\1\11\1\1\2\11\22\1\1\11\1\1"+
    "\1\11\3\1\1\11\1\1\3\11\1\1\5\11\1\1"+
    "\1\11\1\1\4\11\1\1\1\11\2\1\3\0\1\11"+
    "\1\0\3\1\1\11\1\1\2\11\1\1\1\0\4\1"+
    "\3\11\3\1\2\0\53\1\1\11\1\0\1\1\6\0"+
    "\6\1\2\0\56\1\3\0\4\1\2\0\4\1\1\0"+
    "\60\1\1\0\3\1\1\0\53\1\1\0\1\1\2\0"+
    "\46\1\2\0\46\1\2\0\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[416];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    public static int bandera = 0;
    public static ArrayList<Token> tokens = new ArrayList<>();  
    public static ArrayList<Token> errores = new ArrayList<>();

    private Symbol symbol(int type) {
      return new Symbol(type, yyline, yycolumn);
    }
     private Symbol symbol(int type, Object value) {
       System.out.println(value + ", " + String.valueOf(value));
      return new Symbol(type, yyline, yycolumn, value);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Symb.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: identificador 4"));
            }
            // fall through
          case 135: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 136: break;
          case 3:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.negacion, yytext());
            }
            // fall through
          case 137: break;
          case 4:
            { string.setLength(0); yybegin(STRING); bandera = yycolumn;
            }
            // fall through
          case 138: break;
          case 5:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.porcentaje, yytext());
            }
            // fall through
          case 139: break;
          case 6:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
            }
            // fall through
          case 140: break;
          case 7:
            { string.setLength(0); yybegin(Chars); bandera = yycolumn;
            }
            // fall through
          case 141: break;
          case 8:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.O_Parent_R, yytext());
            }
            // fall through
          case 142: break;
          case 9:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.C_Parent_R, yytext());
            }
            // fall through
          case 143: break;
          case 10:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.por, yytext());
            }
            // fall through
          case 144: break;
          case 11:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.mas, yytext());
            }
            // fall through
          case 145: break;
          case 12:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.coma, yytext());
            }
            // fall through
          case 146: break;
          case 13:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.menos, yytext());
            }
            // fall through
          case 147: break;
          case 14:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.punto, yytext());
            }
            // fall through
          case 148: break;
          case 15:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.div, yytext());
            }
            // fall through
          case 149: break;
          case 16:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Literal: Numero")); return symbol(Symb.numero, yytext());
            }
            // fall through
          case 150: break;
          case 17:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.punto_punto, yytext());
            }
            // fall through
          case 151: break;
          case 18:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.punto_coma, yytext());
            }
            // fall through
          case 152: break;
          case 19:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.menor, yytext());
            }
            // fall through
          case 153: break;
          case 20:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.igual, yytext());
            }
            // fall through
          case 154: break;
          case 21:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.mayor, yytext());
            }
            // fall through
          case 155: break;
          case 22:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.interrogacion_C, yytext());
            }
            // fall through
          case 156: break;
          case 23:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Identificador")); return symbol(Symb.ident,yytext());
            }
            // fall through
          case 157: break;
          case 24:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.O_Parent_C , yytext());
            }
            // fall through
          case 158: break;
          case 25:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.C_Parent_C, yytext());
            }
            // fall through
          case 159: break;
          case 26:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.techo, yytext());
            }
            // fall through
          case 160: break;
          case 27:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.O_Parent_L , yytext());
            }
            // fall through
          case 161: break;
          case 28:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.C_Parent_L, yytext());
            }
            // fall through
          case 162: break;
          case 29:
            { string.append( yytext() );
            }
            // fall through
          case 163: break;
          case 30:
            { errores.add(new Token(string.toString(), yyline, bandera, "Error stringASAD"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 164: break;
          case 31:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal string"));
    return symbol(Symb.stringSoli, yytext());
            }
            // fall through
          case 165: break;
          case 32:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error string"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 166: break;
          case 33:
            { string.append( yytext() );
    errores.add(new Token(string.toString(), yyline, bandera, "Error char"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 167: break;
          case 34:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error char"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 168: break;
          case 35:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal char"));
    return symbol(Symb.charss, yytext());
            }
            // fall through
          case 169: break;
          case 36:
            { string.append(yytext());
    yybegin(hexaStateError);
            }
            // fall through
          case 170: break;
          case 37:
            { yybegin(YYINITIAL);
    string.append( yytext() ); 
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal hexadecimal/Palabra Reservada")); 
    return symbol(Symb.numero, yytext());
            }
            // fall through
          case 171: break;
          case 38:
            { string.append(yytext());
    errores.add(new Token(string.toString(), yyline, yycolumn, "Error: comillas de cierre incorrectas"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 172: break;
          case 39:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); 
    errores.add(new Token("Comillas", yyline, yycolumn, "Error: hexadecimal sin cierre"));
    yybegin(YYINITIAL);
    return symbol(Symb.punto_coma, yytext());
            }
            // fall through
          case 173: break;
          case 40:
            { string.append(yytext());
    yybegin(hexaStateCError);
            }
            // fall through
          case 174: break;
          case 41:
            { string.append( yytext() ); 
    errores.add(new Token(string.toString(), yyline, yycolumn, "Error: comillas de cierre incorrectas"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 175: break;
          case 42:
            { string.append(yytext());
            }
            // fall through
          case 176: break;
          case 43:
            { yybegin(YYINITIAL); errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
            }
            // fall through
          case 177: break;
          case 44:
            { yybegin(YYINITIAL);
    string.append(yytext());
    errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
            }
            // fall through
          case 178: break;
          case 45:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.diferente, yytext());
            }
            // fall through
          case 179: break;
          case 46:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: identificador"));
            }
            // fall through
          case 180: break;
          case 47:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.op_and, yytext());
            }
            // fall through
          case 181: break;
          case 48:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.por_igual, yytext());
            }
            // fall through
          case 182: break;
          case 49:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.mas_igual, yytext());
            }
            // fall through
          case 183: break;
          case 50:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.menos_igual, yytext());
            }
            // fall through
          case 184: break;
          case 51:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.div_igual, yytext());
            }
            // fall through
          case 185: break;
          case 52:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: Numero"));
            }
            // fall through
          case 186: break;
          case 53:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.menor_igual, yytext());
            }
            // fall through
          case 187: break;
          case 54:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.igual_igual, yytext());
            }
            // fall through
          case 188: break;
          case 55:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.mayor_igual, yytext());
            }
            // fall through
          case 189: break;
          case 56:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));
            }
            // fall through
          case 190: break;
          case 57:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.doSoli, yytext());
            }
            // fall through
          case 191: break;
          case 58:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.ifSoli, yytext());
            }
            // fall through
          case 192: break;
          case 59:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.op_or, yytext());
            }
            // fall through
          case 193: break;
          case 60:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.forSoli, yytext());
            }
            // fall through
          case 194: break;
          case 61:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.intSoli, yytext());
            }
            // fall through
          case 195: break;
          case 62:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Units"));
            }
            // fall through
          case 196: break;
          case 63:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.bool, yytext());
            }
            // fall through
          case 197: break;
          case 64:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.byteSoli, yytext());
            }
            // fall through
          case 198: break;
          case 65:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Transac"));
            }
            // fall through
          case 199: break;
          case 66:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.elseSoli, yytext());
            }
            // fall through
          case 200: break;
          case 67:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.enumSoli, yytext());
            }
            // fall through
          case 201: break;
          case 68:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaState);
            }
            // fall through
          case 202: break;
          case 69:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaStateC);
            }
            // fall through
          case 203: break;
          case 70:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.int_O, yytext());
            }
            // fall through
          case 204: break;
          case 71:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.thisSoli, yytext());
            }
            // fall through
          case 205: break;
          case 72:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.trueSoli, yytext());
            }
            // fall through
          case 206: break;
          case 73:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.uint, yytext());
            }
            // fall through
          case 207: break;
          case 74:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.breakSoli, yytext());
            }
            // fall through
          case 208: break;
          case 75:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.falseSoli, yytext());
            }
            // fall through
          case 209: break;
          case 76:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.int_DS, yytext());
            }
            // fall through
          case 210: break;
          case 77:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.int_TD , yytext());
            }
            // fall through
          case 211: break;
          case 78:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.int_SC, yytext());
            }
            // fall through
          case 212: break;
          case 79:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.uint_O, yytext());
            }
            // fall through
          case 213: break;
          case 80:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.whileSoli, yytext());
            }
            // fall through
          case 214: break;
          case 81:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_I, yytext());
            }
            // fall through
          case 215: break;
          case 82:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_II, yytext());
            }
            // fall through
          case 216: break;
          case 83:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_III, yytext());
            }
            // fall through
          case 217: break;
          case 84:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_IV, yytext());
            }
            // fall through
          case 218: break;
          case 85:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_V, yytext());
            }
            // fall through
          case 219: break;
          case 86:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_VI, yytext());
            }
            // fall through
          case 220: break;
          case 87:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_VII, yytext());
            }
            // fall through
          case 221: break;
          case 88:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_IIX, yytext());
            }
            // fall through
          case 222: break;
          case 89:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_IX, yytext());
            }
            // fall through
          case 223: break;
          case 90:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.int_CVO, yytext());
            }
            // fall through
          case 224: break;
          case 91:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.int_DCS, yytext());
            }
            // fall through
          case 225: break;
          case 92:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.pragma, yytext());
            }
            // fall through
          case 226: break;
          case 93:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.publicSoli, yytext());
            }
            // fall through
          case 227: break;
          case 94:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.returnSoli, yytext());
            }
            // fall through
          case 228: break;
          case 95:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.string, yytext());
            }
            // fall through
          case 229: break;
          case 96:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.structSoli, yytext());
            }
            // fall through
          case 230: break;
          case 97:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.ufixedSoli, yytext());
            }
            // fall through
          case 231: break;
          case 98:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.uint_DS, yytext());
            }
            // fall through
          case 232: break;
          case 99:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.uint_TD , yytext());
            }
            // fall through
          case 233: break;
          case 100:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.uint_SC, yytext());
            }
            // fall through
          case 234: break;
          case 101:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.address, yytext());
            }
            // fall through
          case 235: break;
          case 102:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_X, yytext());
            }
            // fall through
          case 236: break;
          case 103:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XI, yytext());
            }
            // fall through
          case 237: break;
          case 104:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XII, yytext());
            }
            // fall through
          case 238: break;
          case 105:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XIII, yytext());
            }
            // fall through
          case 239: break;
          case 106:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XIV, yytext());
            }
            // fall through
          case 240: break;
          case 107:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XV, yytext());
            }
            // fall through
          case 241: break;
          case 108:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XVI, yytext());
            }
            // fall through
          case 242: break;
          case 109:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XVII, yytext());
            }
            // fall through
          case 243: break;
          case 110:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XIIX, yytext());
            }
            // fall through
          case 244: break;
          case 111:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XIX, yytext());
            }
            // fall through
          case 245: break;
          case 112:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XX, yytext());
            }
            // fall through
          case 246: break;
          case 113:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XXI, yytext());
            }
            // fall through
          case 247: break;
          case 114:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XXII, yytext());
            }
            // fall through
          case 248: break;
          case 115:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XXIII, yytext());
            }
            // fall through
          case 249: break;
          case 116:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XXIV, yytext());
            }
            // fall through
          case 250: break;
          case 117:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XXV, yytext());
            }
            // fall through
          case 251: break;
          case 118:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XXVI, yytext());
            }
            // fall through
          case 252: break;
          case 119:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XXVII, yytext());
            }
            // fall through
          case 253: break;
          case 120:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XXIIX, yytext());
            }
            // fall through
          case 254: break;
          case 121:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XXIX, yytext());
            }
            // fall through
          case 255: break;
          case 122:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XXX, yytext());
            }
            // fall through
          case 256: break;
          case 123:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XXXI, yytext());
            }
            // fall through
          case 257: break;
          case 124:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));return symbol(Symb.B_XXXII, yytext());
            }
            // fall through
          case 258: break;
          case 125:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.payableSoli, yytext());
            }
            // fall through
          case 259: break;
          case 126:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.privateSoli, yytext());
            }
            // fall through
          case 260: break;
          case 127:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.returns, yytext());
            }
            // fall through
          case 261: break;
          case 128:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.uint_CVO, yytext());
            }
            // fall through
          case 262: break;
          case 129:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.uint_DCS, yytext());
            }
            // fall through
          case 263: break;
          case 130:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.continueSoli, yytext());
            }
            // fall through
          case 264: break;
          case 131:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.contract, yytext());
            }
            // fall through
          case 265: break;
          case 132:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.functionSoli, yytext());
            }
            // fall through
          case 266: break;
          case 133:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.internalSoli, yytext());
            }
            // fall through
          case 267: break;
          case 134:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.solidity, yytext());
            }
            // fall through
          case 268: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
