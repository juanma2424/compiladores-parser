// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: A_Lexico.jflex

/* JFlex example: partial Java language lexer specification */
package Analizadores;
import java.util.ArrayList;
import java_cup.runtime.*;
/**
    * This class is a simple example lexer.
    */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int Chars = 4;
  public static final int hexaState = 6;
  public static final int hexaStateC = 8;
  public static final int hexaStateError = 10;
  public static final int hexaStateCError = 12;
  public static final int stateNosibol = 14;
  public static final int filtro = 16;
  public static final int operator = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\2\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\30"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\0\6\40"+
    "\24\41\1\42\1\0\1\43\1\44\1\45\1\0\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\41\1\57\1\60\1\61\1\62\1\63\1\64\1\41"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\6\21\27\1\32\1\6\1\33\1\6"+
    "\1\34\2\35\1\36\1\37\2\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\34\1\46\1\34\1\47\1\50\1\51"+
    "\2\52\1\53\1\54\2\55\1\56\1\54\1\57\1\60"+
    "\7\61\1\62\1\63\1\64\1\65\1\0\1\66\1\67"+
    "\1\70\1\71\1\20\1\0\1\2\1\72\2\73\1\74"+
    "\1\75\1\76\1\77\1\27\1\100\10\27\1\101\12\27"+
    "\1\102\26\27\1\103\1\0\1\20\4\0\2\73\16\27"+
    "\1\104\2\27\1\100\2\27\1\105\24\27\1\106\1\27"+
    "\2\0\1\2\1\0\1\20\4\73\2\27\1\107\1\27"+
    "\1\110\1\111\3\27\1\112\1\113\4\27\1\114\1\115"+
    "\5\27\1\116\12\27\1\111\4\27\1\117\1\27\1\120"+
    "\1\27\1\121\1\27\2\0\1\20\2\73\2\27\1\122"+
    "\10\27\1\123\4\27\1\124\1\27\1\125\1\126\23\27"+
    "\1\127\1\130\1\0\1\73\2\0\1\73\2\27\2\100"+
    "\7\27\1\131\1\132\4\27\1\133\1\27\1\134\1\135"+
    "\1\27\1\136\1\137\2\27\1\140\1\27\1\141\1\142"+
    "\2\0\1\73\1\143\4\27\1\144\2\27\1\145\1\146"+
    "\1\147\2\27\1\150\1\151\2\0\1\27\1\152\1\153"+
    "\1\27\1\154\1\155\1\156\4\27";

  private static int [] zzUnpackAction() {
    int [] result = new int[373];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u0294\0\u02d6\0\u0318\0\u0294\0\u0294"+
    "\0\u035a\0\u0294\0\u0294\0\u039c\0\u03de\0\u0420\0\u0294\0\u0462"+
    "\0\u04a4\0\u04e6\0\u0528\0\u0294\0\u0294\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0294\0\u0630\0\u0294\0\u039c\0\u0294\0\u0672\0\u06b4\0\u06f6"+
    "\0\u0738\0\u077a\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906"+
    "\0\u0948\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0294\0\u0ad4"+
    "\0\u039c\0\u039c\0\u0b16\0\u0294\0\u0b58\0\u0294\0\u0294\0\u0294"+
    "\0\u0b9a\0\u0294\0\u0294\0\u0294\0\u0294\0\u0294\0\u0bdc\0\u0294"+
    "\0\u0c1e\0\u0294\0\u0294\0\u0294\0\u0294\0\u0c60\0\u0294\0\u0294"+
    "\0\u0294\0\u0ca2\0\u0294\0\u0ce4\0\u0294\0\u0294\0\u0d26\0\u0294"+
    "\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0294\0\u0294\0\u0294"+
    "\0\u0294\0\u039c\0\u0eb2\0\u0294\0\u0294\0\u0294\0\u0ef4\0\u0f36"+
    "\0\u0f78\0\u0294\0\u0fba\0\u0ffc\0\u0294\0\u0294\0\u0294\0\u103e"+
    "\0\u1080\0\u0630\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca\0\u120c"+
    "\0\u124e\0\u1290\0\u0630\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da"+
    "\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u0630\0\u1566\0\u15a8"+
    "\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8"+
    "\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986\0\u19c8"+
    "\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u0294\0\u1b12\0\u1b54\0\u1b96"+
    "\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u1da6"+
    "\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6"+
    "\0\u1ff8\0\u203a\0\u207c\0\u0630\0\u20be\0\u2100\0\u2142\0\u2184"+
    "\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310\0\u2352\0\u2394"+
    "\0\u23d6\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520\0\u2562\0\u25a4"+
    "\0\u25e6\0\u2628\0\u266a\0\u26ac\0\u26ee\0\u2730\0\u0630\0\u2772"+
    "\0\u27b4\0\u27f6\0\u1b96\0\u2838\0\u287a\0\u1c5c\0\u28bc\0\u28fe"+
    "\0\u2940\0\u2982\0\u29c4\0\u0630\0\u2a06\0\u2a48\0\u2a8a\0\u2acc"+
    "\0\u2b0e\0\u2b50\0\u0630\0\u0630\0\u2b92\0\u2bd4\0\u2c16\0\u2c58"+
    "\0\u0294\0\u0294\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2\0\u0630"+
    "\0\u2de4\0\u2e26\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2"+
    "\0\u2ff4\0\u3036\0\u0630\0\u3078\0\u30ba\0\u30fc\0\u313e\0\u0630"+
    "\0\u3180\0\u0630\0\u31c2\0\u3204\0\u3246\0\u3288\0\u32ca\0\u330c"+
    "\0\u334e\0\u3390\0\u33d2\0\u3414\0\u0630\0\u3456\0\u3498\0\u34da"+
    "\0\u351c\0\u355e\0\u35a0\0\u35e2\0\u3624\0\u0630\0\u3666\0\u36a8"+
    "\0\u36ea\0\u372c\0\u0630\0\u376e\0\u0630\0\u0630\0\u37b0\0\u37f2"+
    "\0\u3834\0\u3876\0\u38b8\0\u38fa\0\u393c\0\u397e\0\u39c0\0\u3a02"+
    "\0\u3a44\0\u3a86\0\u3ac8\0\u3b0a\0\u3b4c\0\u3b8e\0\u3bd0\0\u3c12"+
    "\0\u3c54\0\u0630\0\u0630\0\u3c96\0\u3cd8\0\u3d1a\0\u3d5c\0\u3d9e"+
    "\0\u3de0\0\u3e22\0\u3e64\0\u3ea6\0\u3ee8\0\u3f2a\0\u3f6c\0\u3fae"+
    "\0\u3ff0\0\u4032\0\u4074\0\u0630\0\u0630\0\u40b6\0\u40f8\0\u413a"+
    "\0\u417c\0\u0630\0\u41be\0\u0630\0\u4200\0\u4242\0\u0630\0\u0630"+
    "\0\u4284\0\u42c6\0\u0630\0\u4308\0\u0630\0\u0630\0\u434a\0\u438c"+
    "\0\u43ce\0\u0630\0\u4410\0\u4452\0\u4494\0\u44d6\0\u0630\0\u4518"+
    "\0\u455a\0\u0630\0\u0630\0\u0630\0\u459c\0\u45de\0\u0630\0\u0630"+
    "\0\u4620\0\u4662\0\u46a4\0\u0630\0\u0630\0\u46e6\0\u0630\0\u0630"+
    "\0\u0630\0\u4728\0\u476a\0\u47ac\0\u47ee";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[373];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\2\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\11\33\1\34\1\35\1\36\1\37\1\40\1\41\2\42"+
    "\1\43\1\44\1\45\1\42\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\42\1\54\1\55\2\42\1\56\2\42"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\42"+
    "\1\66\1\42\1\67\1\70\1\71\1\72\2\73\1\74"+
    "\1\75\1\73\1\76\2\73\1\77\73\73\1\100\1\101"+
    "\1\73\1\102\2\73\1\103\71\73\5\104\1\105\2\104"+
    "\1\106\10\104\11\107\1\104\1\110\4\104\1\111\41\104"+
    "\5\112\1\113\2\112\1\105\10\112\11\107\1\112\1\110"+
    "\4\112\1\111\41\112\1\114\2\115\1\116\1\114\1\117"+
    "\25\114\1\117\56\114\1\117\22\114\1\117\46\114\1\120"+
    "\2\121\1\122\5\120\2\123\2\120\1\123\2\120\1\124"+
    "\12\120\1\123\6\120\2\123\32\120\1\123\1\120\1\123"+
    "\1\120\1\125\3\126\1\127\1\125\1\130\1\131\1\125"+
    "\2\130\1\132\1\127\1\130\1\127\1\130\1\127\11\126"+
    "\2\130\1\133\1\127\1\134\1\130\2\126\3\130\1\125"+
    "\30\126\1\130\1\135\1\130\1\136\102\137\104\0\1\14"+
    "\134\0\1\140\53\0\1\141\104\0\1\142\25\0\2\143"+
    "\1\0\1\142\1\0\31\143\2\0\2\142\13\0\1\45"+
    "\21\0\1\144\101\0\1\145\101\0\1\146\65\0\11\147"+
    "\63\0\1\150\4\0\1\151\14\0\1\152\63\0\1\147"+
    "\1\0\11\33\6\0\2\153\3\0\5\153\1\154\23\153"+
    "\40\0\1\45\1\155\101\0\1\156\101\0\1\157\1\45"+
    "\47\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\31\42\4\160\4\0\1\160\1\0\2\160\3\0\2\160"+
    "\1\0\1\160\1\0\1\160\11\42\1\160\1\0\4\160"+
    "\2\42\3\160\4\42\1\161\14\42\1\162\7\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\1\42\1\163\14\42\1\164\1\42\1\165\6\42\1\166"+
    "\1\42\4\160\4\0\1\160\1\0\2\160\3\0\2\160"+
    "\1\0\1\160\1\0\1\160\11\42\1\160\1\0\4\160"+
    "\2\42\3\160\1\42\1\167\14\42\1\170\12\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\1\42\1\171\3\42\1\172\10\42\1\173\12\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\13\42\1\174\1\42\1\175\1\42\1\176\11\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\1\42\1\177\7\42\1\200\4\42\1\201\1\42\1\202"+
    "\2\42\1\203\5\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\11\42\1\160"+
    "\1\0\4\160\2\42\3\160\5\42\1\204\10\42\1\205"+
    "\12\42\4\160\4\0\1\160\1\0\2\160\3\0\2\160"+
    "\1\0\1\160\1\0\1\160\11\42\1\160\1\0\4\160"+
    "\2\42\3\160\6\42\1\206\5\42\1\207\1\210\13\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\1\42\1\211\7\42\1\212\4\42\1\213\12\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\1\42\1\214\16\42\1\215\2\42\1\216\5\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\5\42\1\217\23\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\5\42\1\220\10\42"+
    "\1\221\3\42\1\222\5\42\1\223\4\160\4\0\1\160"+
    "\1\0\2\160\3\0\2\160\1\0\1\160\1\0\1\160"+
    "\11\42\1\160\1\0\4\160\2\42\3\160\10\42\1\224"+
    "\7\42\1\225\10\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\11\42\1\160"+
    "\1\0\4\160\2\42\3\160\6\42\1\226\2\42\1\227"+
    "\17\42\4\160\4\0\1\160\1\0\2\160\3\0\2\160"+
    "\1\0\1\160\1\0\1\160\11\42\1\160\1\0\4\160"+
    "\2\42\3\160\1\42\1\230\7\42\1\231\17\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\5\42\1\232\2\42\1\233\20\42\4\160\4\0\1\160"+
    "\1\0\2\160\3\0\2\160\1\0\1\160\1\0\1\160"+
    "\11\42\1\160\1\0\4\160\2\42\3\160\5\42\1\234"+
    "\23\42\4\160\77\0\1\235\2\0\2\73\2\0\1\73"+
    "\1\0\2\73\1\0\71\73\2\0\1\74\101\0\1\100"+
    "\120\0\11\107\110\0\1\111\43\0\1\115\101\0\1\121"+
    "\117\0\1\123\116\0\1\130\53\0\1\130\105\0\1\130"+
    "\21\0\1\130\100\0\2\130\101\0\2\130\142\0\1\130"+
    "\23\0\11\143\6\0\2\143\3\0\31\143\23\0\1\236"+
    "\1\0\11\237\6\0\2\153\3\0\5\153\1\154\23\153"+
    "\4\0\13\240\1\241\66\240\2\151\1\14\1\15\76\151"+
    "\21\0\11\153\6\0\2\153\3\0\31\153\22\0\1\242"+
    "\1\243\1\0\11\244\6\0\2\153\3\0\5\153\1\245"+
    "\23\153\10\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\0\1\160\1\0\4\160\2\0"+
    "\3\160\31\0\4\160\4\0\1\160\1\0\2\160\3\0"+
    "\2\160\1\0\1\160\1\0\1\160\11\42\1\160\1\0"+
    "\4\160\2\42\3\160\4\42\1\246\24\42\4\160\4\0"+
    "\1\160\1\0\2\160\3\0\2\160\1\0\1\160\1\0"+
    "\1\160\11\42\1\160\1\0\4\160\2\42\3\160\13\42"+
    "\1\247\15\42\4\160\4\0\1\160\1\0\2\160\3\0"+
    "\2\160\1\0\1\160\1\0\1\160\11\42\1\160\1\0"+
    "\4\160\2\42\3\160\16\42\1\250\12\42\4\160\4\0"+
    "\1\160\1\0\2\160\3\0\2\160\1\0\1\160\1\0"+
    "\1\160\11\42\1\160\1\0\4\160\2\42\3\160\5\42"+
    "\1\251\23\42\4\160\4\0\1\160\1\0\2\160\3\0"+
    "\2\160\1\0\1\160\1\0\1\160\11\42\1\160\1\0"+
    "\4\160\2\42\3\160\22\42\1\252\6\42\4\160\4\0"+
    "\1\160\1\0\2\160\3\0\2\160\1\0\1\160\1\0"+
    "\1\160\11\42\1\160\1\0\4\160\2\42\3\160\13\42"+
    "\1\253\15\42\4\160\4\0\1\160\1\0\2\160\3\0"+
    "\2\160\1\0\1\160\1\0\1\160\11\42\1\160\1\0"+
    "\4\160\2\42\3\160\15\42\1\254\13\42\4\160\4\0"+
    "\1\160\1\0\2\160\3\0\2\160\1\0\1\160\1\0"+
    "\1\160\11\42\1\160\1\0\4\160\2\42\3\160\27\42"+
    "\1\255\1\42\4\160\4\0\1\160\1\0\2\160\3\0"+
    "\2\160\1\0\1\160\1\0\1\160\11\42\1\160\1\0"+
    "\4\160\2\42\3\160\13\42\1\256\15\42\4\160\4\0"+
    "\1\160\1\0\2\160\3\0\2\160\1\0\1\160\1\0"+
    "\1\160\11\42\1\160\1\0\4\160\2\42\3\160\21\42"+
    "\1\257\7\42\4\160\4\0\1\160\1\0\2\160\3\0"+
    "\2\160\1\0\1\160\1\0\1\160\11\42\1\160\1\0"+
    "\4\160\2\42\3\160\23\42\1\260\5\42\4\160\4\0"+
    "\1\160\1\0\2\160\3\0\2\160\1\0\1\160\1\0"+
    "\1\160\11\42\1\160\1\0\4\160\2\42\3\160\21\42"+
    "\1\261\7\42\4\160\4\0\1\160\1\0\2\160\3\0"+
    "\2\160\1\0\1\160\1\0\1\160\11\42\1\160\1\0"+
    "\4\160\2\42\3\160\13\42\1\262\15\42\4\160\4\0"+
    "\1\160\1\0\2\160\3\0\2\160\1\0\1\160\1\0"+
    "\1\160\11\42\1\160\1\0\4\160\2\42\3\160\15\42"+
    "\1\263\13\42\4\160\4\0\1\160\1\0\2\160\3\0"+
    "\2\160\1\0\1\160\1\0\1\160\11\42\1\160\1\0"+
    "\4\160\2\42\3\160\20\42\1\264\10\42\4\160\4\0"+
    "\1\160\1\0\2\160\3\0\2\160\1\0\1\160\1\0"+
    "\1\160\11\42\1\160\1\0\4\160\2\42\3\160\16\42"+
    "\1\265\12\42\4\160\4\0\1\160\1\0\2\160\3\0"+
    "\2\160\1\0\1\160\1\0\1\160\11\42\1\160\1\0"+
    "\4\160\2\42\3\160\15\42\1\266\13\42\4\160\4\0"+
    "\1\160\1\0\2\160\3\0\2\160\1\0\1\160\1\0"+
    "\1\160\11\42\1\160\1\0\4\160\2\42\3\160\26\42"+
    "\1\267\2\42\4\160\4\0\1\160\1\0\2\160\3\0"+
    "\2\160\1\0\1\160\1\0\1\160\11\42\1\160\1\0"+
    "\4\160\2\42\3\160\23\42\1\270\5\42\4\160\4\0"+
    "\1\160\1\0\2\160\3\0\2\160\1\0\1\160\1\0"+
    "\1\160\11\42\1\160\1\0\4\160\2\42\3\160\17\42"+
    "\1\271\11\42\4\160\4\0\1\160\1\0\2\160\3\0"+
    "\2\160\1\0\1\160\1\0\1\160\11\42\1\160\1\0"+
    "\4\160\2\42\3\160\22\42\1\272\6\42\4\160\4\0"+
    "\1\160\1\0\2\160\3\0\2\160\1\0\1\160\1\0"+
    "\1\160\11\42\1\160\1\0\4\160\2\42\3\160\17\42"+
    "\1\273\11\42\4\160\4\0\1\160\1\0\2\160\3\0"+
    "\2\160\1\0\1\160\1\0\1\160\11\42\1\160\1\0"+
    "\4\160\2\42\3\160\15\42\1\274\13\42\4\160\4\0"+
    "\1\160\1\0\2\160\3\0\2\160\1\0\1\160\1\0"+
    "\1\160\11\42\1\160\1\0\4\160\2\42\3\160\4\42"+
    "\1\275\24\42\4\160\4\0\1\160\1\0\2\160\3\0"+
    "\2\160\1\0\1\160\1\0\1\160\11\42\1\160\1\0"+
    "\4\160\2\42\3\160\27\42\1\276\1\42\4\160\4\0"+
    "\1\160\1\0\2\160\3\0\2\160\1\0\1\160\1\0"+
    "\1\160\11\42\1\160\1\0\4\160\2\42\3\160\1\42"+
    "\1\277\7\42\1\300\17\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\2\42\1\301\26\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\22\42\1\302\6\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\3\42\1\303\11\42"+
    "\1\304\13\42\4\160\4\0\1\160\1\0\2\160\3\0"+
    "\2\160\1\0\1\160\1\0\1\160\11\42\1\160\1\0"+
    "\4\160\2\42\3\160\13\42\1\305\15\42\4\160\4\0"+
    "\1\160\1\0\2\160\3\0\2\160\1\0\1\160\1\0"+
    "\1\160\11\42\1\160\1\0\4\160\2\42\3\160\20\42"+
    "\1\306\10\42\4\160\4\0\1\160\1\0\2\160\3\0"+
    "\2\160\1\0\1\160\1\0\1\160\11\42\1\160\1\0"+
    "\4\160\2\42\3\160\1\42\1\307\27\42\4\160\4\0"+
    "\1\160\1\0\2\160\3\0\2\160\1\0\1\160\1\0"+
    "\1\160\11\42\1\160\1\0\4\160\2\42\3\160\11\42"+
    "\1\310\17\42\4\160\4\0\1\160\1\0\2\160\3\0"+
    "\2\160\1\0\1\160\1\0\1\160\11\42\1\160\1\0"+
    "\4\160\2\42\3\160\1\42\1\311\21\42\1\312\5\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\11\42\1\313\17\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\15\42\1\314\13\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\20\42\1\162\10\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\5\42\1\315\23\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\5\42\1\316\3\42\1\317\17\42\4\160\4\0"+
    "\1\160\1\0\2\160\3\0\2\160\1\0\1\160\1\0"+
    "\1\160\11\42\1\160\1\0\4\160\2\42\3\160\11\42"+
    "\1\320\17\42\4\160\4\0\1\160\1\0\2\160\3\0"+
    "\2\160\1\0\1\160\1\0\1\160\11\42\1\160\1\0"+
    "\4\160\2\42\3\160\1\42\1\270\27\42\4\160\21\0"+
    "\11\321\67\0\1\321\1\0\11\237\6\0\2\153\3\0"+
    "\5\153\1\154\23\153\4\0\13\240\1\322\101\240\1\322"+
    "\4\240\1\323\61\240\16\0\1\324\1\243\1\0\11\325"+
    "\71\0\11\326\67\0\1\327\1\0\11\330\6\0\2\153"+
    "\3\0\31\153\22\0\1\324\1\243\1\0\11\331\6\0"+
    "\2\153\3\0\5\153\1\245\23\153\10\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\20\42\1\332\10\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\1\42\1\333\27\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\13\42\1\334\15\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\1\42\1\335\27\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\5\42\1\336\23\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\13\42\1\337\15\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\21\42\1\340\1\341"+
    "\6\42\4\160\4\0\1\160\1\0\2\160\3\0\2\160"+
    "\1\0\1\160\1\0\1\160\11\42\1\160\1\0\4\160"+
    "\2\42\3\160\21\42\1\317\7\42\4\160\4\0\1\160"+
    "\1\0\2\160\3\0\2\160\1\0\1\160\1\0\1\160"+
    "\11\42\1\160\1\0\4\160\2\42\3\160\5\42\1\342"+
    "\23\42\4\160\4\0\1\160\1\0\2\160\3\0\2\160"+
    "\1\0\1\160\1\0\1\160\11\42\1\160\1\0\4\160"+
    "\2\42\3\160\5\42\1\343\23\42\4\160\4\0\1\160"+
    "\1\0\2\160\3\0\2\160\1\0\1\160\1\0\1\160"+
    "\11\42\1\160\1\0\4\160\2\42\3\160\14\42\1\344"+
    "\14\42\4\160\4\0\1\160\1\0\2\160\3\0\2\160"+
    "\1\0\1\160\1\0\1\160\11\42\1\160\1\0\4\160"+
    "\2\42\3\160\11\42\1\345\17\42\4\160\4\0\1\160"+
    "\1\0\2\160\3\0\2\160\1\0\1\160\1\0\1\160"+
    "\11\42\1\160\1\0\4\160\2\42\3\160\21\42\1\346"+
    "\7\42\4\160\4\0\1\160\1\0\2\160\3\0\2\160"+
    "\1\0\1\160\1\0\1\160\11\42\1\160\1\0\4\160"+
    "\2\42\3\160\15\42\1\347\13\42\4\160\4\0\1\160"+
    "\1\0\2\160\3\0\2\160\1\0\1\160\1\0\1\160"+
    "\11\42\1\160\1\0\4\160\2\42\3\160\14\42\1\162"+
    "\14\42\4\160\4\0\1\160\1\0\2\160\3\0\2\160"+
    "\1\0\1\160\1\0\1\160\11\42\1\160\1\0\4\160"+
    "\2\42\3\160\3\42\1\350\25\42\4\160\4\0\1\160"+
    "\1\351\2\160\1\352\2\0\2\160\1\0\1\160\1\0"+
    "\1\160\11\42\1\160\1\0\4\160\2\42\3\160\31\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\20\42\1\255\10\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\16\42\1\353\12\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\1\42\1\354\1\355\1\356\2\42"+
    "\1\357\1\42\1\360\1\160\1\0\4\160\2\42\3\160"+
    "\5\42\1\361\23\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\11\42\1\160"+
    "\1\0\4\160\2\42\3\160\17\42\1\362\11\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\23\42\1\363\5\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\11\42\1\160"+
    "\1\0\4\160\2\42\3\160\11\42\1\364\17\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\1\42\1\365\27\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\11\42\1\160"+
    "\1\0\4\160\2\42\3\160\7\42\1\366\21\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\24\42\1\367\4\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\11\42\1\160"+
    "\1\0\4\160\2\42\3\160\13\42\1\370\15\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\23\42\1\371\5\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\11\42\1\160"+
    "\1\0\4\160\2\42\3\160\16\42\1\372\12\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\4\42\1\373\24\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\11\42\1\160"+
    "\1\0\4\160\2\42\3\160\11\42\1\374\17\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\11\42\1\375\11\42\1\376\5\42\4\160\4\0\1\160"+
    "\1\0\2\160\3\0\2\160\1\0\1\160\1\0\1\160"+
    "\11\42\1\160\1\0\4\160\2\42\3\160\2\42\1\377"+
    "\26\42\4\160\4\0\1\160\1\0\2\160\3\0\2\160"+
    "\1\0\1\160\1\0\1\160\11\42\1\160\1\0\4\160"+
    "\2\42\3\160\21\42\1\u0100\7\42\4\160\4\0\1\160"+
    "\1\0\2\160\3\0\2\160\1\0\1\160\1\0\1\160"+
    "\11\42\1\160\1\0\4\160\2\42\3\160\15\42\1\u0101"+
    "\13\42\4\160\4\0\1\160\1\0\2\160\3\0\2\160"+
    "\1\0\1\160\1\0\1\160\11\42\1\160\1\0\4\160"+
    "\2\42\3\160\5\42\1\u0102\23\42\4\160\4\0\1\160"+
    "\1\0\2\160\3\0\2\160\1\0\1\160\1\0\1\160"+
    "\11\42\1\160\1\0\4\160\2\42\3\160\26\42\1\u0103"+
    "\2\42\4\160\4\0\1\160\1\0\2\160\3\0\2\160"+
    "\1\0\1\160\1\0\1\160\11\42\1\160\1\0\4\160"+
    "\2\42\3\160\22\42\1\u0104\6\42\4\160\4\0\1\160"+
    "\1\0\2\160\3\0\2\160\1\0\1\160\1\0\1\160"+
    "\11\42\1\160\1\0\4\160\2\42\3\160\25\42\1\162"+
    "\3\42\4\160\4\0\1\160\1\0\2\160\3\0\2\160"+
    "\1\0\1\160\1\0\1\160\11\42\1\160\1\0\4\160"+
    "\2\42\3\160\12\42\1\255\16\42\4\160\4\0\1\160"+
    "\1\0\2\160\3\0\2\160\1\0\1\160\1\0\1\160"+
    "\11\42\1\160\1\0\4\160\2\42\3\160\13\42\1\u0105"+
    "\15\42\4\160\17\0\1\236\1\0\11\u0106\6\0\2\153"+
    "\3\0\5\153\1\154\23\153\4\0\13\240\1\322\4\240"+
    "\1\14\61\240\16\0\1\324\1\243\1\0\11\u0107\67\0"+
    "\1\327\1\0\11\u0108\6\0\2\153\3\0\31\153\25\0"+
    "\11\u0109\67\0\1\u0109\1\0\11\330\6\0\2\153\3\0"+
    "\5\153\1\u010a\23\153\23\0\1\326\1\0\11\331\6\0"+
    "\2\153\3\0\31\153\10\0\1\160\1\0\2\160\3\0"+
    "\2\160\1\0\1\160\1\0\1\160\11\42\1\160\1\0"+
    "\4\160\2\42\3\160\5\42\1\u010b\23\42\4\160\4\0"+
    "\1\160\1\0\2\160\3\0\2\160\1\0\1\160\1\0"+
    "\1\160\11\42\1\160\1\0\4\160\2\42\3\160\15\42"+
    "\1\u010c\13\42\4\160\4\0\1\160\1\0\2\160\3\0"+
    "\2\160\1\0\1\160\1\0\1\160\11\42\1\160\1\0"+
    "\4\160\2\42\3\160\12\42\1\u010d\16\42\4\160\4\0"+
    "\1\160\1\0\2\160\3\0\2\160\1\0\1\160\1\0"+
    "\1\160\11\42\1\160\1\0\4\160\2\42\3\160\21\42"+
    "\1\u010e\7\42\4\160\4\0\1\160\1\0\2\160\3\0"+
    "\2\160\1\0\1\160\1\0\1\160\11\42\1\160\1\0"+
    "\4\160\2\42\3\160\3\42\1\u010f\25\42\4\160\4\0"+
    "\1\160\1\0\2\160\3\0\2\160\1\0\1\160\1\0"+
    "\1\160\11\42\1\160\1\0\4\160\2\42\3\160\22\42"+
    "\1\u0110\6\42\4\160\4\0\1\160\1\0\2\160\3\0"+
    "\2\160\1\0\1\160\1\0\1\160\11\42\1\160\1\0"+
    "\4\160\2\42\3\160\11\42\1\u0111\6\42\1\u0112\10\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\7\42\1\u0113\12\42\1\u0114\6\42\4\160\4\0"+
    "\1\160\1\0\2\160\3\0\2\160\1\0\1\160\1\0"+
    "\1\160\11\42\1\160\1\0\4\160\2\42\3\160\13\42"+
    "\1\u0115\15\42\4\160\4\0\1\160\1\0\2\160\3\0"+
    "\2\160\1\0\1\160\1\0\1\160\11\42\1\160\1\0"+
    "\4\160\2\42\3\160\5\42\1\u0116\23\42\4\160\4\0"+
    "\1\160\1\0\2\160\3\0\2\160\1\0\1\160\1\0"+
    "\1\160\11\42\1\160\1\0\4\160\2\42\3\160\5\42"+
    "\1\u0117\23\42\4\160\4\0\1\160\1\0\2\160\3\0"+
    "\2\160\1\0\1\160\1\0\1\160\11\42\1\160\1\0"+
    "\4\160\2\42\3\160\22\42\1\u0118\6\42\4\160\4\0"+
    "\1\160\1\0\2\160\3\0\2\160\1\0\1\160\1\0"+
    "\1\160\11\42\1\160\1\0\4\160\2\42\3\160\20\42"+
    "\1\u0119\10\42\4\160\4\0\1\160\1\0\2\160\3\0"+
    "\2\160\1\0\1\160\1\0\1\160\2\42\1\u011a\3\42"+
    "\1\u011b\2\42\1\160\1\0\4\160\2\42\3\160\31\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\5\42\1\u011c\3\42\1\160\1\0"+
    "\4\160\2\42\3\160\31\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\2\42"+
    "\1\u011d\6\42\1\160\1\0\4\160\2\42\3\160\31\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\4\42\1\u011e\4\42\1\160\1\0"+
    "\4\160\2\42\3\160\31\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\20\42\1\u011f\10\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\11\42\1\u0120\17\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\22\42\1\u0121\6\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\6\42\1\u0122\22\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\2\42\1\u0123\26\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\14\42\1\u0124\14\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\1\42\1\u0125\27\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\11\42\1\u0126\17\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\20\42\1\u0127\10\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\15\42\1\u0128\13\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\4\42\1\u0129\24\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\15\42\1\u012a\13\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\3\42\1\u012b\25\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\16\42\1\317\12\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\21\42\1\u012c\7\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\5\42\1\u012d\23\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\1\42"+
    "\1\u012e\1\u012f\1\u0130\2\42\1\u0131\1\42\1\u0132\1\160"+
    "\1\0\4\160\2\42\3\160\31\42\4\160\4\0\1\160"+
    "\1\0\2\160\3\0\2\160\1\0\1\160\1\0\1\160"+
    "\11\42\1\160\1\0\4\160\2\42\3\160\5\42\1\u0133"+
    "\23\42\4\160\17\0\1\321\1\0\11\u0106\6\0\2\153"+
    "\3\0\5\153\1\154\23\153\23\0\1\326\1\0\11\u0107"+
    "\67\0\1\u0109\1\0\11\u0108\6\0\2\153\3\0\5\153"+
    "\1\u010a\23\153\23\0\1\u0134\1\0\11\u0135\20\0\1\u0136"+
    "\45\0\1\u0137\2\0\11\u0138\6\0\2\153\3\0\31\153"+
    "\10\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\21\42\1\u0139\7\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\11\42\1\160"+
    "\1\0\4\160\2\42\3\160\3\42\1\u013a\25\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\1\42\2\u013b\1\u013c\5\162\1\160\1\0"+
    "\4\160\2\42\3\160\31\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\16\42\1\u013d\12\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\20\42\1\u013e\10\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\15\42\1\u013f\13\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\1\42\1\u0140\27\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\1\42\1\u0141\27\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\5\42\1\162\23\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\16\42\1\u0142\12\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\27\42\1\317\1\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\11\42\1\u0143\17\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\22\42\1\162\6\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\10\42"+
    "\1\u0144\1\160\1\0\4\160\2\42\3\160\31\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\6\42\1\u0145\2\42\1\160\1\0\4\160"+
    "\2\42\3\160\31\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\11\42\1\160"+
    "\1\0\4\160\2\42\3\160\15\42\1\u0146\13\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\15\42\1\u0147\13\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\11\42\1\160"+
    "\1\0\4\160\2\42\3\160\5\42\1\255\23\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\11\42\1\u0148\17\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\11\42\1\160"+
    "\1\0\4\160\2\42\3\160\13\42\1\u0149\15\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\1\42\1\u014a\27\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\11\42\1\160"+
    "\1\0\4\160\2\42\3\160\22\42\1\u014b\6\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\3\42\1\u014c\25\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\11\42\1\160"+
    "\1\0\4\160\2\42\3\160\15\42\1\u014d\13\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\4\42\1\255\24\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\11\42\1\160"+
    "\1\0\4\160\2\42\3\160\11\42\1\u014e\17\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\7\42\1\u014f\21\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\11\42\1\160"+
    "\1\0\4\160\2\42\3\160\22\42\1\u0150\6\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\6\42\1\u0151\22\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\11\42\1\160"+
    "\1\0\4\160\2\42\3\160\4\42\1\162\24\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\2\42\1\u0152\3\42\1\u0153\2\42\1\160"+
    "\1\0\4\160\2\42\3\160\31\42\4\160\4\0\1\160"+
    "\1\0\2\160\3\0\2\160\1\0\1\160\1\0\1\160"+
    "\5\42\1\u0154\3\42\1\160\1\0\4\160\2\42\3\160"+
    "\31\42\4\160\4\0\1\160\1\0\2\160\3\0\2\160"+
    "\1\0\1\160\1\0\1\160\2\42\1\u0155\6\42\1\160"+
    "\1\0\4\160\2\42\3\160\31\42\4\160\4\0\1\160"+
    "\1\0\2\160\3\0\2\160\1\0\1\160\1\0\1\160"+
    "\4\42\1\u0156\4\42\1\160\1\0\4\160\2\42\3\160"+
    "\31\42\4\160\21\0\11\u0157\67\0\1\u0157\1\0\11\u0135"+
    "\20\0\1\u0136\45\0\1\u0137\2\0\11\u0158\71\0\11\u0158"+
    "\67\0\1\u0134\1\0\11\u0159\6\0\2\153\3\0\31\153"+
    "\10\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\21\42\1\u015a\7\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\11\42\1\160"+
    "\1\0\4\160\2\42\3\160\5\42\1\373\23\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\162\1\160\1\0\4\160\2\42\3\160"+
    "\31\42\4\160\4\0\1\160\1\0\2\160\3\0\2\160"+
    "\1\0\1\160\1\0\1\160\3\162\6\42\1\160\1\0"+
    "\4\160\2\42\3\160\31\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\4\42\1\u013a\24\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\23\42\1\u015b\5\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\23\42\1\u015c\5\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\3\42\1\u015d\25\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\22\42\1\u015e\6\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\15\42\1\u015f\13\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\16\42\1\u0160\12\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\1\42\1\u0161\27\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\7\42\1\162\21\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\5\42\1\230\23\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\5\42\1\u0162\23\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\5\42\1\u0163\23\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\21\42\1\u0164\7\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\11\42\1\160\1\0\4\160\2\42"+
    "\3\160\22\42\1\u0165\6\42\4\160\4\0\1\160\1\0"+
    "\2\160\3\0\2\160\1\0\1\160\1\0\1\160\11\42"+
    "\1\160\1\0\4\160\2\42\3\160\5\42\1\u0166\23\42"+
    "\4\160\4\0\1\160\1\0\2\160\3\0\2\160\1\0"+
    "\1\160\1\0\1\160\10\42\1\u0167\1\160\1\0\4\160"+
    "\2\42\3\160\31\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\6\42\1\u0168"+
    "\2\42\1\160\1\0\4\160\2\42\3\160\31\42\4\160"+
    "\17\0\1\u0134\1\0\11\u0169\20\0\1\u0136\46\0\1\u0134"+
    "\1\0\11\u016a\6\0\2\153\3\0\31\153\23\0\1\u0157"+
    "\1\0\11\u0159\6\0\2\153\3\0\5\153\1\u010a\23\153"+
    "\10\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\3\42\1\u016b\25\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\11\42\1\160"+
    "\1\0\4\160\2\42\3\160\5\42\1\u016c\23\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\22\42\1\u016d\6\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\11\42\1\160"+
    "\1\0\4\160\2\42\3\160\5\42\1\u016e\23\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\15\42\1\u016f\13\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\11\42\1\160"+
    "\1\0\4\160\2\42\3\160\13\42\1\u0170\15\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\27\42\1\u0171\1\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\11\42\1\160"+
    "\1\0\4\160\2\42\3\160\20\42\1\373\10\42\4\160"+
    "\17\0\1\u0157\1\0\11\u0169\20\0\1\u0136\46\0\1\u0157"+
    "\1\0\11\u016a\6\0\2\153\3\0\5\153\1\u010a\23\153"+
    "\10\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\22\42\1\u0172\6\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\11\42\1\160"+
    "\1\0\4\160\2\42\3\160\3\42\1\u0173\25\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\16\42\1\230\12\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\11\42\1\160"+
    "\1\0\4\160\2\42\3\160\1\42\1\u0174\27\42\4\160"+
    "\4\0\1\160\1\0\2\160\3\0\2\160\1\0\1\160"+
    "\1\0\1\160\11\42\1\160\1\0\4\160\2\42\3\160"+
    "\13\42\1\u0175\15\42\4\160\4\0\1\160\1\0\2\160"+
    "\3\0\2\160\1\0\1\160\1\0\1\160\11\42\1\160"+
    "\1\0\4\160\2\42\3\160\13\42\1\373\15\42\4\160";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18480];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\2\11\2\1\2\11\1\1\2\11\3\1\1\11"+
    "\4\1\2\11\3\1\1\11\1\1\1\11\1\1\1\11"+
    "\21\1\1\11\4\1\1\11\1\1\3\11\1\1\5\11"+
    "\1\1\1\11\1\1\4\11\1\1\3\11\1\1\1\11"+
    "\1\1\2\11\1\1\1\11\5\1\4\11\1\0\1\1"+
    "\3\11\1\1\1\0\1\1\1\11\2\1\3\11\55\1"+
    "\1\11\1\0\1\1\4\0\55\1\2\0\1\1\1\0"+
    "\24\1\2\11\33\1\2\0\54\1\1\0\1\1\2\0"+
    "\37\1\2\0\20\1\2\0\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[373];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    StringBuffer stringN = new StringBuffer();
    public static int banderaN = 0;
    public static int bandera = 0;
    public static int bandera2 = 0;
    public static int bandera3 = 0;
    public static ArrayList<Token> tokens = new ArrayList<>();  
    public static ArrayList<Token> errores = new ArrayList<>();  

    private Symbol symbol(int type) {
      return new Symbol(type, yyline, yycolumn);
    }
     private Symbol symbol(int type, Object value) {
       System.out.println(value);
       System.out.println(type);
      return new Symbol(type, yyline, yycolumn, value);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Symb.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { stringN.setLength(0);
     stringN.append(yytext());
     yybegin(stateNosibol);
            }
            // fall through
          case 111: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 112: break;
          case 3:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.negacion, yytext());
            }
            // fall through
          case 113: break;
          case 4:
            { string.setLength(0); yybegin(STRING); bandera = yycolumn;
            }
            // fall through
          case 114: break;
          case 5:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.porcentaje, yytext());
            }
            // fall through
          case 115: break;
          case 6:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
            }
            // fall through
          case 116: break;
          case 7:
            { string.setLength(0); yybegin(Chars); bandera = yycolumn;
            }
            // fall through
          case 117: break;
          case 8:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.O_Parent_R, yytext());
            }
            // fall through
          case 118: break;
          case 9:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.C_Parent_R, yytext());
            }
            // fall through
          case 119: break;
          case 10:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.por, yytext());
            }
            // fall through
          case 120: break;
          case 11:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.mas, yytext());
            }
            // fall through
          case 121: break;
          case 12:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.coma, yytext());
            }
            // fall through
          case 122: break;
          case 13:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.menos, yytext());
            }
            // fall through
          case 123: break;
          case 14:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.punto, yytext());
            }
            // fall through
          case 124: break;
          case 15:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.div, yytext());
            }
            // fall through
          case 125: break;
          case 16:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Literal: Numero")); return symbol(Symb.numero, yytext());
            }
            // fall through
          case 126: break;
          case 17:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.punto_punto, yytext());
            }
            // fall through
          case 127: break;
          case 18:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.punto_coma, yytext());
            }
            // fall through
          case 128: break;
          case 19:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.menor, yytext());
            }
            // fall through
          case 129: break;
          case 20:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.igual, yytext());
            }
            // fall through
          case 130: break;
          case 21:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.mayor, yytext());
            }
            // fall through
          case 131: break;
          case 22:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.interrogacion_C, yytext());
            }
            // fall through
          case 132: break;
          case 23:
            { stringN.setLength(0);
string.setLength(0);
string.append(yytext());
stringN.append(yytext());
yybegin(filtro);
            }
            // fall through
          case 133: break;
          case 24:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.O_Parent_C , yytext());
            }
            // fall through
          case 134: break;
          case 25:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.C_Parent_C, yytext());
            }
            // fall through
          case 135: break;
          case 26:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.O_Parent_L , yytext());
            }
            // fall through
          case 136: break;
          case 27:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.C_Parent_L, yytext());
            }
            // fall through
          case 137: break;
          case 28:
            { string.append( yytext() );
            }
            // fall through
          case 138: break;
          case 29:
            { errores.add(new Token(string.toString(), yyline, bandera, "Error stringASAD"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 139: break;
          case 30:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal string"));
    return symbol(Symb.stringSoli, yytext());
            }
            // fall through
          case 140: break;
          case 31:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error string"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 141: break;
          case 32:
            { string.append( yytext() );
    errores.add(new Token(string.toString(), yyline, bandera, "Error char"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 142: break;
          case 33:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error char"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 143: break;
          case 34:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal char"));
    return symbol(Symb.charss, yytext());
            }
            // fall through
          case 144: break;
          case 35:
            { string.append(yytext());
    yybegin(hexaStateError);
            }
            // fall through
          case 145: break;
          case 36:
            { yybegin(YYINITIAL);
    string.append( yytext() ); 
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal hexadecimal/Palabra Reservada")); 
    return symbol(Symb.numero, yytext());
            }
            // fall through
          case 146: break;
          case 37:
            { string.append(yytext());
    errores.add(new Token(string.toString(), yyline, yycolumn, "Error: comillas de cierre incorrectas"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 147: break;
          case 38:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); 
    errores.add(new Token("Comillas", yyline, yycolumn, "Error: hexadecimal sin cierre"));
    yybegin(YYINITIAL);
    return symbol(Symb.punto_coma, yytext());
            }
            // fall through
          case 148: break;
          case 39:
            { string.append(yytext());
    yybegin(hexaStateCError);
            }
            // fall through
          case 149: break;
          case 40:
            { string.append( yytext() ); 
    errores.add(new Token(string.toString(), yyline, yycolumn, "Error: comillas de cierre incorrectas"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 150: break;
          case 41:
            { string.append(yytext());
            }
            // fall through
          case 151: break;
          case 42:
            { yybegin(YYINITIAL); errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
            }
            // fall through
          case 152: break;
          case 43:
            { yybegin(YYINITIAL);
    string.append(yytext());
    errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
            }
            // fall through
          case 153: break;
          case 44:
            { stringN.append(yytext());yybegin(stateNosibol);
            }
            // fall through
          case 154: break;
          case 45:
            { errores.add(new Token(stringN.toString(), yyline, yycolumn, "Error: identificador"));
        yybegin(YYINITIAL);
            }
            // fall through
          case 155: break;
          case 46:
            { errores.add(new Token(stringN.toString(), yyline, yycolumn, "Error: identificador"));
        string.setLength(0);
        string.append(yytext());
         yybegin(operator);
            }
            // fall through
          case 156: break;
          case 47:
            { stringN.append(yytext());
    yybegin(stateNosibol);
            }
            // fall through
          case 157: break;
          case 48:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Identificador"));
    yybegin(YYINITIAL);
    return symbol(Symb.ident, string.toString());  //OJO AQUI
            }
            // fall through
          case 158: break;
          case 49:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Identificador"));
    string.setLength(0);
    string.append(yytext());
    yybegin(operator);
    return symbol(Symb.ident, yytext());  //OJO AQUI
            }
            // fall through
          case 159: break;
          case 50:
            { string.append(yytext()) ;
              errores.add(new Token(string.toString(), yyline, yycolumn, "Error Identificador"));
              yybegin(YYINITIAL);
            }
            // fall through
          case 160: break;
          case 51:
            { if (string.toString().equals("!")){        tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));          return symbol(Symb.negacion,   string.toString());}
if (string.toString().equals("&&")){       tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.op_and,  string.toString());}
if (string.toString().equals("^")){        tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));}
if (string.toString().equals("==")){       tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.igual_igual, string.toString()); }
if (string.toString().equals("!=")){       tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));          return symbol(Symb.diferente,string.toString());  }       
if (string.toString().equals( "||")){      tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.op_or, string.toString());     }        
if (string.toString().equals("<=")){       tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));          return symbol(Symb.menor_igual,string.toString());  }         
if (string.toString().equals( "<" )){      tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.menor,string.toString());        }    
if (string.toString().equals(">=")){       tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));          return symbol(Symb.mayor_igual,string.toString());   }        
if (string.toString().equals(">")){        tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.mayor, string.toString());       }    
if (string.toString().equals("&" )){       tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));}
if (string.toString().equals( "|")){       tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador"));}
if (string.toString().equals( "~")){       tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador"));}
if (string.toString().equals( "+" )){      tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.mas, string.toString());        }     
if (string.toString().equals( "-" )){      tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.menos,string.toString());            }
if (string.toString().equals( "*" )){      tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.por,string.toString());        }
if (string.toString().equals( "/")){       tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.div,string.toString());              }
if (string.toString().equals( "%" )){      tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.porcentaje,string.toString());       }
if (string.toString().equals( "**")){      tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador"));}
if (string.toString().equals("<<")){       tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador"));}
if (string.toString().equals( ">>")){      tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador"));}
if (string.toString().equals( "=")){       tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.igual,string.toString());            }
if (string.toString().equals( ",")){       tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.coma,string.toString());             }
if (string.toString().equals( ";")){       tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.punto_coma,string.toString());        }
if (string.toString().equals( ".")){       tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.punto,string.toString());            }
if (string.toString().equals( "(")){       tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.O_Parent_R,string.toString());      }
if (string.toString().equals( ")")){       tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.C_Parent_R,string.toString());      }
if (string.toString().equals( "[")){       tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.O_Parent_C ,string.toString());     }
if (string.toString().equals( "]")){       tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.C_Parent_C,string.toString());     }
if (string.toString().equals( "?")){       tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.interrogacion_C,string.toString());             }
if (string.toString().equals( ":")){       tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.punto_punto,string.toString());             }
if (string.toString().equals( "{")){       tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.O_Parent_L ,string.toString());        }
if (string.toString().equals( "}")){       tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.C_Parent_L,string.toString());        }
if (string.toString().equals( "+=")){      tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.mas_igual,string.toString());         }
if (string.toString().equals( "-=")){      tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.menos_igual,string.toString());       }
if (string.toString().equals( "*=")){      tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.por_igual,string.toString());   }
if (string.toString().equals( "/=")){      tokens.add(new Token(string.toString(), yyline, yycolumn, "Operador")); return symbol(Symb.div_igual, string.toString());        }
yybegin(YYINITIAL);
            }
            // fall through
          case 161: break;
          case 52:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.diferente, yytext());
            }
            // fall through
          case 162: break;
          case 53:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.op_and, yytext());
            }
            // fall through
          case 163: break;
          case 54:
            { string.setLength(0);
  string.append(yytext());
  errores.add(new Token(string.toString(), yyline, yycolumn, "Error Decimal"));//WHY ERROR
  yybegin(YYINITIAL);
            }
            // fall through
          case 164: break;
          case 55:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.por_igual, yytext());
            }
            // fall through
          case 165: break;
          case 56:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.mas_igual, yytext());
            }
            // fall through
          case 166: break;
          case 57:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.menos_igual, yytext());
            }
            // fall through
          case 167: break;
          case 58:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); return symbol(Symb.div_igual, yytext());
            }
            // fall through
          case 168: break;
          case 59:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: Numero"));
            }
            // fall through
          case 169: break;
          case 60:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.menor_igual, yytext());
            }
            // fall through
          case 170: break;
          case 61:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.igual_igual, yytext());
            }
            // fall through
          case 171: break;
          case 62:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.mayor_igual, yytext());
            }
            // fall through
          case 172: break;
          case 63:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error Identificador"));
            }
            // fall through
          case 173: break;
          case 64:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));
            }
            // fall through
          case 174: break;
          case 65:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.doSoli, yytext());
            }
            // fall through
          case 175: break;
          case 66:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.ifSoli, yytext());
            }
            // fall through
          case 176: break;
          case 67:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));  return symbol(Symb.op_or, yytext());
            }
            // fall through
          case 177: break;
          case 68:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.forSoli, yytext());
            }
            // fall through
          case 178: break;
          case 69:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.intSoli, yytext());
            }
            // fall through
          case 179: break;
          case 70:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Units"));
            }
            // fall through
          case 180: break;
          case 71:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.bool, yytext());
            }
            // fall through
          case 181: break;
          case 72:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.byteSoli, yytext());
            }
            // fall through
          case 182: break;
          case 73:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Transac"));
            }
            // fall through
          case 183: break;
          case 74:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.elseSoli, yytext());
            }
            // fall through
          case 184: break;
          case 75:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.enumSoli, yytext());
            }
            // fall through
          case 185: break;
          case 76:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaState);
            }
            // fall through
          case 186: break;
          case 77:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaStateC);
            }
            // fall through
          case 187: break;
          case 78:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.int_O, yytext());
            }
            // fall through
          case 188: break;
          case 79:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.thisSoli, yytext());
            }
            // fall through
          case 189: break;
          case 80:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.trueSoli, yytext());
            }
            // fall through
          case 190: break;
          case 81:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.uint, yytext());
            }
            // fall through
          case 191: break;
          case 82:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.breakSoli, yytext());
            }
            // fall through
          case 192: break;
          case 83:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.falseSoli, yytext());
            }
            // fall through
          case 193: break;
          case 84:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.int_DS, yytext());
            }
            // fall through
          case 194: break;
          case 85:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.int_TD , yytext());
            }
            // fall through
          case 195: break;
          case 86:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.int_SC, yytext());
            }
            // fall through
          case 196: break;
          case 87:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.uint_O, yytext());
            }
            // fall through
          case 197: break;
          case 88:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.whileSoli, yytext());
            }
            // fall through
          case 198: break;
          case 89:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.int_CVO, yytext());
            }
            // fall through
          case 199: break;
          case 90:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.int_DCS, yytext());
            }
            // fall through
          case 200: break;
          case 91:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.pragma, yytext());
            }
            // fall through
          case 201: break;
          case 92:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.publicSoli, yytext());
            }
            // fall through
          case 202: break;
          case 93:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.returnSoli, yytext());
            }
            // fall through
          case 203: break;
          case 94:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.string, yytext());
            }
            // fall through
          case 204: break;
          case 95:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.structSoli, yytext());
            }
            // fall through
          case 205: break;
          case 96:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.uint_DS, yytext());
            }
            // fall through
          case 206: break;
          case 97:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.uint_TD , yytext());
            }
            // fall through
          case 207: break;
          case 98:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.uint_SC, yytext());
            }
            // fall through
          case 208: break;
          case 99:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.address, yytext());
            }
            // fall through
          case 209: break;
          case 100:
            { return symbol(Symb.epsilon, yytext());
            }
            // fall through
          case 210: break;
          case 101:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.payableSoli, yytext());
            }
            // fall through
          case 211: break;
          case 102:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.privateSoli, yytext());
            }
            // fall through
          case 212: break;
          case 103:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.returns, yytext());
            }
            // fall through
          case 213: break;
          case 104:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.uint_CVO, yytext());
            }
            // fall through
          case 214: break;
          case 105:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.uint_DCS, yytext());
            }
            // fall through
          case 215: break;
          case 106:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.continueSoli, yytext());
            }
            // fall through
          case 216: break;
          case 107:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.contract, yytext());
            }
            // fall through
          case 217: break;
          case 108:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.functionSoli, yytext());
            }
            // fall through
          case 218: break;
          case 109:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.internalSoli, yytext());
            }
            // fall through
          case 219: break;
          case 110:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada")); return symbol(Symb.solidity, yytext());
            }
            // fall through
          case 220: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
