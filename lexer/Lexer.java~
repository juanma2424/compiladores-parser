// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.jflex

/* JFlex example: partial Java language lexer specification */
import java.util.ArrayList;
/**
    * This class is a simple example lexer.
    */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int hexaState = 4;
  public static final int hexaStateC = 6;
  public static final int hexaStateError = 8;
  public static final int hexaStateCError = 10;
  public static final int numberState = 12;
  public static final int NaturalNumbers = 14;
  public static final int Chars = 16;
  public static final int Identificadorcillo = 18;
  public static final int stateNosibol = 20;
  public static final int filtro = 22;
  public static final int otraMas = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\2\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\30"+
    "\1\6\1\32\1\33\1\34\1\35\1\6\1\0\4\36"+
    "\1\37\1\36\24\40\1\11\1\0\1\41\1\6\2\0"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\40\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\40\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\11\1\72\1\41\1\73\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\1\1\2\2\1\3\1\4\2\3\1\5\6\3"+
    "\2\6\2\3\22\7\1\3\1\10\2\11\1\12\1\13"+
    "\15\10\1\14\2\15\1\16\1\17\1\10\1\20\1\10"+
    "\5\21\11\14\12\22\1\23\2\24\1\25\15\23\2\26"+
    "\3\27\1\30\1\27\1\23\1\31\2\27\3\32\1\33"+
    "\12\32\1\27\1\34\2\35\4\36\1\37\2\36\15\34"+
    "\1\36\2\40\1\41\1\42\2\43\1\44\2\45\1\46"+
    "\16\44\1\47\1\50\6\51\15\50\1\51\1\52\1\53"+
    "\1\54\1\55\16\56\1\0\1\57\10\0\2\60\1\0"+
    "\1\2\1\0\1\60\1\0\1\61\47\0\2\10\1\61"+
    "\26\10\2\0\2\56\1\61\26\56\1\60\20\0\1\61"+
    "\2\0\1\61\23\0\1\62\1\0\6\10\1\61\16\10"+
    "\1\0\6\56\1\61\16\56\1\0\1\2\3\0\1\61"+
    "\1\63\6\0\1\64\1\65\17\0\1\63\6\0\1\61"+
    "\25\10\1\61\1\0\25\56\1\61\2\0\1\61\25\0"+
    "\17\10\17\56\1\0\2\61\6\0\1\61\2\0\4\10"+
    "\1\61\1\10\4\56\1\61\1\56\5\0\4\10\4\56"+
    "\2\0\1\10\1\56\2\0\1\10\1\56\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[609];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u030c\0\u0348"+
    "\0\u0384\0\u030c\0\u030c\0\u03c0\0\u030c\0\u03fc\0\u0438\0\u0474"+
    "\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654"+
    "\0\u0690\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834"+
    "\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14"+
    "\0\u0a50\0\u0a8c\0\u0ac8\0\u030c\0\u0b04\0\u030c\0\u030c\0\u0b40"+
    "\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20"+
    "\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u030c\0\u030c\0\u0e4c\0\u030c"+
    "\0\u030c\0\u0e88\0\u030c\0\u0ec4\0\u030c\0\u0f00\0\u0f3c\0\u0f78"+
    "\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158"+
    "\0\u1194\0\u11d0\0\u030c\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0"+
    "\0\u111c\0\u1158\0\u1194\0\u11d0\0\u030c\0\u030c\0\u120c\0\u030c"+
    "\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4"+
    "\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u030c\0\u1248\0\u1284"+
    "\0\u030c\0\u12c0\0\u030c\0\u12fc\0\u1338\0\u030c\0\u1374\0\u13b0"+
    "\0\u030c\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068"+
    "\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u13ec\0\u030c"+
    "\0\u030c\0\u1428\0\u1464\0\u030c\0\u14a0\0\u14dc\0\u1464\0\u1518"+
    "\0\u1554\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068"+
    "\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u1590\0\u030c"+
    "\0\u15cc\0\u030c\0\u030c\0\u030c\0\u1608\0\u030c\0\u030c\0\u1644"+
    "\0\u030c\0\u1680\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c"+
    "\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u030c"+
    "\0\u030c\0\u16bc\0\u030c\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u0f00"+
    "\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0"+
    "\0\u111c\0\u1158\0\u1194\0\u11d0\0\u17e8\0\u030c\0\u030c\0\u030c"+
    "\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8"+
    "\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u03fc"+
    "\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u04ec\0\u0564\0\u1cd4"+
    "\0\u1d10\0\u1d4c\0\u1c5c\0\u1d88\0\u1dc4\0\u1e00\0\u0564\0\u1e3c"+
    "\0\u030c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0"+
    "\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0"+
    "\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u23a0"+
    "\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580"+
    "\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760"+
    "\0\u279c\0\u27d8\0\u0ac8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904"+
    "\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4"+
    "\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4"+
    "\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0\0\u1860\0\u2e2c\0\u2e68"+
    "\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048"+
    "\0\u3084\0\u30c0\0\u30fc\0\u3138\0\u3174\0\u31b0\0\u31ec\0\u3228"+
    "\0\u3264\0\u32a0\0\u32dc\0\u3318\0\u3354\0\u3390\0\u33cc\0\u3408"+
    "\0\u3444\0\u3480\0\u34bc\0\u34f8\0\u3534\0\u3570\0\u35ac\0\u35e8"+
    "\0\u3624\0\u3660\0\u369c\0\u36d8\0\u3714\0\u3750\0\u378c\0\u37c8"+
    "\0\u3804\0\u3840\0\u387c\0\u38b8\0\u38f4\0\u3930\0\u396c\0\u39a8"+
    "\0\u39e4\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10\0\u3b4c\0\u3b88"+
    "\0\u3bc4\0\u3c00\0\u3c3c\0\u3c78\0\u030c\0\u3cb4\0\u3cf0\0\u3d2c"+
    "\0\u3d68\0\u3da4\0\u3de0\0\u3e1c\0\u3e58\0\u3e94\0\u3ed0\0\u3f0c"+
    "\0\u3f48\0\u3f84\0\u3fc0\0\u3ffc\0\u4038\0\u4074\0\u40b0\0\u40ec"+
    "\0\u4128\0\u4164\0\u41a0\0\u41dc\0\u4218\0\u4254\0\u4290\0\u42cc"+
    "\0\u4308\0\u4344\0\u4380\0\u43bc\0\u43f8\0\u4434\0\u4470\0\u44ac"+
    "\0\u44e8\0\u4524\0\u4560\0\u459c\0\u45d8\0\u4614\0\u4650\0\u468c"+
    "\0\u46c8\0\u4704\0\u3390\0\u4740\0\u477c\0\u47b8\0\u47f4\0\u4830"+
    "\0\u486c\0\u48a8\0\u48e4\0\u4920\0\u495c\0\u4998\0\u030c\0\u030c"+
    "\0\u49d4\0\u4a10\0\u4a4c\0\u4a88\0\u4ac4\0\u4b00\0\u4b3c\0\u4b78"+
    "\0\u4bb4\0\u4bf0\0\u4c2c\0\u4c68\0\u4ca4\0\u4ce0\0\u4d1c\0\u030c"+
    "\0\u4d58\0\u4d94\0\u4dd0\0\u4e0c\0\u4e48\0\u4e84\0\u4ec0\0\u4efc"+
    "\0\u4f38\0\u4f74\0\u4fb0\0\u4fec\0\u5028\0\u5064\0\u50a0\0\u50dc"+
    "\0\u5118\0\u5154\0\u5190\0\u51cc\0\u5208\0\u5244\0\u5280\0\u52bc"+
    "\0\u52f8\0\u5334\0\u5370\0\u53ac\0\u53e8\0\u5424\0\u5460\0\u549c"+
    "\0\u54d8\0\u5514\0\u5550\0\u558c\0\u55c8\0\u5604\0\u5640\0\u567c"+
    "\0\u56b8\0\u56f4\0\u5730\0\u576c\0\u57a8\0\u57e4\0\u5820\0\u585c"+
    "\0\u5898\0\u58d4\0\u5910\0\u594c\0\u5988\0\u59c4\0\u5a00\0\u5a3c"+
    "\0\u5a78\0\u5ab4\0\u5af0\0\u5b2c\0\u5b68\0\u5ba4\0\u5be0\0\u5c1c"+
    "\0\u5c58\0\u5c94\0\u5cd0\0\u5d0c\0\u5d48\0\u5d84\0\u5dc0\0\u5dfc"+
    "\0\u5e38\0\u5e74\0\u5eb0\0\u5eec\0\u5f28\0\u5f64\0\u5fa0\0\u5fdc"+
    "\0\u6018\0\u6054\0\u6090\0\u60cc\0\u6108\0\u6144\0\u6180\0\u61bc"+
    "\0\u61f8\0\u6234\0\u6270\0\u62ac\0\u62e8\0\u6324\0\u6360\0\u639c"+
    "\0\u63d8\0\u6414\0\u6450\0\u648c\0\u64c8\0\u6504\0\u6540\0\u657c"+
    "\0\u65b8\0\u65f4\0\u6630\0\u666c\0\u66a8\0\u66e4\0\u6720\0\u675c"+
    "\0\u6798\0\u67d4\0\u6810\0\u3b4c\0\u684c\0\u6888\0\u68c4\0\u6900"+
    "\0\u693c\0\u6978\0\u40b0\0\u69b4\0\u69f0\0\u6a2c\0\u6a68\0\u6aa4"+
    "\0\u45d8\0\u6ae0\0\u6b1c\0\u6b58\0\u6b94\0\u6bd0\0\u6c0c\0\u6c48"+
    "\0\u6c84\0\u6cc0\0\u6cfc\0\u6d38\0\u6d74\0\u6db0\0\u6dec\0\u6e28"+
    "\0\u6e64\0\u6ea0\0\u6edc\0\u6f18\0\u6f54\0\u6f90\0\u6fcc\0\u7008"+
    "\0\u7044";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[609];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\2\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\23\1\26\1\27\1\30\1\23\1\31\1\32\1\33"+
    "\1\34\10\35\1\23\1\36\1\21\1\37\3\40\1\26"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\40\1\47"+
    "\1\50\2\40\1\51\2\40\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\40\1\61\1\40\1\62\1\26"+
    "\2\63\1\64\1\65\1\63\1\66\2\63\1\67\33\63"+
    "\1\70\1\71\1\72\1\73\2\63\1\74\2\63\1\75"+
    "\2\63\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\5\63\1\105\2\106\1\107\1\105\1\110\2\105\1\111"+
    "\10\105\11\112\1\113\3\105\2\114\2\105\2\115\1\116"+
    "\1\117\1\120\1\121\2\105\1\122\2\105\1\123\2\105"+
    "\1\124\1\125\1\126\1\127\1\130\1\131\1\132\5\105"+
    "\1\133\2\106\1\107\1\133\1\111\2\133\1\110\10\133"+
    "\11\112\1\113\3\133\2\114\2\133\2\115\1\116\1\117"+
    "\1\120\1\121\2\133\1\134\2\133\1\135\2\133\1\136"+
    "\1\137\1\140\1\141\1\142\1\143\1\144\5\133\1\145"+
    "\2\146\1\147\1\145\1\150\24\145\1\150\11\145\1\151"+
    "\1\152\1\153\1\154\2\145\1\155\2\145\1\156\2\145"+
    "\1\157\1\160\1\161\1\162\1\163\1\164\1\165\6\145"+
    "\2\146\1\147\4\145\1\150\21\145\1\150\11\145\1\151"+
    "\1\152\1\153\1\154\2\145\1\155\2\145\1\156\2\145"+
    "\1\157\1\160\1\161\1\162\1\163\1\164\1\165\5\145"+
    "\1\115\2\166\1\167\1\170\1\115\1\171\1\172\1\115"+
    "\1\171\1\173\1\174\1\170\1\166\1\170\1\145\1\170"+
    "\11\175\1\176\1\177\1\170\1\200\1\201\1\115\1\201"+
    "\1\171\2\201\1\202\1\203\1\204\1\205\2\201\1\206"+
    "\2\201\1\207\2\201\1\210\1\211\1\212\1\213\1\214"+
    "\1\215\1\216\3\201\1\217\1\171\1\220\2\221\1\222"+
    "\1\223\1\220\1\224\1\225\1\220\2\224\1\226\1\223"+
    "\1\224\1\227\1\220\1\223\11\175\1\224\1\230\1\223"+
    "\1\231\3\220\1\224\2\220\1\232\1\233\1\234\1\235"+
    "\2\220\1\236\2\220\1\237\2\220\1\240\1\241\1\242"+
    "\1\243\1\244\1\245\1\246\3\220\1\247\1\224\2\63"+
    "\1\250\1\251\1\63\1\252\2\63\1\253\33\63\1\70"+
    "\1\71\1\72\1\73\2\63\1\74\2\63\1\75\2\63"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\5\63"+
    "\1\145\2\254\1\255\5\145\2\254\17\145\1\254\6\145"+
    "\1\254\2\145\1\151\1\152\1\153\1\154\2\145\1\155"+
    "\2\145\1\156\2\145\1\157\1\160\1\161\1\162\1\163"+
    "\1\164\1\165\5\145\1\256\2\257\1\260\5\256\2\261"+
    "\5\256\1\262\11\256\1\261\6\256\1\261\2\256\1\263"+
    "\1\264\1\265\1\266\2\256\1\267\2\256\1\270\2\256"+
    "\1\271\1\272\1\273\1\274\1\275\1\276\1\277\5\256"+
    "\1\300\3\301\1\302\1\300\1\303\1\304\1\300\2\303"+
    "\1\305\1\302\1\303\1\302\1\303\1\302\11\301\1\303"+
    "\1\306\1\302\1\307\3\301\1\303\2\301\1\310\1\311"+
    "\1\312\1\313\2\301\1\314\2\301\1\315\2\301\1\316"+
    "\1\317\1\320\1\321\1\322\1\323\1\324\3\301\1\325"+
    "\1\326\4\115\1\327\1\115\2\327\1\115\5\327\1\330"+
    "\1\115\1\327\11\331\4\327\3\332\1\327\2\332\1\333"+
    "\1\334\1\335\1\336\2\332\1\337\2\332\1\340\2\332"+
    "\1\341\1\342\1\343\1\344\1\345\1\346\1\347\3\332"+
    "\2\327\76\0\1\17\125\0\1\23\46\0\1\23\76\0"+
    "\1\350\23\0\3\351\1\350\30\351\1\0\1\350\13\0"+
    "\1\23\20\0\1\23\53\0\1\352\1\0\1\353\2\0"+
    "\1\354\12\0\1\23\55\0\1\355\1\356\1\0\1\357"+
    "\10\360\2\0\1\23\55\0\1\361\1\362\1\0\11\363"+
    "\55\0\1\364\4\0\1\365\13\0\1\23\56\0\1\366"+
    "\1\0\11\367\61\0\1\366\1\0\11\35\75\0\2\23"+
    "\73\0\2\23\57\0\11\40\63\0\11\40\13\0\1\370"+
    "\14\0\1\371\32\0\11\40\10\0\1\372\14\0\1\373"+
    "\1\0\1\374\6\0\1\375\24\0\11\40\10\0\1\376"+
    "\14\0\1\377\35\0\11\40\10\0\1\u0100\3\0\1\u0101"+
    "\10\0\1\371\35\0\11\40\22\0\1\u0102\1\0\1\u0103"+
    "\4\0\1\u0104\31\0\11\40\10\0\1\u0105\7\0\1\u0106"+
    "\4\0\1\u0107\1\0\1\u0108\2\0\1\u0109\30\0\11\40"+
    "\14\0\1\u010a\10\0\1\u010b\35\0\11\40\15\0\1\371"+
    "\5\0\1\u010c\1\u010d\36\0\11\40\10\0\1\u010e\7\0"+
    "\1\u010f\4\0\1\u0110\35\0\11\40\10\0\1\u0111\16\0"+
    "\1\u0112\2\0\1\u0113\30\0\11\40\14\0\1\u0114\46\0"+
    "\11\40\14\0\1\u0115\10\0\1\u0116\3\0\1\u0117\5\0"+
    "\1\u0118\23\0\11\40\17\0\1\u0119\7\0\1\u011a\33\0"+
    "\11\40\15\0\1\u011b\2\0\1\u011c\42\0\11\40\10\0"+
    "\1\u0107\7\0\1\u011d\42\0\11\40\14\0\1\u011e\2\0"+
    "\1\u011f\43\0\11\40\14\0\1\u0120\117\0\1\23\1\0"+
    "\2\63\2\0\1\63\1\0\2\63\1\0\63\63\2\0"+
    "\1\64\71\0\2\63\2\0\1\63\1\0\2\63\1\0"+
    "\46\63\1\u0121\16\63\2\0\1\63\1\0\2\63\1\0"+
    "\35\63\1\u0122\10\63\1\u0123\16\63\2\0\1\63\1\0"+
    "\2\63\1\0\43\63\1\u0124\1\63\1\u0125\17\63\2\0"+
    "\1\63\1\0\2\63\1\0\31\63\1\u0126\14\63\1\u0127"+
    "\1\63\1\u0128\2\63\1\u0129\11\63\2\0\1\63\1\0"+
    "\2\63\1\0\36\63\1\u0123\5\63\1\u012a\1\u012b\17\63"+
    "\2\0\1\63\1\0\2\63\1\0\31\63\1\u012c\14\63"+
    "\1\u012d\16\63\2\0\1\63\1\0\2\63\1\0\31\63"+
    "\1\u012e\16\63\1\u012f\2\63\1\u0130\11\63\2\0\1\63"+
    "\1\0\2\63\1\0\35\63\1\u0131\27\63\2\0\1\63"+
    "\1\0\2\63\1\0\46\63\1\u0132\3\63\1\u0133\12\63"+
    "\2\0\1\63\1\0\2\63\1\0\40\63\1\u0134\7\63"+
    "\1\u0135\14\63\2\0\1\63\1\0\2\63\1\0\36\63"+
    "\1\u0136\2\63\1\u0137\23\63\2\0\1\63\1\0\2\63"+
    "\1\0\31\63\1\u0127\7\63\1\u0138\23\63\2\0\1\63"+
    "\1\0\2\63\1\0\40\63\1\u0139\22\63\2\0\1\106"+
    "\112\0\11\112\100\0\2\114\113\0\1\377\62\0\1\u013a"+
    "\10\0\1\371\70\0\1\u0102\1\0\1\u0103\57\0\1\u0105"+
    "\14\0\1\u0107\1\0\1\u0108\2\0\1\u0109\56\0\1\371"+
    "\5\0\1\u010c\1\u010d\57\0\1\u010e\14\0\1\u0110\56\0"+
    "\1\u0111\16\0\1\u0112\2\0\1\u0113\55\0\1\u0114\104\0"+
    "\1\u0116\3\0\1\u0117\61\0\1\u0119\7\0\1\u013b\61\0"+
    "\1\u011b\2\0\1\u011c\63\0\1\u0107\7\0\1\u011d\72\0"+
    "\1\u011f\24\0\1\146\73\0\1\166\125\0\1\171\46\0"+
    "\1\171\77\0\1\171\20\0\1\171\60\0\11\175\75\0"+
    "\2\171\73\0\2\171\130\0\1\171\3\0\1\221\125\0"+
    "\1\224\46\0\1\224\77\0\1\224\20\0\1\224\72\0"+
    "\2\224\73\0\2\224\130\0\1\224\3\0\1\250\73\0"+
    "\1\254\73\0\1\257\111\0\1\261\107\0\1\303\46\0"+
    "\1\303\77\0\1\303\20\0\1\303\72\0\2\303\73\0"+
    "\2\303\130\0\1\303\22\0\11\331\63\0\11\332\4\0"+
    "\3\332\1\0\30\332\23\0\11\332\4\0\3\332\1\0"+
    "\15\332\1\u013c\12\332\23\0\11\332\4\0\3\332\1\0"+
    "\4\332\1\u013d\10\332\1\u013e\12\332\23\0\11\332\4\0"+
    "\3\332\1\0\12\332\1\u013f\1\332\1\u0140\13\332\23\0"+
    "\11\332\4\0\3\332\1\0\1\u0141\14\332\1\u0142\1\332"+
    "\1\u0143\2\332\1\u0144\5\332\23\0\11\332\4\0\3\332"+
    "\1\0\5\332\1\u013e\5\332\1\u0145\1\u0146\13\332\23\0"+
    "\11\332\4\0\3\332\1\0\1\u0147\14\332\1\u0148\12\332"+
    "\23\0\11\332\4\0\3\332\1\0\1\u0149\16\332\1\u014a"+
    "\2\332\1\u014b\5\332\23\0\11\332\4\0\3\332\1\0"+
    "\4\332\1\u014c\23\332\23\0\11\332\4\0\3\332\1\0"+
    "\15\332\1\u014d\3\332\1\u014e\6\332\23\0\11\332\4\0"+
    "\3\332\1\0\7\332\1\u014f\7\332\1\u0150\10\332\23\0"+
    "\11\332\4\0\3\332\1\0\5\332\1\u0151\2\332\1\u0152"+
    "\17\332\23\0\11\332\4\0\3\332\1\0\1\u0142\7\332"+
    "\1\u0153\17\332\23\0\11\332\4\0\3\332\1\0\7\332"+
    "\1\u0154\20\332\23\0\11\351\4\0\3\351\1\0\30\351"+
    "\16\0\1\352\1\0\1\353\2\0\1\354\70\0\1\353"+
    "\2\0\1\354\73\0\11\363\60\0\1\355\1\356\1\0"+
    "\1\357\10\360\61\0\1\366\1\0\11\360\60\0\1\361"+
    "\2\0\11\363\60\0\1\u0155\1\362\1\0\11\363\42\0"+
    "\13\u0156\1\u0157\60\u0156\2\365\1\17\1\20\70\365\17\0"+
    "\1\362\121\0\1\u0158\102\0\1\u0159\76\0\1\u015a\62\0"+
    "\1\u015b\110\0\1\u015c\64\0\1\u015d\75\0\1\u015e\105\0"+
    "\1\u015f\57\0\1\u0160\101\0\1\u0161\75\0\1\u0162\60\0"+
    "\1\u0163\76\0\1\u0102\75\0\1\u0164\76\0\1\371\71\0"+
    "\1\u0162\72\0\1\u0165\104\0\1\u0166\70\0\1\u0167\67\0"+
    "\1\u0168\76\0\1\u0169\70\0\1\u016a\71\0\1\u016b\62\0"+
    "\1\u016c\116\0\1\u016d\45\0\1\u016e\7\0\1\u016f\64\0"+
    "\1\u0170\113\0\1\u0171\54\0\1\u0172\11\0\1\u0173\71\0"+
    "\1\u0174\100\0\1\u0175\54\0\1\u0176\103\0\1\u0177\63\0"+
    "\1\u0178\21\0\1\u0161\61\0\1\u0179\77\0\1\u017a\63\0"+
    "\1\u017b\73\0\1\u017c\3\0\1\u017d\73\0\1\u017e\63\0"+
    "\1\u0167\31\0\2\63\2\0\1\63\1\0\2\63\1\0"+
    "\45\63\1\u017f\17\63\2\0\1\63\1\0\2\63\1\0"+
    "\43\63\1\u0180\21\63\2\0\1\63\1\0\2\63\1\0"+
    "\51\63\1\u0181\13\63\2\0\1\63\1\0\2\63\1\0"+
    "\53\63\1\u0182\11\63\2\0\1\63\1\0\2\63\1\0"+
    "\43\63\1\u0124\21\63\2\0\1\63\1\0\2\63\1\0"+
    "\50\63\1\u0123\14\63\2\0\1\63\1\0\2\63\1\0"+
    "\46\63\1\u0182\16\63\2\0\1\63\1\0\2\63\1\0"+
    "\45\63\1\u0183\17\63\2\0\1\63\1\0\2\63\1\0"+
    "\47\63\1\u0184\15\63\2\0\1\63\1\0\2\63\1\0"+
    "\52\63\1\u0185\12\63\2\0\1\63\1\0\2\63\1\0"+
    "\47\63\1\u0186\15\63\2\0\1\63\1\0\2\63\1\0"+
    "\34\63\1\u0187\30\63\2\0\1\63\1\0\2\63\1\0"+
    "\57\63\1\u0188\5\63\2\0\1\63\1\0\2\63\1\0"+
    "\31\63\1\u0189\7\63\1\u018a\23\63\2\0\1\63\1\0"+
    "\2\63\1\0\32\63\1\u018b\32\63\2\0\1\63\1\0"+
    "\2\63\1\0\52\63\1\u018c\12\63\2\0\1\63\1\0"+
    "\2\63\1\0\43\63\1\u018d\21\63\2\0\1\63\1\0"+
    "\2\63\1\0\50\63\1\u018e\14\63\2\0\1\63\1\0"+
    "\2\63\1\0\41\63\1\u018f\23\63\2\0\1\63\1\0"+
    "\2\63\1\0\53\63\1\u0181\11\63\2\0\1\63\1\0"+
    "\2\63\1\0\41\63\1\u0190\23\63\2\0\1\63\1\0"+
    "\2\63\1\0\45\63\1\u0191\17\63\2\0\1\63\1\0"+
    "\2\63\1\0\35\63\1\u0192\27\63\2\0\1\63\1\0"+
    "\2\63\1\0\41\63\1\u0193\21\63\54\0\1\u0194\103\0"+
    "\1\u0161\30\0\11\332\4\0\3\332\1\0\14\332\1\u0195"+
    "\13\332\23\0\11\332\4\0\3\332\1\0\12\332\1\u0196"+
    "\15\332\23\0\11\332\4\0\3\332\1\0\20\332\1\u0197"+
    "\7\332\23\0\11\332\4\0\3\332\1\0\22\332\1\u0198"+
    "\5\332\23\0\11\332\4\0\3\332\1\0\12\332\1\u013f"+
    "\15\332\23\0\11\332\4\0\3\332\1\0\17\332\1\u013e"+
    "\10\332\23\0\11\332\4\0\3\332\1\0\15\332\1\u0198"+
    "\12\332\23\0\11\332\4\0\3\332\1\0\14\332\1\u0199"+
    "\13\332\23\0\11\332\4\0\3\332\1\0\16\332\1\u019a"+
    "\11\332\23\0\11\332\4\0\3\332\1\0\21\332\1\u019b"+
    "\6\332\23\0\11\332\4\0\3\332\1\0\16\332\1\u019c"+
    "\11\332\23\0\11\332\4\0\3\332\1\0\3\332\1\u019d"+
    "\24\332\23\0\11\332\4\0\3\332\1\0\26\332\1\u019e"+
    "\1\332\23\0\11\332\4\0\3\332\1\0\1\u019f\7\332"+
    "\1\u01a0\17\332\23\0\11\332\4\0\3\332\1\0\1\332"+
    "\1\u01a1\26\332\23\0\11\332\4\0\3\332\1\0\21\332"+
    "\1\u01a2\6\332\23\0\11\332\4\0\3\332\1\0\12\332"+
    "\1\u01a3\15\332\23\0\11\332\4\0\3\332\1\0\17\332"+
    "\1\u01a4\10\332\23\0\11\332\4\0\3\332\1\0\10\332"+
    "\1\u01a5\17\332\23\0\11\332\4\0\3\332\1\0\22\332"+
    "\1\u0197\5\332\23\0\11\332\4\0\3\332\1\0\10\332"+
    "\1\u01a6\17\332\23\0\11\332\4\0\3\332\1\0\14\332"+
    "\1\u01a7\13\332\23\0\11\332\4\0\3\332\1\0\4\332"+
    "\1\u01a8\23\332\23\0\11\332\4\0\3\332\1\0\10\332"+
    "\1\u01a9\17\332\20\0\1\u0155\2\0\11\363\42\0\13\u0156"+
    "\1\u01aa\73\u0156\1\u01aa\4\u0156\1\u01ab\53\u0156\61\0\1\u01ac"+
    "\54\0\1\u01ad\105\0\1\371\61\0\1\u01ae\77\0\1\u01af"+
    "\101\0\1\u01b0\101\0\1\u01b1\1\u01b2\72\0\1\u017d\57\0"+
    "\1\u01b3\73\0\1\371\102\0\1\371\64\0\1\u01b4\103\0"+
    "\1\u01b5\61\0\1\u01b6\34\0\1\u01b7\2\0\1\u01b8\144\0"+
    "\1\u015f\71\0\1\u01b9\36\0\1\u01ba\1\u01bb\1\u01bc\2\0"+
    "\1\u01bd\1\0\1\371\14\0\1\u01be\105\0\1\u01bf\77\0"+
    "\1\u01c0\61\0\1\u01c1\63\0\1\u01c2\101\0\1\u01c3\110\0"+
    "\1\u01c4\62\0\1\u01c5\103\0\1\u01c6\66\0\1\u01c7\61\0"+
    "\1\u01c8\100\0\1\u01c9\73\0\1\u01ca\11\0\1\u01cb\52\0"+
    "\1\u01cc\112\0\1\371\67\0\1\u01cd\104\0\1\u01ce\67\0"+
    "\1\u01cf\76\0\1\371\60\0\1\u015f\74\0\1\u0161\17\0"+
    "\2\63\2\0\1\63\1\0\2\63\1\0\51\63\1\u01d0"+
    "\1\u01d1\12\63\2\0\1\63\1\0\2\63\1\0\35\63"+
    "\1\u01d2\27\63\2\0\1\63\1\0\2\63\1\0\35\63"+
    "\1\u0123\27\63\2\0\1\63\1\0\2\63\1\0\44\63"+
    "\1\u0123\20\63\2\0\1\63\1\0\2\63\1\0\33\63"+
    "\1\u01d3\31\63\2\0\1\63\1\0\2\63\1\0\46\63"+
    "\1\u01d4\16\63\2\0\1\63\1\0\2\63\1\0\11\63"+
    "\1\u01d5\1\u01d6\1\u01d7\2\63\1\u01d8\1\63\1\u0123\14\63"+
    "\1\u01d9\27\63\2\0\1\63\1\0\2\63\1\0\47\63"+
    "\1\u01da\15\63\2\0\1\63\1\0\2\63\1\0\41\63"+
    "\1\u01db\23\63\2\0\1\63\1\0\2\63\1\0\31\63"+
    "\1\u01dc\33\63\2\0\1\63\1\0\2\63\1\0\37\63"+
    "\1\u01dd\25\63\2\0\1\63\1\0\2\63\1\0\54\63"+
    "\1\u01de\10\63\2\0\1\63\1\0\2\63\1\0\43\63"+
    "\1\u01df\21\63\2\0\1\63\1\0\2\63\1\0\53\63"+
    "\1\u01e0\11\63\2\0\1\63\1\0\2\63\1\0\41\63"+
    "\1\u01e1\23\63\2\0\1\63\1\0\2\63\1\0\41\63"+
    "\1\u01e2\11\63\1\u01e3\11\63\2\0\1\63\1\0\2\63"+
    "\1\0\51\63\1\u0123\13\63\2\0\1\63\1\0\2\63"+
    "\1\0\56\63\1\u01e4\6\63\2\0\1\63\1\0\2\63"+
    "\1\0\52\63\1\u01e5\12\63\2\0\1\63\1\0\2\63"+
    "\1\0\55\63\1\u0123\7\63\2\0\1\63\1\0\2\63"+
    "\1\0\43\63\1\u0181\17\63\46\0\1\u01e6\46\0\11\332"+
    "\4\0\3\332\1\0\20\332\1\u01e7\1\u01e8\6\332\23\0"+
    "\11\332\4\0\3\332\1\0\4\332\1\u01e9\23\332\23\0"+
    "\11\332\4\0\3\332\1\0\4\332\1\u013e\23\332\23\0"+
    "\11\332\4\0\3\332\1\0\13\332\1\u013e\14\332\23\0"+
    "\11\332\4\0\3\332\1\0\2\332\1\u01ea\25\332\23\0"+
    "\11\332\4\0\3\332\1\0\15\332\1\u01eb\12\332\23\0"+
    "\1\332\1\u01ec\1\u01ed\1\u01ee\2\332\1\u01ef\1\332\1\u013e"+
    "\4\0\3\332\1\0\4\332\1\u01f0\23\332\23\0\11\332"+
    "\4\0\3\332\1\0\16\332\1\u01f1\11\332\23\0\11\332"+
    "\4\0\3\332\1\0\10\332\1\u01f2\17\332\23\0\11\332"+
    "\4\0\3\332\1\0\1\u01f3\27\332\23\0\11\332\4\0"+
    "\3\332\1\0\6\332\1\u01f4\21\332\23\0\11\332\4\0"+
    "\3\332\1\0\23\332\1\u01f5\4\332\23\0\11\332\4\0"+
    "\3\332\1\0\12\332\1\u01f6\15\332\23\0\11\332\4\0"+
    "\3\332\1\0\22\332\1\u01f7\5\332\23\0\11\332\4\0"+
    "\3\332\1\0\10\332\1\u01f8\17\332\23\0\11\332\4\0"+
    "\3\332\1\0\10\332\1\u01f9\11\332\1\u01fa\5\332\23\0"+
    "\11\332\4\0\3\332\1\0\20\332\1\u013e\7\332\23\0"+
    "\11\332\4\0\3\332\1\0\25\332\1\u01fb\2\332\23\0"+
    "\11\332\4\0\3\332\1\0\21\332\1\u01fc\6\332\23\0"+
    "\11\332\4\0\3\332\1\0\24\332\1\u013e\3\332\23\0"+
    "\11\332\4\0\3\332\1\0\12\332\1\u0197\15\332\2\0"+
    "\13\u0156\1\u01aa\4\u0156\1\17\53\u0156\46\0\1\u01fd\103\0"+
    "\1\u01fe\70\0\1\371\102\0\1\u01ff\55\0\1\u0200\112\0"+
    "\1\u0201\62\0\1\u0202\6\0\1\u0203\62\0\1\u0204\12\0"+
    "\1\u0161\71\0\1\u017d\60\0\1\u0205\110\0\1\u0206\71\0"+
    "\1\u0207\35\0\1\u0208\3\0\1\371\72\0\1\u0209\70\0"+
    "\1\371\75\0\1\371\127\0\1\u020a\64\0\1\u01ca\104\0"+
    "\1\u020b\57\0\1\u020c\67\0\1\u017e\105\0\1\u020d\60\0"+
    "\1\u01e6\103\0\1\u020e\102\0\1\u020f\70\0\1\u0210\62\0"+
    "\1\u0211\104\0\1\u0212\61\0\1\u0207\106\0\1\u017d\76\0"+
    "\1\u0213\57\0\1\u0214\47\0\1\u01ba\1\u01bb\1\u01bc\2\0"+
    "\1\u01bd\1\0\1\371\42\0\2\63\2\0\1\63\1\0"+
    "\2\63\1\0\52\63\1\u0215\12\63\2\0\1\63\1\0"+
    "\2\63\1\0\41\63\1\u0216\6\63\1\u0217\14\63\2\0"+
    "\1\63\1\0\2\63\1\0\52\63\1\u0181\12\63\2\0"+
    "\1\63\1\0\2\63\1\0\52\63\1\u0218\12\63\2\0"+
    "\1\63\1\0\2\63\1\0\50\63\1\u0219\14\63\2\0"+
    "\1\63\1\0\2\63\1\0\12\63\1\u021a\3\63\1\u0123"+
    "\46\63\2\0\1\63\1\0\2\63\1\0\15\63\1\u021b"+
    "\47\63\2\0\1\63\1\0\2\63\1\0\12\63\1\u0123"+
    "\52\63\2\0\1\63\1\0\2\63\1\0\14\63\1\u0123"+
    "\50\63\2\0\1\63\1\0\2\63\1\0\50\63\1\u021c"+
    "\14\63\2\0\1\63\1\0\2\63\1\0\41\63\1\u01e2"+
    "\23\63\2\0\1\63\1\0\2\63\1\0\36\63\1\u021d"+
    "\26\63\2\0\1\63\1\0\2\63\1\0\32\63\1\u0193"+
    "\32\63\2\0\1\63\1\0\2\63\1\0\44\63\1\u021e"+
    "\20\63\2\0\1\63\1\0\2\63\1\0\31\63\1\u01d2"+
    "\33\63\2\0\1\63\1\0\2\63\1\0\41\63\1\u021f"+
    "\23\63\2\0\1\63\1\0\2\63\1\0\50\63\1\u0220"+
    "\14\63\2\0\1\63\1\0\2\63\1\0\34\63\1\u0221"+
    "\30\63\2\0\1\63\1\0\2\63\1\0\45\63\1\u0222"+
    "\17\63\2\0\1\63\1\0\2\63\1\0\33\63\1\u0219"+
    "\31\63\2\0\1\63\1\0\2\63\1\0\35\63\1\u0223"+
    "\27\63\2\0\1\63\1\0\2\63\1\0\11\63\1\u01d5"+
    "\1\u01d6\1\u01d7\2\63\1\u01d8\1\63\1\u0123\42\63\63\0"+
    "\1\u0161\31\0\11\332\4\0\3\332\1\0\21\332\1\u0224"+
    "\6\332\23\0\11\332\4\0\3\332\1\0\10\332\1\u0225"+
    "\6\332\1\u0226\10\332\23\0\11\332\4\0\3\332\1\0"+
    "\21\332\1\u0197\6\332\23\0\11\332\4\0\3\332\1\0"+
    "\21\332\1\u0227\6\332\23\0\11\332\4\0\3\332\1\0"+
    "\17\332\1\u0228\10\332\23\0\2\332\1\u0229\3\332\1\u013e"+
    "\2\332\4\0\3\332\1\0\30\332\23\0\5\332\1\u022a"+
    "\3\332\4\0\3\332\1\0\30\332\23\0\2\332\1\u013e"+
    "\6\332\4\0\3\332\1\0\30\332\23\0\4\332\1\u013e"+
    "\4\332\4\0\3\332\1\0\30\332\23\0\11\332\4\0"+
    "\3\332\1\0\17\332\1\u022b\10\332\23\0\11\332\4\0"+
    "\3\332\1\0\10\332\1\u01f9\17\332\23\0\11\332\4\0"+
    "\3\332\1\0\5\332\1\u022c\22\332\23\0\11\332\4\0"+
    "\3\332\1\0\1\332\1\u01a9\26\332\23\0\11\332\4\0"+
    "\3\332\1\0\13\332\1\u022d\14\332\23\0\11\332\4\0"+
    "\3\332\1\0\1\u01e9\27\332\23\0\11\332\4\0\3\332"+
    "\1\0\10\332\1\u022e\17\332\23\0\11\332\4\0\3\332"+
    "\1\0\17\332\1\u022f\10\332\23\0\11\332\4\0\3\332"+
    "\1\0\3\332\1\u0230\24\332\23\0\11\332\4\0\3\332"+
    "\1\0\14\332\1\u0231\13\332\23\0\11\332\4\0\3\332"+
    "\1\0\2\332\1\u0228\25\332\23\0\11\332\4\0\3\332"+
    "\1\0\4\332\1\u0232\23\332\23\0\1\332\1\u01ec\1\u01ed"+
    "\1\u01ee\2\332\1\u01ef\1\332\1\u013e\4\0\3\332\1\0"+
    "\30\332\64\0\1\u0177\55\0\1\u0233\51\0\2\u0234\1\u0235"+
    "\5\371\121\0\1\u0236\75\0\1\u0237\70\0\1\u013b\57\0"+
    "\1\u01cb\73\0\1\u0238\121\0\1\u017d\55\0\1\u0239\104\0"+
    "\1\371\41\0\1\371\71\0\1\371\122\0\1\u023a\63\0"+
    "\1\u015f\77\0\1\u023b\63\0\1\371\75\0\1\371\105\0"+
    "\1\u023c\62\0\1\u015f\100\0\1\u023d\71\0\1\371\72\0"+
    "\1\u023e\71\0\1\371\26\0\2\63\2\0\1\63\1\0"+
    "\2\63\1\0\50\63\1\u023f\14\63\2\0\1\63\1\0"+
    "\2\63\1\0\45\63\1\u0135\17\63\2\0\1\63\1\0"+
    "\2\63\1\0\31\63\1\u01e3\33\63\2\0\1\63\1\0"+
    "\2\63\1\0\41\63\1\u0240\23\63\2\0\1\63\1\0"+
    "\2\63\1\0\52\63\1\u0123\12\63\2\0\1\63\1\0"+
    "\2\63\1\0\20\63\1\u0123\44\63\2\0\1\63\1\0"+
    "\2\63\1\0\16\63\1\u0123\46\63\2\0\1\63\1\0"+
    "\2\63\1\0\45\63\1\u0241\17\63\2\0\1\63\1\0"+
    "\2\63\1\0\41\63\1\u0242\23\63\2\0\1\63\1\0"+
    "\2\63\1\0\31\63\1\u0123\33\63\2\0\1\63\1\0"+
    "\2\63\1\0\33\63\1\u0123\31\63\2\0\1\63\1\0"+
    "\2\63\1\0\45\63\1\u0243\17\63\2\0\1\63\1\0"+
    "\2\63\1\0\41\63\1\u0244\23\63\2\0\1\63\1\0"+
    "\2\63\1\0\37\63\1\u0123\25\63\2\0\1\63\1\0"+
    "\2\63\1\0\34\63\1\u0123\26\63\21\0\11\332\4\0"+
    "\3\332\1\0\17\332\1\u0245\10\332\23\0\11\332\4\0"+
    "\3\332\1\0\14\332\1\u0150\13\332\23\0\11\332\4\0"+
    "\3\332\1\0\1\u01fa\27\332\23\0\11\332\4\0\3\332"+
    "\1\0\10\332\1\u0246\17\332\23\0\11\332\4\0\3\332"+
    "\1\0\21\332\1\u013e\6\332\23\0\10\332\1\u013e\4\0"+
    "\3\332\1\0\30\332\23\0\6\332\1\u013e\2\332\4\0"+
    "\3\332\1\0\30\332\23\0\11\332\4\0\3\332\1\0"+
    "\14\332\1\u0247\13\332\23\0\11\332\4\0\3\332\1\0"+
    "\10\332\1\u0248\17\332\23\0\11\332\4\0\3\332\1\0"+
    "\1\u013e\27\332\23\0\11\332\4\0\3\332\1\0\2\332"+
    "\1\u013e\25\332\23\0\11\332\4\0\3\332\1\0\14\332"+
    "\1\u0249\13\332\23\0\11\332\4\0\3\332\1\0\10\332"+
    "\1\u024a\17\332\23\0\11\332\4\0\3\332\1\0\6\332"+
    "\1\u013e\21\332\23\0\11\332\4\0\3\332\1\0\3\332"+
    "\1\u013e\24\332\50\0\1\u01c8\46\0\11\371\63\0\3\371"+
    "\115\0\1\u0233\112\0\1\u024b\72\0\1\u024c\67\0\1\u024d"+
    "\56\0\1\u015a\77\0\1\u0107\110\0\1\u024e\56\0\1\u024f"+
    "\25\0\2\63\2\0\1\63\1\0\2\63\1\0\53\63"+
    "\1\u0250\11\63\2\0\1\63\1\0\2\63\1\0\46\63"+
    "\1\u0251\16\63\2\0\1\63\1\0\2\63\1\0\31\63"+
    "\1\u0252\33\63\2\0\1\63\1\0\2\63\1\0\35\63"+
    "\1\u0127\27\63\2\0\1\63\1\0\2\63\1\0\52\63"+
    "\1\u0253\10\63\21\0\11\332\4\0\3\332\1\0\22\332"+
    "\1\u0254\5\332\23\0\11\332\4\0\3\332\1\0\15\332"+
    "\1\u0255\12\332\23\0\11\332\4\0\3\332\1\0\1\u0256"+
    "\27\332\23\0\11\332\4\0\3\332\1\0\4\332\1\u0142"+
    "\23\332\23\0\11\332\4\0\3\332\1\0\21\332\1\u0257"+
    "\6\332\46\0\1\u0258\75\0\1\u0259\103\0\1\371\105\0"+
    "\1\371\64\0\1\u01c8\12\0\2\63\2\0\1\63\1\0"+
    "\2\63\1\0\33\63\1\u025a\31\63\2\0\1\63\1\0"+
    "\2\63\1\0\45\63\1\u0123\17\63\2\0\1\63\1\0"+
    "\2\63\1\0\43\63\1\u0123\21\63\2\0\1\63\1\0"+
    "\2\63\1\0\57\63\1\u0123\3\63\21\0\11\332\4\0"+
    "\3\332\1\0\2\332\1\u025b\25\332\23\0\11\332\4\0"+
    "\3\332\1\0\14\332\1\u013e\13\332\23\0\11\332\4\0"+
    "\3\332\1\0\12\332\1\u013e\15\332\23\0\11\332\4\0"+
    "\3\332\1\0\26\332\1\u013e\1\332\65\0\1\u025c\54\0"+
    "\1\u025d\27\0\2\63\2\0\1\63\1\0\2\63\1\0"+
    "\52\63\1\u025e\10\63\21\0\11\332\4\0\3\332\1\0"+
    "\21\332\1\u025f\6\332\61\0\1\u0107\56\0\1\u0260\31\0"+
    "\2\63\2\0\1\63\1\0\2\63\1\0\46\63\1\u0127"+
    "\14\63\21\0\11\332\4\0\3\332\1\0\15\332\1\u0142"+
    "\12\332\56\0\1\u0261\73\0\1\u01c8\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\2\11\2\1\2\11\1\1\1\11\36\1\1\11"+
    "\1\1\2\11\15\1\2\11\1\1\2\11\1\1\1\11"+
    "\1\1\1\11\15\1\1\11\11\1\2\11\1\1\1\11"+
    "\15\1\1\11\2\1\1\11\1\1\1\11\2\1\1\11"+
    "\2\1\1\11\16\1\2\11\2\1\1\11\23\1\1\11"+
    "\1\1\3\11\1\1\2\11\1\1\1\11\16\1\2\11"+
    "\1\1\1\11\22\1\3\11\17\1\1\0\1\1\10\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\1\11\47\0"+
    "\31\1\2\0\32\1\20\0\1\1\2\0\1\1\23\0"+
    "\1\11\1\0\25\1\1\0\25\1\1\0\1\1\3\0"+
    "\2\1\6\0\2\11\17\0\1\11\6\0\27\1\1\0"+
    "\26\1\2\0\1\1\25\0\36\1\1\0\2\1\6\0"+
    "\1\1\2\0\14\1\5\0\10\1\2\0\2\1\2\0"+
    "\2\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[609];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    StringBuffer stringN = new StringBuffer();
    public static int banderaN = 0;
    public static int bandera = 0;
    public static int bandera2 = 0;
    public static int bandera3 = 0;
    public static ArrayList<Token> tokens = new ArrayList<>();  
    public static ArrayList<Token> errores = new ArrayList<>();  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {   for(Token t: tokens){
    t.print();
  }

  System.out.println("\nErrores\n");
  for(Token t: errores){
    t.print();
  }
  return 0;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { stringN.setLength(0);
     stringN.append(yytext());
     System.out.println("------------");
     yybegin(stateNosibol);
            }
            // fall through
          case 54: break;
          case 2:
            { /* ignore */ ;banderaN =0;
            }
            // fall through
          case 55: break;
          case 3:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
            }
            // fall through
          case 56: break;
          case 4:
            { string.setLength(0); yybegin(STRING); bandera = yycolumn;
            }
            // fall through
          case 57: break;
          case 5:
            { string.setLength(0); yybegin(Chars); bandera = yycolumn;
            }
            // fall through
          case 58: break;
          case 6:
            { string.setLength(0);
  string.append(yytext());
  yybegin(numberState);
  banderaN =0;
  bandera2 = 0;
  bandera3= 0;
            }
            // fall through
          case 59: break;
          case 7:
            { stringN.setLength(0);
string.setLength(0);
string.append(yytext());
stringN.append(yytext());
yybegin(filtro);
            }
            // fall through
          case 60: break;
          case 8:
            { string.append( yytext() );
            }
            // fall through
          case 61: break;
          case 9:
            { errores.add(new Token(string.toString(), yyline, bandera, "Error stringASAD"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 62: break;
          case 10:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal string"));
            }
            // fall through
          case 63: break;
          case 11:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error string"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 64: break;
          case 12:
            { string.append(yytext());
    yybegin(hexaStateError);
            }
            // fall through
          case 65: break;
          case 13:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: hexadecimal sin cierre"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 66: break;
          case 14:
            { yybegin(YYINITIAL);
    string.append( yytext() ); 
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal hexadecimal/Palabra Reservada"));
            }
            // fall through
          case 67: break;
          case 15:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: comillas de cierre incorrectas"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 68: break;
          case 16:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); 
    errores.add(new Token("Comillas", yyline, yycolumn, "Error: hexadecimal sin cierre"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 69: break;
          case 17:
            { System.out.println(yyline);
  System.out.println(yycolumn); 
  // throw new Error("Illegal character <"+ yytext()+">");
            }
            // fall through
          case 70: break;
          case 18:
            { string.append(yytext());
    yybegin(hexaStateCError);
            }
            // fall through
          case 71: break;
          case 19:
            { string.append(yytext());
            }
            // fall through
          case 72: break;
          case 20:
            { yybegin(YYINITIAL); errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
            }
            // fall through
          case 73: break;
          case 21:
            { yybegin(YYINITIAL);
    string.append(yytext());
    errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
            }
            // fall through
          case 74: break;
          case 22:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
            }
            // fall through
          case 75: break;
          case 23:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
  tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
  yybegin(YYINITIAL);
            }
            // fall through
          case 76: break;
          case 24:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "literal numerico"));
    tokens.add(new Token(")", yyline+1, yycolumn, "Operador"));
            }
            // fall through
          case 77: break;
          case 25:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "literal numerico"));
    tokens.add(new Token(";", yyline+1, yycolumn, "Operador"));
            }
            // fall through
          case 78: break;
          case 26:
            { string.append(yytext()); yybegin(Identificadorcillo);
            }
            // fall through
          case 79: break;
          case 27:
            { yybegin(otraMas);
    string.append(yytext());
            }
            // fall through
          case 80: break;
          case 28:
            { bandera = 1; 
    string.append(yytext());
            }
            // fall through
          case 81: break;
          case 29:
            { if(bandera == 1){
      yybegin(YYINITIAL);
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
    }
    else{
      yybegin(YYINITIAL);
      tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
    }
            }
            // fall through
          case 82: break;
          case 30:
            { if(bandera == 1){
      yybegin(YYINITIAL);
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
    else{
      yybegin(YYINITIAL);
      tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
            }
            // fall through
          case 83: break;
          case 31:
            { if((bandera2 == 1) && (bandera == 1)){
      yybegin(YYINITIAL);
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
    else if ((bandera2 == 1) && (bandera == 0)){
      yybegin(YYINITIAL);
      tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
    else if ((bandera2 == 0) && (bandera == 1)){
      yybegin(YYINITIAL);
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
    else {
      yybegin(YYINITIAL);
      tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
            }
            // fall through
          case 84: break;
          case 32:
            { string.append( yytext() );
    errores.add(new Token(string.toString(), yyline, bandera, "Error char"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 85: break;
          case 33:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error char"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 86: break;
          case 34:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal char"));
            }
            // fall through
          case 87: break;
          case 35:
            { errores.add(new Token(string.toString(), yyline, bandera, "Error: identificador")); yybegin(YYINITIAL);
            }
            // fall through
          case 88: break;
          case 36:
            { stringN.append(yytext());yybegin(stateNosibol);
            }
            // fall through
          case 89: break;
          case 37:
            { errores.add(new Token(stringN.toString(), yyline, yycolumn, "Error: identificador"));
        yybegin(YYINITIAL);
            }
            // fall through
          case 90: break;
          case 38:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));     
        errores.add(new Token(stringN.toString(), yyline, yycolumn, "Error: identificador"));
        yybegin(YYINITIAL);
            }
            // fall through
          case 91: break;
          case 39:
            { stringN.append(yytext());
    yybegin(stateNosibol);
            }
            // fall through
          case 92: break;
          case 40:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Identificador   1"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 93: break;
          case 41:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Identificador"));
    tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 94: break;
          case 42:
            { string.append(yytext()) ;
              errores.add(new Token(string.toString(), yyline, yycolumn, "Error Identificador"));
              yybegin(YYINITIAL);
            }
            // fall through
          case 95: break;
          case 43:
            { if (bandera3 == 0){
      string.append(yytext());
      bandera3 = 1;
      yybegin(otraMas);
    }
    else{
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Error: Literal numerico"));
      yybegin(YYINITIAL);
    }
            }
            // fall through
          case 96: break;
          case 44:
            { string.append(yytext());
    bandera2 = 1;
    yybegin(NaturalNumbers);
            }
            // fall through
          case 97: break;
          case 45:
            { if (bandera3 == 1){
      string.append(yytext());
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
      yybegin(YYINITIAL);
    }
    else{
      string.append(yytext());
      yybegin(NaturalNumbers);
    }
            }
            // fall through
          case 98: break;
          case 46:
            { System.out.println("Hola");
    string.append(yytext());
    errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 99: break;
          case 47:
            { string.setLength(0);
  string.append(yytext());
  errores.add(new Token(string.toString(), yyline, yycolumn, "Error Identificador"));
  yybegin(YYINITIAL);
            }
            // fall through
          case 100: break;
          case 48:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error Decimal"));
            }
            // fall through
          case 101: break;
          case 49:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));
            }
            // fall through
          case 102: break;
          case 50:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Units"));
            }
            // fall through
          case 103: break;
          case 51:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Transac"));
            }
            // fall through
          case 104: break;
          case 52:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaState);
            }
            // fall through
          case 105: break;
          case 53:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaStateC);
            }
            // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
