// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.jflex

/* JFlex example: partial Java language lexer specification */
import java.util.ArrayList;
/**
    * This class is a simple example lexer.
    */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int hexaState = 4;
  public static final int hexaStateC = 6;
  public static final int hexaStateError = 8;
  public static final int hexaStateCError = 10;
  public static final int numberState = 12;
  public static final int NaturalNumbers = 14;
  public static final int Chars = 16;
  public static final int Identificadorcillo = 18;
  public static final int stateNosibol = 20;
  public static final int filtro = 22;
  public static final int otraMas = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\2\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\30"+
    "\1\6\1\32\1\33\1\34\1\35\1\6\1\0\4\36"+
    "\1\37\1\36\24\40\1\11\1\0\1\41\1\6\1\42"+
    "\1\0\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\40\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\40\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\11\1\73\1\41\1\74\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\1\1\2\2\1\3\1\4\2\3\1\5\6\3"+
    "\2\6\2\3\22\7\1\3\1\10\2\11\1\12\1\13"+
    "\15\10\1\14\2\15\1\16\1\17\1\10\1\20\1\10"+
    "\5\21\11\14\12\22\1\23\2\24\1\25\15\23\2\26"+
    "\3\27\1\30\1\27\1\23\1\31\2\27\3\32\1\33"+
    "\12\32\1\27\1\34\2\35\4\36\1\37\2\36\15\34"+
    "\1\36\2\40\1\41\1\42\2\43\1\44\2\45\1\46"+
    "\16\44\1\47\1\50\6\51\15\50\1\51\1\52\1\53"+
    "\1\54\1\55\16\56\1\0\1\57\10\0\2\60\1\0"+
    "\1\2\1\0\1\60\1\7\1\61\47\7\2\10\1\61"+
    "\26\10\2\0\1\61\26\0\2\56\1\61\26\56\1\60"+
    "\2\0\16\7\1\61\2\7\1\61\23\7\1\62\1\7"+
    "\6\10\1\61\16\10\6\0\1\61\16\0\6\56\1\61"+
    "\16\56\1\0\1\2\3\7\1\61\1\63\6\7\1\64"+
    "\1\65\17\7\1\63\6\7\1\61\25\10\1\61\25\0"+
    "\1\61\25\56\1\61\2\7\1\61\26\7\17\10\17\0"+
    "\17\56\1\7\2\61\7\7\1\61\2\7\4\10\1\61"+
    "\1\10\4\0\1\61\1\0\4\56\1\61\1\56\5\7"+
    "\4\10\4\0\4\56\2\7\1\10\1\0\1\56\2\7"+
    "\1\10\1\0\1\56\2\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[702];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0319\0\u0356"+
    "\0\u0393\0\u0319\0\u0319\0\u03d0\0\u0319\0\u040d\0\u044a\0\u0487"+
    "\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f"+
    "\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857"+
    "\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u0a3f"+
    "\0\u0a7c\0\u0ab9\0\u0af6\0\u0319\0\u0b33\0\u0319\0\u0319\0\u0b70"+
    "\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58"+
    "\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0319\0\u0319\0\u0e89\0\u0319"+
    "\0\u0319\0\u0ec6\0\u0319\0\u0f03\0\u0319\0\u0f40\0\u0f7d\0\u0fba"+
    "\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2"+
    "\0\u11df\0\u121c\0\u0319\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128"+
    "\0\u1165\0\u11a2\0\u11df\0\u121c\0\u0319\0\u0319\0\u1259\0\u0319"+
    "\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb"+
    "\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u0319\0\u1296\0\u12d3"+
    "\0\u0319\0\u1310\0\u0319\0\u134d\0\u138a\0\u0319\0\u13c7\0\u1404"+
    "\0\u0319\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae"+
    "\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1441\0\u0319"+
    "\0\u0319\0\u147e\0\u14bb\0\u0319\0\u14f8\0\u1535\0\u14bb\0\u1572"+
    "\0\u15af\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae"+
    "\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u15ec\0\u0319"+
    "\0\u1629\0\u0319\0\u0319\0\u0319\0\u1666\0\u0319\0\u0319\0\u16a3"+
    "\0\u0319\0\u16e0\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071"+
    "\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u0319"+
    "\0\u0319\0\u171d\0\u0319\0\u175a\0\u1797\0\u17d4\0\u1811\0\u0f40"+
    "\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128"+
    "\0\u1165\0\u11a2\0\u11df\0\u121c\0\u184e\0\u0319\0\u0319\0\u0319"+
    "\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36"+
    "\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u040d"+
    "\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u0501\0\u057b\0\u1d4f"+
    "\0\u1d8c\0\u1dc9\0\u1cd5\0\u1e06\0\u1e43\0\u1e80\0\u057b\0\u1ebd"+
    "\0\u066f\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068"+
    "\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250"+
    "\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb\0\u2438"+
    "\0\u2475\0\u24b2\0\u24ef\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u2620"+
    "\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751\0\u278e\0\u27cb\0\u2808"+
    "\0\u2845\0\u2882\0\u0af6\0\u28bf\0\u28fc\0\u2939\0\u2976\0\u29b3"+
    "\0\u29f0\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b"+
    "\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09\0\u2d46\0\u2d83"+
    "\0\u2dc0\0\u2dfd\0\u2e3a\0\u0319\0\u2e77\0\u2eb4\0\u2ef1\0\u2f2e"+
    "\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u305f\0\u309c\0\u30d9\0\u3116"+
    "\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247\0\u3284\0\u32c1\0\u32fe"+
    "\0\u333b\0\u3378\0\u33b5\0\u33f2\0\u18c8\0\u342f\0\u346c\0\u34a9"+
    "\0\u34e6\0\u3523\0\u3560\0\u359d\0\u35da\0\u3617\0\u3654\0\u3691"+
    "\0\u36ce\0\u370b\0\u3748\0\u3785\0\u37c2\0\u37ff\0\u383c\0\u3879"+
    "\0\u38b6\0\u38f3\0\u3930\0\u396d\0\u39aa\0\u39e7\0\u3a24\0\u3a61"+
    "\0\u3a9e\0\u3adb\0\u3b18\0\u3b55\0\u3b92\0\u3bcf\0\u3c0c\0\u3c49"+
    "\0\u3c86\0\u3cc3\0\u3d00\0\u3d3d\0\u3d7a\0\u3db7\0\u3df4\0\u3e31"+
    "\0\u3e6e\0\u3eab\0\u3ee8\0\u3f25\0\u3f62\0\u3f9f\0\u3fdc\0\u4019"+
    "\0\u4056\0\u4093\0\u40d0\0\u410d\0\u414a\0\u4187\0\u41c4\0\u4201"+
    "\0\u423e\0\u427b\0\u42b8\0\u066f\0\u42f5\0\u4332\0\u436f\0\u43ac"+
    "\0\u43e9\0\u4426\0\u4463\0\u44a0\0\u44dd\0\u451a\0\u4557\0\u4594"+
    "\0\u45d1\0\u460e\0\u464b\0\u4688\0\u46c5\0\u4702\0\u473f\0\u477c"+
    "\0\u47b9\0\u47f6\0\u4833\0\u4870\0\u48ad\0\u48ea\0\u4927\0\u4964"+
    "\0\u49a1\0\u49de\0\u4a1b\0\u4a58\0\u4a95\0\u4ad2\0\u4b0f\0\u4b4c"+
    "\0\u4b89\0\u4bc6\0\u4c03\0\u4c40\0\u4c7d\0\u4cba\0\u4cf7\0\u4d34"+
    "\0\u4d71\0\u4dae\0\u4deb\0\u4e28\0\u4e65\0\u4ea2\0\u4edf\0\u4f1c"+
    "\0\u4f59\0\u4f96\0\u4fd3\0\u5010\0\u504d\0\u508a\0\u50c7\0\u5104"+
    "\0\u5141\0\u517e\0\u51bb\0\u51f8\0\u5235\0\u39aa\0\u5272\0\u52af"+
    "\0\u52ec\0\u5329\0\u5366\0\u53a3\0\u53e0\0\u541d\0\u545a\0\u5497"+
    "\0\u54d4\0\u0319\0\u0319\0\u5511\0\u554e\0\u558b\0\u55c8\0\u5605"+
    "\0\u5642\0\u567f\0\u56bc\0\u56f9\0\u5736\0\u5773\0\u57b0\0\u57ed"+
    "\0\u582a\0\u5867\0\u066f\0\u58a4\0\u58e1\0\u591e\0\u595b\0\u5998"+
    "\0\u59d5\0\u5a12\0\u5a4f\0\u5a8c\0\u5ac9\0\u5b06\0\u5b43\0\u5b80"+
    "\0\u5bbd\0\u5bfa\0\u5c37\0\u5c74\0\u5cb1\0\u5cee\0\u5d2b\0\u5d68"+
    "\0\u5da5\0\u5de2\0\u5e1f\0\u5e5c\0\u5e99\0\u5ed6\0\u5f13\0\u5f50"+
    "\0\u5f8d\0\u5fca\0\u6007\0\u6044\0\u6081\0\u60be\0\u60fb\0\u6138"+
    "\0\u6175\0\u61b2\0\u61ef\0\u622c\0\u6269\0\u62a6\0\u62e3\0\u6320"+
    "\0\u635d\0\u639a\0\u63d7\0\u6414\0\u6451\0\u648e\0\u64cb\0\u6508"+
    "\0\u6545\0\u6582\0\u65bf\0\u65fc\0\u6639\0\u6676\0\u66b3\0\u66f0"+
    "\0\u672d\0\u676a\0\u67a7\0\u67e4\0\u6821\0\u685e\0\u689b\0\u68d8"+
    "\0\u6915\0\u6952\0\u698f\0\u69cc\0\u6a09\0\u6a46\0\u6a83\0\u6ac0"+
    "\0\u6afd\0\u6b3a\0\u6b77\0\u6bb4\0\u6bf1\0\u6c2e\0\u6c6b\0\u6ca8"+
    "\0\u6ce5\0\u6d22\0\u6d5f\0\u6d9c\0\u6dd9\0\u6e16\0\u6e53\0\u6e90"+
    "\0\u6ecd\0\u6f0a\0\u6f47\0\u6f84\0\u6fc1\0\u6ffe\0\u703b\0\u7078"+
    "\0\u70b5\0\u70f2\0\u712f\0\u716c\0\u71a9\0\u71e6\0\u7223\0\u7260"+
    "\0\u729d\0\u72da\0\u7317\0\u7354\0\u7391\0\u73ce\0\u740b\0\u7448"+
    "\0\u7485\0\u74c2\0\u74ff\0\u753c\0\u7579\0\u75b6\0\u75f3\0\u7630"+
    "\0\u766d\0\u76aa\0\u76e7\0\u7724\0\u7761\0\u779e\0\u77db\0\u7818"+
    "\0\u7855\0\u7892\0\u78cf\0\u790c\0\u7949\0\u7986\0\u79c3\0\u7a00"+
    "\0\u7a3d\0\u7a7a\0\u7ab7\0\u7af4\0\u7b31\0\u7b6e\0\u7bab\0\u7be8"+
    "\0\u7c25\0\u7c62\0\u7c9f\0\u7cdc\0\u4187\0\u7d19\0\u7d56\0\u7d93"+
    "\0\u7dd0\0\u7e0d\0\u7e4a\0\u4702\0\u7e87\0\u7ec4\0\u7f01\0\u7f3e"+
    "\0\u7f7b\0\u4c03\0\u7fb8\0\u7ff5\0\u8032\0\u806f\0\u80ac\0\u5104"+
    "\0\u80e9\0\u8126\0\u8163\0\u81a0\0\u81dd\0\u821a\0\u8257\0\u8294"+
    "\0\u82d1\0\u830e\0\u834b\0\u8388\0\u83c5\0\u8402\0\u843f\0\u847c"+
    "\0\u84b9\0\u84f6\0\u8533\0\u8570\0\u85ad\0\u85ea\0\u8627\0\u8664"+
    "\0\u86a1\0\u86de\0\u871b\0\u8758\0\u8795\0\u87d2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[702];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\2\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\23\1\26\1\27\1\30\1\23\1\31\1\32\1\33"+
    "\1\34\10\35\1\23\1\36\1\21\1\37\3\40\1\26"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\40"+
    "\1\47\1\50\2\40\1\51\2\40\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\40\1\61\1\40\1\62"+
    "\1\26\2\63\1\64\1\65\1\63\1\66\2\63\1\67"+
    "\34\63\1\70\1\71\1\72\1\73\2\63\1\74\2\63"+
    "\1\75\2\63\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\5\63\1\105\2\106\1\107\1\105\1\110\2\105"+
    "\1\111\10\105\11\112\1\113\3\105\2\114\3\105\2\115"+
    "\1\116\1\117\1\120\1\121\2\105\1\122\2\105\1\123"+
    "\2\105\1\124\1\125\1\126\1\127\1\130\1\131\1\132"+
    "\5\105\1\133\2\106\1\107\1\133\1\111\2\133\1\110"+
    "\10\133\11\112\1\113\3\133\2\114\3\133\2\115\1\116"+
    "\1\117\1\120\1\121\2\133\1\134\2\133\1\135\2\133"+
    "\1\136\1\137\1\140\1\141\1\142\1\143\1\144\5\133"+
    "\1\145\2\146\1\147\1\145\1\150\24\145\1\150\12\145"+
    "\1\151\1\152\1\153\1\154\2\145\1\155\2\145\1\156"+
    "\2\145\1\157\1\160\1\161\1\162\1\163\1\164\1\165"+
    "\6\145\2\146\1\147\4\145\1\150\21\145\1\150\12\145"+
    "\1\151\1\152\1\153\1\154\2\145\1\155\2\145\1\156"+
    "\2\145\1\157\1\160\1\161\1\162\1\163\1\164\1\165"+
    "\5\145\1\115\2\166\1\167\1\170\1\115\1\171\1\172"+
    "\1\115\1\171\1\173\1\174\1\170\1\166\1\170\1\145"+
    "\1\170\11\175\1\176\1\177\1\170\1\200\1\201\1\115"+
    "\1\201\1\171\1\115\2\201\1\202\1\203\1\204\1\205"+
    "\2\201\1\206\2\201\1\207\2\201\1\210\1\211\1\212"+
    "\1\213\1\214\1\215\1\216\3\201\1\217\1\171\1\220"+
    "\2\221\1\222\1\223\1\220\1\224\1\225\1\220\2\224"+
    "\1\226\1\223\1\224\1\227\1\220\1\223\11\175\1\224"+
    "\1\230\1\223\1\231\3\220\1\224\3\220\1\232\1\233"+
    "\1\234\1\235\2\220\1\236\2\220\1\237\2\220\1\240"+
    "\1\241\1\242\1\243\1\244\1\245\1\246\3\220\1\247"+
    "\1\224\2\63\1\250\1\251\1\63\1\252\2\63\1\253"+
    "\34\63\1\70\1\71\1\72\1\73\2\63\1\74\2\63"+
    "\1\75\2\63\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\5\63\1\145\2\254\1\255\5\145\2\254\17\145"+
    "\1\254\6\145\1\254\3\145\1\151\1\152\1\153\1\154"+
    "\2\145\1\155\2\145\1\156\2\145\1\157\1\160\1\161"+
    "\1\162\1\163\1\164\1\165\5\145\1\256\2\257\1\260"+
    "\5\256\2\261\5\256\1\262\11\256\1\261\6\256\1\261"+
    "\3\256\1\263\1\264\1\265\1\266\2\256\1\267\2\256"+
    "\1\270\2\256\1\271\1\272\1\273\1\274\1\275\1\276"+
    "\1\277\5\256\1\300\3\301\1\302\1\300\1\303\1\304"+
    "\1\300\2\303\1\305\1\302\1\303\1\302\1\303\1\302"+
    "\11\301\1\303\1\306\1\302\1\307\3\301\1\303\1\300"+
    "\2\301\1\310\1\311\1\312\1\313\2\301\1\314\2\301"+
    "\1\315\2\301\1\316\1\317\1\320\1\321\1\322\1\323"+
    "\1\324\3\301\1\325\1\326\4\115\1\327\1\115\2\327"+
    "\1\115\5\327\1\330\1\115\1\327\11\331\4\327\3\332"+
    "\1\327\1\115\2\332\1\333\1\334\1\335\1\336\2\332"+
    "\1\337\2\332\1\340\2\332\1\341\1\342\1\343\1\344"+
    "\1\345\1\346\1\347\3\332\2\327\77\0\1\17\126\0"+
    "\1\23\47\0\1\23\77\0\1\350\23\0\3\351\1\350"+
    "\31\351\1\0\1\350\13\0\1\23\20\0\1\23\54\0"+
    "\1\352\1\0\1\353\2\0\1\354\12\0\1\23\56\0"+
    "\1\355\1\356\1\0\1\357\10\360\2\0\1\23\56\0"+
    "\1\361\1\362\1\0\11\363\56\0\1\364\4\0\1\365"+
    "\13\0\1\23\57\0\1\366\1\0\11\367\62\0\1\366"+
    "\1\0\11\35\76\0\2\23\74\0\2\23\60\0\11\40"+
    "\4\0\3\40\1\0\31\40\23\0\11\40\4\0\3\40"+
    "\1\0\4\40\1\370\14\40\1\371\7\40\23\0\11\40"+
    "\4\0\3\40\1\0\1\40\1\372\14\40\1\373\1\40"+
    "\1\374\6\40\1\375\1\40\23\0\11\40\4\0\3\40"+
    "\1\0\1\40\1\376\14\40\1\377\12\40\23\0\11\40"+
    "\4\0\3\40\1\0\1\40\1\u0100\3\40\1\u0101\10\40"+
    "\1\371\12\40\23\0\11\40\4\0\3\40\1\0\13\40"+
    "\1\u0102\1\40\1\u0103\4\40\1\u0104\6\40\23\0\11\40"+
    "\4\0\3\40\1\0\1\40\1\u0105\7\40\1\u0106\4\40"+
    "\1\u0107\1\40\1\u0108\2\40\1\u0109\5\40\23\0\11\40"+
    "\4\0\3\40\1\0\5\40\1\u010a\10\40\1\u010b\12\40"+
    "\23\0\11\40\4\0\3\40\1\0\6\40\1\371\5\40"+
    "\1\u010c\1\u010d\13\40\23\0\11\40\4\0\3\40\1\0"+
    "\1\40\1\u010e\7\40\1\u010f\4\40\1\u0110\12\40\23\0"+
    "\11\40\4\0\3\40\1\0\1\40\1\u0111\16\40\1\u0112"+
    "\2\40\1\u0113\5\40\23\0\11\40\4\0\3\40\1\0"+
    "\5\40\1\u0114\23\40\23\0\11\40\4\0\3\40\1\0"+
    "\5\40\1\u0115\10\40\1\u0116\3\40\1\u0117\5\40\1\u0118"+
    "\23\0\11\40\4\0\3\40\1\0\10\40\1\u0119\7\40"+
    "\1\u011a\10\40\23\0\11\40\4\0\3\40\1\0\6\40"+
    "\1\u011b\2\40\1\u011c\17\40\23\0\11\40\4\0\3\40"+
    "\1\0\1\40\1\u0107\7\40\1\u011d\17\40\23\0\11\40"+
    "\4\0\3\40\1\0\5\40\1\u011e\2\40\1\u011f\20\40"+
    "\23\0\11\40\4\0\3\40\1\0\5\40\1\u0120\23\40"+
    "\75\0\1\23\1\0\2\63\2\0\1\63\1\0\2\63"+
    "\1\0\64\63\2\0\1\64\72\0\2\63\2\0\1\63"+
    "\1\0\2\63\1\0\47\63\1\u0121\16\63\2\0\1\63"+
    "\1\0\2\63\1\0\36\63\1\u0122\10\63\1\u0123\16\63"+
    "\2\0\1\63\1\0\2\63\1\0\44\63\1\u0124\1\63"+
    "\1\u0125\17\63\2\0\1\63\1\0\2\63\1\0\32\63"+
    "\1\u0126\14\63\1\u0127\1\63\1\u0128\2\63\1\u0129\11\63"+
    "\2\0\1\63\1\0\2\63\1\0\37\63\1\u0123\5\63"+
    "\1\u012a\1\u012b\17\63\2\0\1\63\1\0\2\63\1\0"+
    "\32\63\1\u012c\14\63\1\u012d\16\63\2\0\1\63\1\0"+
    "\2\63\1\0\32\63\1\u012e\16\63\1\u012f\2\63\1\u0130"+
    "\11\63\2\0\1\63\1\0\2\63\1\0\36\63\1\u0131"+
    "\27\63\2\0\1\63\1\0\2\63\1\0\47\63\1\u0132"+
    "\3\63\1\u0133\12\63\2\0\1\63\1\0\2\63\1\0"+
    "\41\63\1\u0134\7\63\1\u0135\14\63\2\0\1\63\1\0"+
    "\2\63\1\0\37\63\1\u0136\2\63\1\u0137\23\63\2\0"+
    "\1\63\1\0\2\63\1\0\32\63\1\u0127\7\63\1\u0138"+
    "\23\63\2\0\1\63\1\0\2\63\1\0\41\63\1\u0139"+
    "\22\63\2\0\1\106\113\0\11\112\101\0\2\114\115\0"+
    "\1\u013a\63\0\1\u013b\10\0\1\u013c\71\0\1\u013d\1\0"+
    "\1\u013e\60\0\1\u013f\14\0\1\u0140\1\0\1\u0141\2\0"+
    "\1\u0142\57\0\1\u013c\5\0\1\u0143\1\u0144\60\0\1\u0145"+
    "\14\0\1\u0146\57\0\1\u0147\16\0\1\u0148\2\0\1\u0149"+
    "\56\0\1\u014a\105\0\1\u014b\3\0\1\u014c\62\0\1\u014d"+
    "\7\0\1\u014e\62\0\1\u014f\2\0\1\u0150\64\0\1\u0140"+
    "\7\0\1\u0151\73\0\1\u0152\24\0\1\146\74\0\1\166"+
    "\126\0\1\171\47\0\1\171\100\0\1\171\20\0\1\171"+
    "\61\0\11\175\76\0\2\171\74\0\2\171\132\0\1\171"+
    "\3\0\1\221\126\0\1\224\47\0\1\224\100\0\1\224"+
    "\20\0\1\224\73\0\2\224\74\0\2\224\132\0\1\224"+
    "\3\0\1\250\74\0\1\254\74\0\1\257\112\0\1\261"+
    "\110\0\1\303\47\0\1\303\100\0\1\303\20\0\1\303"+
    "\73\0\2\303\74\0\2\303\132\0\1\303\22\0\11\331"+
    "\64\0\11\332\4\0\3\332\2\0\30\332\23\0\11\332"+
    "\4\0\3\332\2\0\15\332\1\u0153\12\332\23\0\11\332"+
    "\4\0\3\332\2\0\4\332\1\u0154\10\332\1\u0155\12\332"+
    "\23\0\11\332\4\0\3\332\2\0\12\332\1\u0156\1\332"+
    "\1\u0157\13\332\23\0\11\332\4\0\3\332\2\0\1\u0158"+
    "\14\332\1\u0159\1\332\1\u015a\2\332\1\u015b\5\332\23\0"+
    "\11\332\4\0\3\332\2\0\5\332\1\u0155\5\332\1\u015c"+
    "\1\u015d\13\332\23\0\11\332\4\0\3\332\2\0\1\u015e"+
    "\14\332\1\u015f\12\332\23\0\11\332\4\0\3\332\2\0"+
    "\1\u0160\16\332\1\u0161\2\332\1\u0162\5\332\23\0\11\332"+
    "\4\0\3\332\2\0\4\332\1\u0163\23\332\23\0\11\332"+
    "\4\0\3\332\2\0\15\332\1\u0164\3\332\1\u0165\6\332"+
    "\23\0\11\332\4\0\3\332\2\0\7\332\1\u0166\7\332"+
    "\1\u0167\10\332\23\0\11\332\4\0\3\332\2\0\5\332"+
    "\1\u0168\2\332\1\u0169\17\332\23\0\11\332\4\0\3\332"+
    "\2\0\1\u0159\7\332\1\u016a\17\332\23\0\11\332\4\0"+
    "\3\332\2\0\7\332\1\u016b\20\332\23\0\11\351\4\0"+
    "\3\351\1\0\31\351\16\0\1\352\1\0\1\353\2\0"+
    "\1\354\71\0\1\353\2\0\1\354\74\0\11\363\61\0"+
    "\1\355\1\356\1\0\1\357\10\360\62\0\1\366\1\0"+
    "\11\360\61\0\1\361\2\0\11\363\61\0\1\u016c\1\362"+
    "\1\0\11\363\43\0\13\u016d\1\u016e\61\u016d\2\365\1\17"+
    "\1\20\71\365\17\0\1\362\76\0\11\40\4\0\3\40"+
    "\1\0\4\40\1\u016f\24\40\23\0\11\40\4\0\3\40"+
    "\1\0\13\40\1\u0170\15\40\23\0\11\40\4\0\3\40"+
    "\1\0\16\40\1\u0171\12\40\23\0\11\40\4\0\3\40"+
    "\1\0\5\40\1\u0172\23\40\23\0\11\40\4\0\3\40"+
    "\1\0\22\40\1\u0173\6\40\23\0\11\40\4\0\3\40"+
    "\1\0\13\40\1\u0174\15\40\23\0\11\40\4\0\3\40"+
    "\1\0\15\40\1\u0175\13\40\23\0\11\40\4\0\3\40"+
    "\1\0\27\40\1\u0176\1\40\23\0\11\40\4\0\3\40"+
    "\1\0\13\40\1\u0177\15\40\23\0\11\40\4\0\3\40"+
    "\1\0\21\40\1\u0178\7\40\23\0\11\40\4\0\3\40"+
    "\1\0\23\40\1\u0179\5\40\23\0\11\40\4\0\3\40"+
    "\1\0\10\40\1\u017a\20\40\23\0\11\40\4\0\3\40"+
    "\1\0\13\40\1\u0102\15\40\23\0\11\40\4\0\3\40"+
    "\1\0\15\40\1\u017b\13\40\23\0\11\40\4\0\3\40"+
    "\1\0\20\40\1\371\10\40\23\0\11\40\4\0\3\40"+
    "\1\0\16\40\1\u0179\12\40\23\0\11\40\4\0\3\40"+
    "\1\0\15\40\1\u017c\13\40\23\0\11\40\4\0\3\40"+
    "\1\0\26\40\1\u017d\2\40\23\0\11\40\4\0\3\40"+
    "\1\0\23\40\1\u017e\5\40\23\0\11\40\4\0\3\40"+
    "\1\0\17\40\1\u017f\11\40\23\0\11\40\4\0\3\40"+
    "\1\0\22\40\1\u0180\6\40\23\0\11\40\4\0\3\40"+
    "\1\0\17\40\1\u0181\11\40\23\0\11\40\4\0\3\40"+
    "\1\0\15\40\1\u0182\13\40\23\0\11\40\4\0\3\40"+
    "\1\0\4\40\1\u0183\24\40\23\0\11\40\4\0\3\40"+
    "\1\0\27\40\1\u0184\1\40\23\0\11\40\4\0\3\40"+
    "\1\0\1\40\1\u0185\7\40\1\u0186\17\40\23\0\11\40"+
    "\4\0\3\40\1\0\2\40\1\u0187\26\40\23\0\11\40"+
    "\4\0\3\40\1\0\22\40\1\u0188\6\40\23\0\11\40"+
    "\4\0\3\40\1\0\3\40\1\u0189\11\40\1\u018a\13\40"+
    "\23\0\11\40\4\0\3\40\1\0\13\40\1\u018b\15\40"+
    "\23\0\11\40\4\0\3\40\1\0\20\40\1\u018c\10\40"+
    "\23\0\11\40\4\0\3\40\1\0\1\40\1\u018d\27\40"+
    "\23\0\11\40\4\0\3\40\1\0\11\40\1\u018e\17\40"+
    "\23\0\11\40\4\0\3\40\1\0\1\40\1\u018f\21\40"+
    "\1\u0178\5\40\23\0\11\40\4\0\3\40\1\0\11\40"+
    "\1\u0190\17\40\23\0\11\40\4\0\3\40\1\0\15\40"+
    "\1\u0191\13\40\23\0\11\40\4\0\3\40\1\0\5\40"+
    "\1\u0192\23\40\23\0\11\40\4\0\3\40\1\0\5\40"+
    "\1\u0193\3\40\1\u0194\17\40\23\0\11\40\4\0\3\40"+
    "\1\0\11\40\1\u0195\17\40\23\0\11\40\4\0\3\40"+
    "\1\0\1\40\1\u017e\27\40\2\0\2\63\2\0\1\63"+
    "\1\0\2\63\1\0\46\63\1\u0196\17\63\2\0\1\63"+
    "\1\0\2\63\1\0\44\63\1\u0197\21\63\2\0\1\63"+
    "\1\0\2\63\1\0\52\63\1\u0198\13\63\2\0\1\63"+
    "\1\0\2\63\1\0\54\63\1\u0199\11\63\2\0\1\63"+
    "\1\0\2\63\1\0\44\63\1\u0124\21\63\2\0\1\63"+
    "\1\0\2\63\1\0\51\63\1\u0123\14\63\2\0\1\63"+
    "\1\0\2\63\1\0\47\63\1\u0199\16\63\2\0\1\63"+
    "\1\0\2\63\1\0\46\63\1\u019a\17\63\2\0\1\63"+
    "\1\0\2\63\1\0\50\63\1\u019b\15\63\2\0\1\63"+
    "\1\0\2\63\1\0\53\63\1\u019c\12\63\2\0\1\63"+
    "\1\0\2\63\1\0\50\63\1\u019d\15\63\2\0\1\63"+
    "\1\0\2\63\1\0\35\63\1\u019e\30\63\2\0\1\63"+
    "\1\0\2\63\1\0\60\63\1\u019f\5\63\2\0\1\63"+
    "\1\0\2\63\1\0\32\63\1\u01a0\7\63\1\u01a1\23\63"+
    "\2\0\1\63\1\0\2\63\1\0\33\63\1\u01a2\32\63"+
    "\2\0\1\63\1\0\2\63\1\0\53\63\1\u01a3\12\63"+
    "\2\0\1\63\1\0\2\63\1\0\44\63\1\u01a4\21\63"+
    "\2\0\1\63\1\0\2\63\1\0\51\63\1\u01a5\14\63"+
    "\2\0\1\63\1\0\2\63\1\0\42\63\1\u01a6\23\63"+
    "\2\0\1\63\1\0\2\63\1\0\54\63\1\u0198\11\63"+
    "\2\0\1\63\1\0\2\63\1\0\42\63\1\u01a7\23\63"+
    "\2\0\1\63\1\0\2\63\1\0\46\63\1\u01a8\17\63"+
    "\2\0\1\63\1\0\2\63\1\0\36\63\1\u01a9\27\63"+
    "\2\0\1\63\1\0\2\63\1\0\42\63\1\u01aa\21\63"+
    "\57\0\1\u01ab\72\0\1\u01ac\102\0\1\u01ad\76\0\1\u01ae"+
    "\64\0\1\u013d\101\0\1\u013c\72\0\1\u01ae\73\0\1\u01af"+
    "\76\0\1\u01b0\77\0\1\u01b1\71\0\1\u01b2\61\0\1\u01b3"+
    "\117\0\1\u01b4\46\0\1\u01b5\7\0\1\u01b6\65\0\1\u01b7"+
    "\114\0\1\u01b8\65\0\1\u01b9\101\0\1\u01ba\65\0\1\u01bb"+
    "\106\0\1\u01ad\62\0\1\u01bc\100\0\1\u01bd\64\0\1\u01be"+
    "\100\0\1\u01bf\42\0\11\332\4\0\3\332\2\0\14\332"+
    "\1\u01c0\13\332\23\0\11\332\4\0\3\332\2\0\12\332"+
    "\1\u01c1\15\332\23\0\11\332\4\0\3\332\2\0\20\332"+
    "\1\u01c2\7\332\23\0\11\332\4\0\3\332\2\0\22\332"+
    "\1\u01c3\5\332\23\0\11\332\4\0\3\332\2\0\12\332"+
    "\1\u0156\15\332\23\0\11\332\4\0\3\332\2\0\17\332"+
    "\1\u0155\10\332\23\0\11\332\4\0\3\332\2\0\15\332"+
    "\1\u01c3\12\332\23\0\11\332\4\0\3\332\2\0\14\332"+
    "\1\u01c4\13\332\23\0\11\332\4\0\3\332\2\0\16\332"+
    "\1\u01c5\11\332\23\0\11\332\4\0\3\332\2\0\21\332"+
    "\1\u01c6\6\332\23\0\11\332\4\0\3\332\2\0\16\332"+
    "\1\u01c7\11\332\23\0\11\332\4\0\3\332\2\0\3\332"+
    "\1\u01c8\24\332\23\0\11\332\4\0\3\332\2\0\26\332"+
    "\1\u01c9\1\332\23\0\11\332\4\0\3\332\2\0\1\u01ca"+
    "\7\332\1\u01cb\17\332\23\0\11\332\4\0\3\332\2\0"+
    "\1\332\1\u01cc\26\332\23\0\11\332\4\0\3\332\2\0"+
    "\21\332\1\u01cd\6\332\23\0\11\332\4\0\3\332\2\0"+
    "\12\332\1\u01ce\15\332\23\0\11\332\4\0\3\332\2\0"+
    "\17\332\1\u01cf\10\332\23\0\11\332\4\0\3\332\2\0"+
    "\10\332\1\u01d0\17\332\23\0\11\332\4\0\3\332\2\0"+
    "\22\332\1\u01c2\5\332\23\0\11\332\4\0\3\332\2\0"+
    "\10\332\1\u01d1\17\332\23\0\11\332\4\0\3\332\2\0"+
    "\14\332\1\u01d2\13\332\23\0\11\332\4\0\3\332\2\0"+
    "\4\332\1\u01d3\23\332\23\0\11\332\4\0\3\332\2\0"+
    "\10\332\1\u01d4\17\332\20\0\1\u016c\2\0\11\363\43\0"+
    "\13\u016d\1\u01d5\74\u016d\1\u01d5\4\u016d\1\u01d6\54\u016d\21\0"+
    "\11\40\4\0\3\40\1\0\20\40\1\u01d7\10\40\23\0"+
    "\11\40\4\0\3\40\1\0\1\40\1\u01d8\27\40\23\0"+
    "\11\40\4\0\3\40\1\0\13\40\1\371\15\40\23\0"+
    "\11\40\4\0\3\40\1\0\1\40\1\u01d9\27\40\23\0"+
    "\11\40\4\0\3\40\1\0\5\40\1\u01da\23\40\23\0"+
    "\11\40\4\0\3\40\1\0\13\40\1\u01db\15\40\23\0"+
    "\11\40\4\0\3\40\1\0\21\40\1\u01dc\1\u01dd\6\40"+
    "\23\0\11\40\4\0\3\40\1\0\21\40\1\u0194\7\40"+
    "\23\0\11\40\4\0\3\40\1\0\5\40\1\u01de\23\40"+
    "\23\0\11\40\4\0\3\40\1\0\5\40\1\371\23\40"+
    "\23\0\11\40\4\0\3\40\1\0\14\40\1\371\14\40"+
    "\23\0\11\40\4\0\3\40\1\0\5\40\1\u01df\23\40"+
    "\23\0\11\40\4\0\3\40\1\0\15\40\1\u01e0\13\40"+
    "\23\0\11\40\4\0\3\40\1\0\3\40\1\u01e1\25\40"+
    "\7\0\1\u01e2\2\0\1\u01e3\10\0\11\40\4\0\3\40"+
    "\1\0\31\40\23\0\11\40\4\0\3\40\1\0\20\40"+
    "\1\u0176\10\40\23\0\11\40\4\0\3\40\1\0\16\40"+
    "\1\u01e4\12\40\23\0\1\40\1\u01e5\1\u01e6\1\u01e7\2\40"+
    "\1\u01e8\1\40\1\371\4\0\3\40\1\0\5\40\1\u01e9"+
    "\23\40\23\0\11\40\4\0\3\40\1\0\17\40\1\u01ea"+
    "\11\40\23\0\11\40\4\0\3\40\1\0\23\40\1\u01eb"+
    "\5\40\23\0\11\40\4\0\3\40\1\0\11\40\1\u01ec"+
    "\17\40\23\0\11\40\4\0\3\40\1\0\1\40\1\u01ed"+
    "\27\40\23\0\11\40\4\0\3\40\1\0\7\40\1\u01ee"+
    "\21\40\23\0\11\40\4\0\3\40\1\0\24\40\1\u01ef"+
    "\4\40\23\0\11\40\4\0\3\40\1\0\13\40\1\u01f0"+
    "\15\40\23\0\11\40\4\0\3\40\1\0\23\40\1\u01f1"+
    "\5\40\23\0\11\40\4\0\3\40\1\0\16\40\1\u01f2"+
    "\12\40\23\0\11\40\4\0\3\40\1\0\4\40\1\u01f3"+
    "\24\40\23\0\11\40\4\0\3\40\1\0\11\40\1\u01f4"+
    "\17\40\23\0\11\40\4\0\3\40\1\0\11\40\1\u01f5"+
    "\11\40\1\u01f6\5\40\23\0\11\40\4\0\3\40\1\0"+
    "\2\40\1\u01f7\26\40\23\0\11\40\4\0\3\40\1\0"+
    "\21\40\1\371\7\40\23\0\11\40\4\0\3\40\1\0"+
    "\15\40\1\u01f8\13\40\23\0\11\40\4\0\3\40\1\0"+
    "\26\40\1\u01f9\2\40\23\0\11\40\4\0\3\40\1\0"+
    "\22\40\1\u01fa\6\40\23\0\11\40\4\0\3\40\1\0"+
    "\25\40\1\371\3\40\23\0\11\40\4\0\3\40\1\0"+
    "\12\40\1\u0176\16\40\23\0\11\40\4\0\3\40\1\0"+
    "\13\40\1\u0178\15\40\2\0\2\63\2\0\1\63\1\0"+
    "\2\63\1\0\52\63\1\u01fb\1\u01fc\12\63\2\0\1\63"+
    "\1\0\2\63\1\0\36\63\1\u01fd\27\63\2\0\1\63"+
    "\1\0\2\63\1\0\36\63\1\u0123\27\63\2\0\1\63"+
    "\1\0\2\63\1\0\45\63\1\u0123\20\63\2\0\1\63"+
    "\1\0\2\63\1\0\34\63\1\u01fe\31\63\2\0\1\63"+
    "\1\0\2\63\1\0\47\63\1\u01ff\16\63\2\0\1\63"+
    "\1\0\2\63\1\0\11\63\1\u0200\1\u0201\1\u0202\2\63"+
    "\1\u0203\1\63\1\u0123\15\63\1\u0204\27\63\2\0\1\63"+
    "\1\0\2\63\1\0\50\63\1\u0205\15\63\2\0\1\63"+
    "\1\0\2\63\1\0\42\63\1\u0206\23\63\2\0\1\63"+
    "\1\0\2\63\1\0\32\63\1\u0207\33\63\2\0\1\63"+
    "\1\0\2\63\1\0\40\63\1\u0208\25\63\2\0\1\63"+
    "\1\0\2\63\1\0\55\63\1\u0209\10\63\2\0\1\63"+
    "\1\0\2\63\1\0\44\63\1\u020a\21\63\2\0\1\63"+
    "\1\0\2\63\1\0\54\63\1\u020b\11\63\2\0\1\63"+
    "\1\0\2\63\1\0\42\63\1\u020c\23\63\2\0\1\63"+
    "\1\0\2\63\1\0\42\63\1\u020d\11\63\1\u020e\11\63"+
    "\2\0\1\63\1\0\2\63\1\0\52\63\1\u0123\13\63"+
    "\2\0\1\63\1\0\2\63\1\0\57\63\1\u020f\6\63"+
    "\2\0\1\63\1\0\2\63\1\0\53\63\1\u0210\12\63"+
    "\2\0\1\63\1\0\2\63\1\0\56\63\1\u0123\7\63"+
    "\2\0\1\63\1\0\2\63\1\0\44\63\1\u0198\17\63"+
    "\63\0\1\u0211\1\u0212\57\0\1\u0213\74\0\1\u013c\103\0"+
    "\1\u013c\63\0\1\u0214\107\0\1\u0215\36\0\1\u0216\1\u0217"+
    "\1\u0218\2\0\1\u0219\1\0\1\u013c\15\0\1\u021a\106\0"+
    "\1\u021b\66\0\1\u021c\64\0\1\u021d\102\0\1\u021e\111\0"+
    "\1\u021f\63\0\1\u0220\104\0\1\u0221\62\0\1\u0222\74\0"+
    "\1\u0223\11\0\1\u0224\72\0\1\u013c\101\0\1\u0225\70\0"+
    "\1\u0226\77\0\1\u013c\62\0\1\u01ad\40\0\11\332\4\0"+
    "\3\332\2\0\20\332\1\u0227\1\u0228\6\332\23\0\11\332"+
    "\4\0\3\332\2\0\4\332\1\u0229\23\332\23\0\11\332"+
    "\4\0\3\332\2\0\4\332\1\u0155\23\332\23\0\11\332"+
    "\4\0\3\332\2\0\13\332\1\u0155\14\332\23\0\11\332"+
    "\4\0\3\332\2\0\2\332\1\u022a\25\332\23\0\11\332"+
    "\4\0\3\332\2\0\15\332\1\u022b\12\332\23\0\1\332"+
    "\1\u022c\1\u022d\1\u022e\2\332\1\u022f\1\332\1\u0155\4\0"+
    "\3\332\2\0\4\332\1\u0230\23\332\23\0\11\332\4\0"+
    "\3\332\2\0\16\332\1\u0231\11\332\23\0\11\332\4\0"+
    "\3\332\2\0\10\332\1\u0232\17\332\23\0\11\332\4\0"+
    "\3\332\2\0\1\u0233\27\332\23\0\11\332\4\0\3\332"+
    "\2\0\6\332\1\u0234\21\332\23\0\11\332\4\0\3\332"+
    "\2\0\23\332\1\u0235\4\332\23\0\11\332\4\0\3\332"+
    "\2\0\12\332\1\u0236\15\332\23\0\11\332\4\0\3\332"+
    "\2\0\22\332\1\u0237\5\332\23\0\11\332\4\0\3\332"+
    "\2\0\10\332\1\u0238\17\332\23\0\11\332\4\0\3\332"+
    "\2\0\10\332\1\u0239\11\332\1\u023a\5\332\23\0\11\332"+
    "\4\0\3\332\2\0\20\332\1\u0155\7\332\23\0\11\332"+
    "\4\0\3\332\2\0\25\332\1\u023b\2\332\23\0\11\332"+
    "\4\0\3\332\2\0\21\332\1\u023c\6\332\23\0\11\332"+
    "\4\0\3\332\2\0\24\332\1\u0155\3\332\23\0\11\332"+
    "\4\0\3\332\2\0\12\332\1\u01c2\15\332\2\0\13\u016d"+
    "\1\u01d5\4\u016d\1\17\54\u016d\21\0\11\40\4\0\3\40"+
    "\1\0\5\40\1\u023d\23\40\23\0\11\40\4\0\3\40"+
    "\1\0\15\40\1\u023e\13\40\23\0\11\40\4\0\3\40"+
    "\1\0\12\40\1\371\16\40\23\0\11\40\4\0\3\40"+
    "\1\0\21\40\1\u023f\7\40\23\0\11\40\4\0\3\40"+
    "\1\0\3\40\1\u0240\25\40\23\0\11\40\4\0\3\40"+
    "\1\0\22\40\1\u0241\6\40\23\0\11\40\4\0\3\40"+
    "\1\0\11\40\1\u0242\6\40\1\u0243\10\40\23\0\11\40"+
    "\4\0\3\40\1\0\7\40\1\u0244\12\40\1\u0178\6\40"+
    "\23\0\11\40\4\0\3\40\1\0\20\40\1\u0194\10\40"+
    "\23\0\11\40\4\0\3\40\1\0\5\40\1\u0245\23\40"+
    "\23\0\11\40\4\0\3\40\1\0\22\40\1\u0246\6\40"+
    "\23\0\11\40\4\0\3\40\1\0\20\40\1\u0247\10\40"+
    "\23\0\2\40\1\u0248\3\40\1\371\2\40\4\0\3\40"+
    "\1\0\31\40\23\0\5\40\1\u0249\3\40\4\0\3\40"+
    "\1\0\31\40\23\0\2\40\1\371\6\40\4\0\3\40"+
    "\1\0\31\40\23\0\4\40\1\371\4\40\4\0\3\40"+
    "\1\0\31\40\23\0\11\40\4\0\3\40\1\0\20\40"+
    "\1\u024a\10\40\23\0\11\40\4\0\3\40\1\0\11\40"+
    "\1\u01f5\17\40\23\0\11\40\4\0\3\40\1\0\22\40"+
    "\1\u024b\6\40\23\0\11\40\4\0\3\40\1\0\6\40"+
    "\1\u024c\22\40\23\0\11\40\4\0\3\40\1\0\2\40"+
    "\1\u0195\26\40\23\0\11\40\4\0\3\40\1\0\14\40"+
    "\1\u024d\14\40\23\0\11\40\4\0\3\40\1\0\1\40"+
    "\1\u024e\27\40\23\0\11\40\4\0\3\40\1\0\11\40"+
    "\1\u024f\17\40\23\0\11\40\4\0\3\40\1\0\20\40"+
    "\1\u0250\10\40\23\0\11\40\4\0\3\40\1\0\15\40"+
    "\1\u0251\13\40\23\0\11\40\4\0\3\40\1\0\4\40"+
    "\1\u0252\24\40\23\0\11\40\4\0\3\40\1\0\15\40"+
    "\1\u0253\13\40\23\0\11\40\4\0\3\40\1\0\3\40"+
    "\1\u0247\25\40\23\0\11\40\4\0\3\40\1\0\16\40"+
    "\1\u0194\12\40\23\0\11\40\4\0\3\40\1\0\21\40"+
    "\1\u0254\7\40\23\0\11\40\4\0\3\40\1\0\5\40"+
    "\1\u0255\23\40\23\0\1\40\1\u01e5\1\u01e6\1\u01e7\2\40"+
    "\1\u01e8\1\40\1\371\4\0\3\40\1\0\31\40\2\0"+
    "\2\63\2\0\1\63\1\0\2\63\1\0\53\63\1\u0256"+
    "\12\63\2\0\1\63\1\0\2\63\1\0\42\63\1\u0257"+
    "\6\63\1\u0258\14\63\2\0\1\63\1\0\2\63\1\0"+
    "\53\63\1\u0198\12\63\2\0\1\63\1\0\2\63\1\0"+
    "\53\63\1\u0259\12\63\2\0\1\63\1\0\2\63\1\0"+
    "\51\63\1\u025a\14\63\2\0\1\63\1\0\2\63\1\0"+
    "\12\63\1\u025b\3\63\1\u0123\47\63\2\0\1\63\1\0"+
    "\2\63\1\0\15\63\1\u025c\50\63\2\0\1\63\1\0"+
    "\2\63\1\0\12\63\1\u0123\53\63\2\0\1\63\1\0"+
    "\2\63\1\0\14\63\1\u0123\51\63\2\0\1\63\1\0"+
    "\2\63\1\0\51\63\1\u025d\14\63\2\0\1\63\1\0"+
    "\2\63\1\0\42\63\1\u020d\23\63\2\0\1\63\1\0"+
    "\2\63\1\0\37\63\1\u025e\26\63\2\0\1\63\1\0"+
    "\2\63\1\0\33\63\1\u01aa\32\63\2\0\1\63\1\0"+
    "\2\63\1\0\45\63\1\u025f\20\63\2\0\1\63\1\0"+
    "\2\63\1\0\32\63\1\u01fd\33\63\2\0\1\63\1\0"+
    "\2\63\1\0\42\63\1\u0260\23\63\2\0\1\63\1\0"+
    "\2\63\1\0\51\63\1\u0261\14\63\2\0\1\63\1\0"+
    "\2\63\1\0\35\63\1\u0262\30\63\2\0\1\63\1\0"+
    "\2\63\1\0\46\63\1\u0263\17\63\2\0\1\63\1\0"+
    "\2\63\1\0\34\63\1\u025a\31\63\2\0\1\63\1\0"+
    "\2\63\1\0\36\63\1\u0264\27\63\2\0\1\63\1\0"+
    "\2\63\1\0\11\63\1\u0200\1\u0201\1\u0202\2\63\1\u0203"+
    "\1\63\1\u0123\43\63\64\0\1\u0265\63\0\1\u0266\6\0"+
    "\1\u0267\76\0\1\u01ad\74\0\1\u0268\72\0\1\u0269\35\0"+
    "\1\u026a\3\0\1\u013c\73\0\1\u026b\71\0\1\u013c\76\0"+
    "\1\u013c\131\0\1\u026c\65\0\1\u0223\71\0\1\u026d\70\0"+
    "\1\u01bf\106\0\1\u026e\61\0\1\u0213\104\0\1\u026f\103\0"+
    "\1\u0270\60\0\1\u0271\105\0\1\u0272\62\0\1\u0269\76\0"+
    "\1\u0273\47\0\1\u0216\1\u0217\1\u0218\2\0\1\u0219\1\0"+
    "\1\u013c\64\0\11\332\4\0\3\332\2\0\21\332\1\u0274"+
    "\6\332\23\0\11\332\4\0\3\332\2\0\10\332\1\u0275"+
    "\6\332\1\u0276\10\332\23\0\11\332\4\0\3\332\2\0"+
    "\21\332\1\u01c2\6\332\23\0\11\332\4\0\3\332\2\0"+
    "\21\332\1\u0277\6\332\23\0\11\332\4\0\3\332\2\0"+
    "\17\332\1\u0278\10\332\23\0\2\332\1\u0279\3\332\1\u0155"+
    "\2\332\4\0\3\332\2\0\30\332\23\0\5\332\1\u027a"+
    "\3\332\4\0\3\332\2\0\30\332\23\0\2\332\1\u0155"+
    "\6\332\4\0\3\332\2\0\30\332\23\0\4\332\1\u0155"+
    "\4\332\4\0\3\332\2\0\30\332\23\0\11\332\4\0"+
    "\3\332\2\0\17\332\1\u027b\10\332\23\0\11\332\4\0"+
    "\3\332\2\0\10\332\1\u0239\17\332\23\0\11\332\4\0"+
    "\3\332\2\0\5\332\1\u027c\22\332\23\0\11\332\4\0"+
    "\3\332\2\0\1\332\1\u01d4\26\332\23\0\11\332\4\0"+
    "\3\332\2\0\13\332\1\u027d\14\332\23\0\11\332\4\0"+
    "\3\332\2\0\1\u0229\27\332\23\0\11\332\4\0\3\332"+
    "\2\0\10\332\1\u027e\17\332\23\0\11\332\4\0\3\332"+
    "\2\0\17\332\1\u027f\10\332\23\0\11\332\4\0\3\332"+
    "\2\0\3\332\1\u0280\24\332\23\0\11\332\4\0\3\332"+
    "\2\0\14\332\1\u0281\13\332\23\0\11\332\4\0\3\332"+
    "\2\0\2\332\1\u0278\25\332\23\0\11\332\4\0\3\332"+
    "\2\0\4\332\1\u0282\23\332\23\0\1\332\1\u022c\1\u022d"+
    "\1\u022e\2\332\1\u022f\1\332\1\u0155\4\0\3\332\2\0"+
    "\30\332\23\0\11\40\4\0\3\40\1\0\21\40\1\u018e"+
    "\7\40\23\0\11\40\4\0\3\40\1\0\3\40\1\u0283"+
    "\25\40\23\0\1\40\2\u0284\1\u0285\5\371\4\0\3\40"+
    "\1\0\31\40\23\0\11\40\4\0\3\40\1\0\16\40"+
    "\1\u0286\12\40\23\0\11\40\4\0\3\40\1\0\20\40"+
    "\1\u0287\10\40\23\0\11\40\4\0\3\40\1\0\15\40"+
    "\1\u0288\13\40\23\0\11\40\4\0\3\40\1\0\1\40"+
    "\1\u01f6\27\40\23\0\11\40\4\0\3\40\1\0\1\40"+
    "\1\u0289\27\40\23\0\11\40\4\0\3\40\1\0\27\40"+
    "\1\u0194\1\40\23\0\11\40\4\0\3\40\1\0\11\40"+
    "\1\u028a\17\40\23\0\11\40\4\0\3\40\1\0\22\40"+
    "\1\371\6\40\23\0\10\40\1\371\4\0\3\40\1\0"+
    "\31\40\23\0\6\40\1\371\2\40\4\0\3\40\1\0"+
    "\31\40\23\0\11\40\4\0\3\40\1\0\15\40\1\u028b"+
    "\13\40\23\0\11\40\4\0\3\40\1\0\5\40\1\u0176"+
    "\23\40\23\0\11\40\4\0\3\40\1\0\11\40\1\u028c"+
    "\17\40\23\0\11\40\4\0\3\40\1\0\1\40\1\371"+
    "\27\40\23\0\11\40\4\0\3\40\1\0\22\40\1\u0178"+
    "\6\40\23\0\11\40\4\0\3\40\1\0\3\40\1\371"+
    "\25\40\23\0\11\40\4\0\3\40\1\0\15\40\1\u028d"+
    "\13\40\23\0\11\40\4\0\3\40\1\0\4\40\1\u0176"+
    "\24\40\23\0\11\40\4\0\3\40\1\0\11\40\1\u028e"+
    "\17\40\23\0\11\40\4\0\3\40\1\0\7\40\1\371"+
    "\21\40\23\0\11\40\4\0\3\40\1\0\6\40\1\u028f"+
    "\22\40\23\0\11\40\4\0\3\40\1\0\4\40\1\371"+
    "\24\40\2\0\2\63\2\0\1\63\1\0\2\63\1\0"+
    "\51\63\1\u0290\14\63\2\0\1\63\1\0\2\63\1\0"+
    "\46\63\1\u0135\17\63\2\0\1\63\1\0\2\63\1\0"+
    "\32\63\1\u020e\33\63\2\0\1\63\1\0\2\63\1\0"+
    "\42\63\1\u0291\23\63\2\0\1\63\1\0\2\63\1\0"+
    "\53\63\1\u0123\12\63\2\0\1\63\1\0\2\63\1\0"+
    "\20\63\1\u0123\45\63\2\0\1\63\1\0\2\63\1\0"+
    "\16\63\1\u0123\47\63\2\0\1\63\1\0\2\63\1\0"+
    "\46\63\1\u0292\17\63\2\0\1\63\1\0\2\63\1\0"+
    "\42\63\1\u0293\23\63\2\0\1\63\1\0\2\63\1\0"+
    "\32\63\1\u0123\33\63\2\0\1\63\1\0\2\63\1\0"+
    "\34\63\1\u0123\31\63\2\0\1\63\1\0\2\63\1\0"+
    "\46\63\1\u0294\17\63\2\0\1\63\1\0\2\63\1\0"+
    "\42\63\1\u0295\23\63\2\0\1\63\1\0\2\63\1\0"+
    "\40\63\1\u0123\25\63\2\0\1\63\1\0\2\63\1\0"+
    "\35\63\1\u0123\26\63\62\0\1\u0296\71\0\1\u014e\60\0"+
    "\1\u0224\104\0\1\u0297\105\0\1\u013c\41\0\1\u013c\72\0"+
    "\1\u013c\124\0\1\u0298\70\0\1\u0299\64\0\1\u013c\76\0"+
    "\1\u013c\106\0\1\u029a\70\0\1\u029b\72\0\1\u013c\71\0"+
    "\1\u013c\47\0\11\332\4\0\3\332\2\0\17\332\1\u029c"+
    "\10\332\23\0\11\332\4\0\3\332\2\0\14\332\1\u0167"+
    "\13\332\23\0\11\332\4\0\3\332\2\0\1\u023a\27\332"+
    "\23\0\11\332\4\0\3\332\2\0\10\332\1\u029d\17\332"+
    "\23\0\11\332\4\0\3\332\2\0\21\332\1\u0155\6\332"+
    "\23\0\10\332\1\u0155\4\0\3\332\2\0\30\332\23\0"+
    "\6\332\1\u0155\2\332\4\0\3\332\2\0\30\332\23\0"+
    "\11\332\4\0\3\332\2\0\14\332\1\u029e\13\332\23\0"+
    "\11\332\4\0\3\332\2\0\10\332\1\u029f\17\332\23\0"+
    "\11\332\4\0\3\332\2\0\1\u0155\27\332\23\0\11\332"+
    "\4\0\3\332\2\0\2\332\1\u0155\25\332\23\0\11\332"+
    "\4\0\3\332\2\0\14\332\1\u02a0\13\332\23\0\11\332"+
    "\4\0\3\332\2\0\10\332\1\u02a1\17\332\23\0\11\332"+
    "\4\0\3\332\2\0\6\332\1\u0155\21\332\23\0\11\332"+
    "\4\0\3\332\2\0\3\332\1\u0155\24\332\23\0\11\40"+
    "\4\0\3\40\1\0\5\40\1\u01f3\23\40\23\0\11\371"+
    "\4\0\3\40\1\0\31\40\23\0\3\371\6\40\4\0"+
    "\3\40\1\0\31\40\23\0\11\40\4\0\3\40\1\0"+
    "\4\40\1\u0283\24\40\23\0\11\40\4\0\3\40\1\0"+
    "\23\40\1\u02a2\5\40\23\0\11\40\4\0\3\40\1\0"+
    "\23\40\1\u0178\5\40\23\0\11\40\4\0\3\40\1\0"+
    "\22\40\1\u02a3\6\40\23\0\11\40\4\0\3\40\1\0"+
    "\16\40\1\u02a4\12\40\23\0\11\40\4\0\3\40\1\0"+
    "\1\40\1\u0171\27\40\23\0\11\40\4\0\3\40\1\0"+
    "\5\40\1\u0107\23\40\23\0\11\40\4\0\3\40\1\0"+
    "\22\40\1\u02a5\6\40\23\0\11\40\4\0\3\40\1\0"+
    "\5\40\1\u02a6\23\40\2\0\2\63\2\0\1\63\1\0"+
    "\2\63\1\0\54\63\1\u02a7\11\63\2\0\1\63\1\0"+
    "\2\63\1\0\47\63\1\u02a8\16\63\2\0\1\63\1\0"+
    "\2\63\1\0\32\63\1\u02a9\33\63\2\0\1\63\1\0"+
    "\2\63\1\0\36\63\1\u0127\27\63\2\0\1\63\1\0"+
    "\2\63\1\0\53\63\1\u02aa\10\63\65\0\1\u02ab\67\0"+
    "\1\u02ac\57\0\1\u02ad\100\0\1\u0140\111\0\1\u02ae\31\0"+
    "\11\332\4\0\3\332\2\0\22\332\1\u02af\5\332\23\0"+
    "\11\332\4\0\3\332\2\0\15\332\1\u02b0\12\332\23\0"+
    "\11\332\4\0\3\332\2\0\1\u02b1\27\332\23\0\11\332"+
    "\4\0\3\332\2\0\4\332\1\u0159\23\332\23\0\11\332"+
    "\4\0\3\332\2\0\21\332\1\u02b2\6\332\23\0\11\40"+
    "\4\0\3\40\1\0\3\40\1\u02b3\25\40\23\0\11\40"+
    "\4\0\3\40\1\0\5\40\1\u02b4\23\40\23\0\11\40"+
    "\4\0\3\40\1\0\15\40\1\371\13\40\23\0\11\40"+
    "\4\0\3\40\1\0\27\40\1\371\1\40\23\0\11\40"+
    "\4\0\3\40\1\0\20\40\1\u01f3\10\40\2\0\2\63"+
    "\2\0\1\63\1\0\2\63\1\0\34\63\1\u02b5\31\63"+
    "\2\0\1\63\1\0\2\63\1\0\46\63\1\u0123\17\63"+
    "\2\0\1\63\1\0\2\63\1\0\44\63\1\u0123\21\63"+
    "\2\0\1\63\1\0\2\63\1\0\60\63\1\u0123\3\63"+
    "\45\0\1\u02b6\106\0\1\u013c\72\0\1\u013c\110\0\1\u013c"+
    "\24\0\11\332\4\0\3\332\2\0\2\332\1\u02b7\25\332"+
    "\23\0\11\332\4\0\3\332\2\0\14\332\1\u0155\13\332"+
    "\23\0\11\332\4\0\3\332\2\0\12\332\1\u0155\15\332"+
    "\23\0\11\332\4\0\3\332\2\0\26\332\1\u0155\1\332"+
    "\23\0\11\40\4\0\3\40\1\0\22\40\1\u02b8\6\40"+
    "\23\0\11\40\4\0\3\40\1\0\3\40\1\u02b9\25\40"+
    "\2\0\2\63\2\0\1\63\1\0\2\63\1\0\53\63"+
    "\1\u02ba\10\63\64\0\1\u02bb\31\0\11\332\4\0\3\332"+
    "\2\0\21\332\1\u02bc\6\332\23\0\11\40\4\0\3\40"+
    "\1\0\16\40\1\u0107\12\40\23\0\11\40\4\0\3\40"+
    "\1\0\1\40\1\u02bd\27\40\2\0\2\63\2\0\1\63"+
    "\1\0\2\63\1\0\47\63\1\u0127\14\63\60\0\1\u0140"+
    "\35\0\11\332\4\0\3\332\2\0\15\332\1\u0159\12\332"+
    "\23\0\11\40\4\0\3\40\1\0\13\40\1\u02be\15\40"+
    "\23\0\11\40\4\0\3\40\1\0\13\40\1\u01f3\15\40"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[34831];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\2\11\2\1\2\11\1\1\1\11\36\1\1\11"+
    "\1\1\2\11\15\1\2\11\1\1\2\11\1\1\1\11"+
    "\1\1\1\11\15\1\1\11\11\1\2\11\1\1\1\11"+
    "\15\1\1\11\2\1\1\11\1\1\1\11\2\1\1\11"+
    "\2\1\1\11\16\1\2\11\2\1\1\11\23\1\1\11"+
    "\1\1\3\11\1\1\2\11\1\1\1\11\16\1\2\11"+
    "\1\1\1\11\22\1\3\11\17\1\1\0\1\1\10\0"+
    "\2\1\1\0\1\1\1\0\103\1\2\0\1\11\26\0"+
    "\32\1\2\0\74\1\6\0\1\1\16\0\25\1\1\0"+
    "\14\1\2\11\55\1\25\0\77\1\17\0\42\1\4\0"+
    "\1\1\1\0\17\1\4\0\7\1\1\0\4\1\1\0"+
    "\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[702];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    StringBuffer stringN = new StringBuffer();
    public static int banderaN = 0;
    public static int bandera = 0;
    public static int bandera2 = 0;
    public static int bandera3 = 0;
    public static ArrayList<Token> tokens = new ArrayList<>();  
    public static ArrayList<Token> errores = new ArrayList<>();  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {   for(Token t: tokens){
    t.print();
  }

  System.out.println("\nErrores\n");
  for(Token t: errores){
    t.print();
  }
  return 0;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { stringN.setLength(0);
     stringN.append(yytext());
     System.out.println("------------");
     yybegin(stateNosibol);
            }
            // fall through
          case 54: break;
          case 2:
            { /* ignore */ ;banderaN =0;
            }
            // fall through
          case 55: break;
          case 3:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
            }
            // fall through
          case 56: break;
          case 4:
            { string.setLength(0); yybegin(STRING); bandera = yycolumn;
            }
            // fall through
          case 57: break;
          case 5:
            { string.setLength(0); yybegin(Chars); bandera = yycolumn;
            }
            // fall through
          case 58: break;
          case 6:
            { string.setLength(0);
  string.append(yytext());
  yybegin(numberState);
  banderaN =0;
  bandera2 = 0;
  bandera3= 0;
            }
            // fall through
          case 59: break;
          case 7:
            { stringN.setLength(0);
string.setLength(0);
string.append(yytext());
stringN.append(yytext());
yybegin(filtro);
            }
            // fall through
          case 60: break;
          case 8:
            { string.append( yytext() );
            }
            // fall through
          case 61: break;
          case 9:
            { errores.add(new Token(string.toString(), yyline, bandera, "Error stringASAD"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 62: break;
          case 10:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal string"));
            }
            // fall through
          case 63: break;
          case 11:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error string"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 64: break;
          case 12:
            { string.append(yytext());
    yybegin(hexaStateError);
            }
            // fall through
          case 65: break;
          case 13:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: hexadecimal sin cierre"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 66: break;
          case 14:
            { yybegin(YYINITIAL);
    string.append( yytext() ); 
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal hexadecimal/Palabra Reservada"));
            }
            // fall through
          case 67: break;
          case 15:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: comillas de cierre incorrectas"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 68: break;
          case 16:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); 
    errores.add(new Token("Comillas", yyline, yycolumn, "Error: hexadecimal sin cierre"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 69: break;
          case 17:
            { System.out.println(yyline);
  System.out.println(yycolumn); 
  // throw new Error("Illegal character <"+ yytext()+">");
            }
            // fall through
          case 70: break;
          case 18:
            { string.append(yytext());
    yybegin(hexaStateCError);
            }
            // fall through
          case 71: break;
          case 19:
            { string.append(yytext());
            }
            // fall through
          case 72: break;
          case 20:
            { yybegin(YYINITIAL); errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
            }
            // fall through
          case 73: break;
          case 21:
            { yybegin(YYINITIAL);
    string.append(yytext());
    errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
            }
            // fall through
          case 74: break;
          case 22:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
            }
            // fall through
          case 75: break;
          case 23:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
  tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
  yybegin(YYINITIAL);
            }
            // fall through
          case 76: break;
          case 24:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "literal numerico"));
    tokens.add(new Token(")", yyline+1, yycolumn, "Operador"));
            }
            // fall through
          case 77: break;
          case 25:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "literal numerico"));
    tokens.add(new Token(";", yyline+1, yycolumn, "Operador"));
            }
            // fall through
          case 78: break;
          case 26:
            { string.append(yytext()); yybegin(Identificadorcillo);
            }
            // fall through
          case 79: break;
          case 27:
            { yybegin(otraMas);
    string.append(yytext());
            }
            // fall through
          case 80: break;
          case 28:
            { bandera = 1; 
    string.append(yytext());
            }
            // fall through
          case 81: break;
          case 29:
            { if(bandera == 1){
      yybegin(YYINITIAL);
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
    }
    else{
      yybegin(YYINITIAL);
      tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
    }
            }
            // fall through
          case 82: break;
          case 30:
            { if(bandera == 1){
      yybegin(YYINITIAL);
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
    else{
      yybegin(YYINITIAL);
      tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
            }
            // fall through
          case 83: break;
          case 31:
            { if((bandera2 == 1) && (bandera == 1)){
      yybegin(YYINITIAL);
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
    else if ((bandera2 == 1) && (bandera == 0)){
      yybegin(YYINITIAL);
      tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
    else if ((bandera2 == 0) && (bandera == 1)){
      yybegin(YYINITIAL);
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
    else {
      yybegin(YYINITIAL);
      tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
            }
            // fall through
          case 84: break;
          case 32:
            { string.append( yytext() );
    errores.add(new Token(string.toString(), yyline, bandera, "Error char"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 85: break;
          case 33:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error char"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 86: break;
          case 34:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal char"));
            }
            // fall through
          case 87: break;
          case 35:
            { errores.add(new Token(string.toString(), yyline, bandera, "Error: identificador")); yybegin(YYINITIAL);
            }
            // fall through
          case 88: break;
          case 36:
            { stringN.append(yytext());yybegin(stateNosibol);
            }
            // fall through
          case 89: break;
          case 37:
            { errores.add(new Token(stringN.toString(), yyline, yycolumn, "Error: identificador"));
        yybegin(YYINITIAL);
            }
            // fall through
          case 90: break;
          case 38:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));     
        errores.add(new Token(stringN.toString(), yyline, yycolumn, "Error: identificador"));
        yybegin(YYINITIAL);
            }
            // fall through
          case 91: break;
          case 39:
            { stringN.append(yytext());
    yybegin(stateNosibol);
            }
            // fall through
          case 92: break;
          case 40:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Identificador   1"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 93: break;
          case 41:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Identificador"));
    tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 94: break;
          case 42:
            { string.append(yytext()) ;
              errores.add(new Token(string.toString(), yyline, yycolumn, "Error Identificador"));
              yybegin(YYINITIAL);
            }
            // fall through
          case 95: break;
          case 43:
            { if (bandera3 == 0){
      string.append(yytext());
      bandera3 = 1;
      yybegin(otraMas);
    }
    else{
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Error: Literal numerico"));
      yybegin(YYINITIAL);
    }
            }
            // fall through
          case 96: break;
          case 44:
            { string.append(yytext());
    bandera2 = 1;
    yybegin(NaturalNumbers);
            }
            // fall through
          case 97: break;
          case 45:
            { if (bandera3 == 1){
      string.append(yytext());
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
      yybegin(YYINITIAL);
    }
    else{
      string.append(yytext());
      yybegin(NaturalNumbers);
    }
            }
            // fall through
          case 98: break;
          case 46:
            { System.out.println("Hola");
    string.append(yytext());
    errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 99: break;
          case 47:
            { string.setLength(0);
  string.append(yytext());
  errores.add(new Token(string.toString(), yyline, yycolumn, "Error Identificador"));
  yybegin(YYINITIAL);
            }
            // fall through
          case 100: break;
          case 48:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error Decimal"));
            }
            // fall through
          case 101: break;
          case 49:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));
            }
            // fall through
          case 102: break;
          case 50:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Units"));
            }
            // fall through
          case 103: break;
          case 51:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Transac"));
            }
            // fall through
          case 104: break;
          case 52:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaState);
            }
            // fall through
          case 105: break;
          case 53:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaStateC);
            }
            // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
